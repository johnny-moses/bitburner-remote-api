{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":581,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":11308144.615201293,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5730422820448497,\"hacking_speed\":1.5442611299828681,\"hacking_money\":1.4267957206756008,\"hacking_grow\":1.4267957206756008,\"hacking\":1.817807661131028,\"hacking_exp\":2.368926769984208,\"strength\":1.4267957206756008,\"strength_exp\":1.804896586654635,\"defense\":1.4267957206756008,\"defense_exp\":1.804896586654635,\"dexterity\":1.4267957206756008,\"dexterity_exp\":1.804896586654635,\"agility\":1.4267957206756008,\"agility_exp\":1.804896586654635,\"charisma\":1.4267957206756008,\"charisma_exp\":1.804896586654635,\"hacknet_node_money\":1.4267957206756008,\"hacknet_node_purchase_cost\":0.7008704788702975,\"hacknet_node_ram_cost\":0.7008704788702975,\"hacknet_node_core_cost\":0.7008704788702975,\"hacknet_node_level_cost\":0.7008704788702975,\"company_rep\":1.804896586654635,\"faction_rep\":1.804896586654635,\"work_money\":1.569475292743161,\"crime_success\":1.4267957206756008,\"crime_money\":1.4267957206756008,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"go\":{\"boardState\":{\"history\":[[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]]],\"previousPlayer\":null,\"ai\":\"Netburners\",\"passCount\":2,\"cheatCount\":0,\"board\":[[{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":2,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":3,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":6,\"y\":2},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}]]},\"status\":{\"No AI\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"Netburners\":{\"wins\":3,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":2,\"highestWinStreak\":3,\"favor\":1},\"Slum Snakes\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"The Black Hand\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"Tetrads\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"Daedalus\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"Illuminati\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0},\"????????????\":{\"wins\":0,\"losses\":0,\"nodes\":0,\"nodePower\":0,\"winStreak\":0,\"oldWinStreak\":0,\"highestWinStreak\":0,\"favor\":0}},\"previousGameFinalBoardState\":{\"history\":[[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]],[[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":0,\"y\":6}],[{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":0},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":2},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"\",\"liberties\":null,\"x\":6,\"y\":6}]]],\"previousPlayer\":null,\"ai\":\"Netburners\",\"passCount\":2,\"cheatCount\":0,\"board\":[[{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":0},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":0,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":0,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":0,\"y\":5},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":1,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":1,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":1,\"y\":5},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":2,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":2,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":2,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":2,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":2,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":3,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":3,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":3,\"y\":5},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6}],[{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":4,\"y\":0},{\"player\":\"Black\",\"chain\":\"2,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1}],\"x\":4,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":4,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":4,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":0},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":2},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":3},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":5,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":5,\"y\":5},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":5,\"y\":6}],[{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":0},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1},{\"player\":\"Black\",\"chain\":\"0,0\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":0},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":1,\"y\":1},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":1,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,3\",\"liberties\":[],\"x\":2,\"y\":3},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":2,\"y\":1},{\"player\":\"Empty\",\"chain\":\"4,2\",\"liberties\":[],\"x\":4,\"y\":2},{\"player\":\"Empty\",\"chain\":\"1,0\",\"liberties\":[],\"x\":3,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":5,\"y\":1},{\"player\":\"Empty\",\"chain\":\"5,0\",\"liberties\":[],\"x\":6,\"y\":1}],\"x\":6,\"y\":2},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":3},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":4},{\"player\":\"White\",\"chain\":\"0,4\",\"liberties\":[{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":0,\"y\":6},{\"player\":\"Empty\",\"chain\":\"0,6\",\"liberties\":[],\"x\":1,\"y\":6},{\"player\":\"Empty\",\"chain\":\"3,6\",\"liberties\":[],\"x\":3,\"y\":6},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}],\"x\":6,\"y\":5},{\"player\":\"Empty\",\"chain\":\"6,6\",\"liberties\":[],\"x\":6,\"y\":6}]]}},\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"New Tokyo\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Ishima\"]},\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":15423867159.90706,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":82432251183.30711,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-66696284023.400314,\"total\":15422867159.90706,\"work\":0,\"servers\":0,\"other\":-313100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":284076839605.6754,\"hacknet\":156356524.43607152,\"hacknet_expenses\":-419728853.1562275,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-66696284023.400314,\"total\":36640283833.163956,\"work\":0,\"servers\":-110157120141.54442,\"other\":-940200000,\"augmentations\":-69379579278.84483}},\"playtimeSinceLastAug\":21275800,\"playtimeSinceLastBitnode\":103521000,\"lastAugReset\":1703956650994,\"lastNodeReset\":1703874402904,\"purchasedServers\":[],\"scriptProdSinceLastAug\":90749889862.61365,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,2]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1686249765485},{\"ID\":\"NS2\",\"unlockedOn\":1686250005496},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686254325492},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1703004526683},{\"ID\":\"TOR\",\"unlockedOn\":1703005126678},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1703005262283},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1703005862285},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1703005862287},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1703005862288},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1703005862289},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1703005862290},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1703005862292},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1703010209268},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1703014589262},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1703014649264},{\"ID\":\"TRAVEL\",\"unlockedOn\":1703015009261},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1703057879267},{\"ID\":\"NITESEC\",\"unlockedOn\":1703098006252},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1703225325152},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1703278037984},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1703454202896},{\"ID\":\"DONATION\",\"unlockedOn\":1703454860587},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1703471231262},{\"ID\":\"4S\",\"unlockedOn\":1703488463217},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1703520923641},{\"ID\":\"SF1.1\",\"unlockedOn\":1703534304022},{\"ID\":\"N00DLES\",\"unlockedOn\":1703818711370},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1703820751365},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1703964954849},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1703964954851}],\"terminalCommandHistory\":[\"cd trade; run trade.js; tail trade.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"cd scripts\",\"ls\",\"home; cd trade; run trade.js; tail trade.js\",\"wa\",\"run auto-exec.js\",\"home; cd trade; run trade.js; tail trade.js\",\"wa\",\"run auto-exec.js\",\"home; cd trade; run trade.js; tail trade.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"ls\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"wa\",\"run auto-exec.js\",\"home; cd trade; run trade.js; tail trade.js\",\"cd trade; run trade.js; tail trade.js\",\"wa\",\"ls\",\"run auto-exec.js\",\"a10\",\"s10\",\"backdoor\",\"home\",\"cd wormy/advanced/scripts\",\"ls\"],\"lastUpdate\":1703977930835,\"lastSave\":1703977927386,\"totalPlaytime\":17728158800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":23655,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1cb4f32f1926aa\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"57.0.4.6\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"util/thanos.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const files = ns.ls('home'); // Get the list of all files on 'home' server\\n    for (const file of files) {\\n        ns.rm(file, 'home'); // Remove each file\\n        ns.tprint(`Deleted file: ${file}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhhbm9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvdGhhbm9zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7SUFFMUUsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7UUFDeEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCBmaWxlcyA9IG5zLmxzKCdob21lJyk7IC8vIEdldCB0aGUgbGlzdCBvZiBhbGwgZmlsZXMgb24gJ2hvbWUnIHNlcnZlclxyXG5cclxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgIG5zLnJtKGZpbGUsICdob21lJyk7IC8vIFJlbW92ZSBlYWNoIGZpbGVcclxuICAgICAgICBucy50cHJpbnQoYERlbGV0ZWQgZmlsZTogJHtmaWxlfWApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"util/thanos.js\",\"server\":\"home\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"home\"}}],[\"trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// file: stock-trader.js\\n// requires 4s Market Data TIX API Access\\n// defines if stocks can be shorted (see BitNode 8)\\nconst shortAvailable = true;\\nconst commission = 100000;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        tendStocks(ns);\\n        await ns.sleep(5 * 1000);\\n    }\\n}\\nfunction tendStocks(ns) {\\n    // file: stock-trader.js\\n    // requires 4s Market Data TIX API Access\\n    // defines if stocks can be shorted (see BitNode 8)\\n    const shortAvailable = true;\\n    const commission = 100000;\\n    async function main(ns) {\\n        ns.disableLog(\\\"ALL\\\");\\n        while (true) {\\n            tendStocks(ns);\\n            await ns.sleep(5 * 1000);\\n        }\\n    }\\n    function tendStocks(ns) {\\n        ns.print(\\\"\\\");\\n        var stocks = getAllStocks(ns);\\n        stocks.sort((a, b) => b.profitPotential - a.profitPotential);\\n        var longStocks = new Set();\\n        var shortStocks = new Set();\\n        var overallValue = 0;\\n        for (const stock of stocks) {\\n            if (stock.longShares > 0) {\\n                if (stock.forecast > 0.5) {\\n                    longStocks.add(stock.sym);\\n                    ns.print(`INFO ${stock.summary} LONG ${ns.nFormat(stock.cost + stock.profit, \\\"0.0a\\\")} ${ns.nFormat(100 * stock.profit / stock.cost, \\\"0.00\\\")}%`);\\n                    overallValue += (stock.cost + stock.profit);\\n                }\\n                else {\\n                    const salePrice = ns.stock.sell(stock.sym, stock.longShares);\\n                    const saleTotal = salePrice * stock.longShares;\\n                    const saleCost = stock.longPrice * stock.longShares;\\n                    const saleProfit = saleTotal - saleCost - 2 * commission;\\n                    stock.shares = 0;\\n                    shortStocks.add(stock.sym);\\n                    ns.print(`WARN ${stock.summary} SOLD for ${ns.nFormat(saleProfit, \\\"$0.0a\\\")} profit`);\\n                }\\n            }\\n            if (stock.shortShares > 0) {\\n                if (stock.forecast < 0.5) {\\n                    shortStocks.add(stock.sym);\\n                    ns.print(`INFO ${stock.summary} SHORT ${ns.nFormat(stock.cost + stock.profit, \\\"0.0a\\\")} ${ns.nFormat(100 * stock.profit / stock.cost, \\\"0.00\\\")}%`);\\n                    overallValue += (stock.cost + stock.profit);\\n                }\\n                else {\\n                    const salePrice = ns.stock.sellShort(stock.sym, stock.shortShares);\\n                    const saleTotal = salePrice * stock.shortShares;\\n                    const saleCost = stock.shortPrice * stock.shortShares;\\n                    const saleProfit = saleTotal - saleCost - 2 * commission;\\n                    stock.shares = 0;\\n                    longStocks.add(stock.sym);\\n                    ns.print(`WARN ${stock.summary} SHORT SOLD for ${ns.nFormat(saleProfit, \\\"$0.0a\\\")} profit`);\\n                }\\n            }\\n        }\\n        for (const stock of stocks) {\\n            var money = ns.getServerMoneyAvailable(\\\"home\\\");\\n            //ns.print(`INFO ${stock.summary}`);\\n            if (stock.forecast > 0.55) {\\n                longStocks.add(stock.sym);\\n                //ns.print(`INFO ${stock.summary}`);\\n                if (money > 500 * commission) {\\n                    const sharesToBuy = Math.min(stock.maxShares, Math.floor((money - commission) / stock.askPrice));\\n                    if (ns.stock.buy(stock.sym, sharesToBuy) > 0) {\\n                        ns.print(`WARN ${stock.summary} LONG BOUGHT ${ns.nFormat(sharesToBuy, \\\"$0.0a\\\")}`);\\n                    }\\n                }\\n            }\\n            else if (stock.forecast < 0.45 && shortAvailable) {\\n                shortStocks.add(stock.sym);\\n                //ns.print(`INFO ${stock.summary}`);\\n                if (money > 500 * commission) {\\n                    const sharesToBuy = Math.min(stock.maxShares, Math.floor((money - commission) / stock.bidPrice));\\n                    if (ns.stock.short(stock.sym, sharesToBuy) > 0) {\\n                        ns.print(`WARN ${stock.summary} SHORT BOUGHT ${ns.nFormat(sharesToBuy, \\\"$0.0a\\\")}`);\\n                    }\\n                }\\n            }\\n        }\\n        ns.print(\\\"Stock value: \\\" + ns.nFormat(overallValue, \\\"$0.0a\\\"));\\n        // send stock market manipulation orders to hack manager\\n        var growStockPort = ns.getPortHandle(1); // port 1 is grow\\n        var hackStockPort = ns.getPortHandle(2); // port 2 is hack\\n        if (growStockPort.empty() && hackStockPort.empty()) {\\n            // only write to ports if empty\\n            for (const sym of longStocks) {\\n                //ns.print(\\\"INFO grow \\\" + sym);\\n                growStockPort.write(getSymServer(sym));\\n            }\\n            for (const sym of shortStocks) {\\n                //ns.print(\\\"INFO hack \\\" + sym);\\n                hackStockPort.write(getSymServer(sym));\\n            }\\n        }\\n    }\\n    async function getAllStocks(ns) {\\n        // make a lookup table of all stocks and all their properties\\n        const stockSymbols = ns.stock.getSymbols();\\n        const stocks = [];\\n        for (const sym of stockSymbols) {\\n            const pos = ns.stock.getPosition(sym);\\n            const stock = {\\n                sym: sym,\\n                longShares: pos[0],\\n                longPrice: pos[1],\\n                shortShares: pos[2],\\n                shortPrice: pos[3],\\n                forecast: ns.stock.getForecast(sym),\\n                volatility: ns.stock.getVolatility(sym),\\n                askPrice: ns.stock.getAskPrice(sym),\\n                bidPrice: ns.stock.getBidPrice(sym),\\n                maxShares: ns.stock.getMaxShares(sym),\\n            };\\n            var longProfit = stock.longShares * (stock.bidPrice - stock.longPrice) - 2 * commission;\\n            var shortProfit = stock.shortShares * (stock.shortPrice - stock.askPrice) - 2 * commission;\\n            stock.profit = longProfit + shortProfit;\\n            stock.cost = (stock.longShares * stock.longPrice) + (stock.shortShares * stock.shortPrice);\\n            // profit potential as chance for profit * effect of profit\\n            var profitChance = 2 * Math.abs(stock.forecast - 0.5);\\n            var profitPotential = profitChance * (stock.volatility);\\n            stock.profitPotential = profitPotential;\\n            stock.summary = `${stock.sym}: ${stock.forecast.toFixed(3)} ± ${stock.volatility.toFixed(3)}`;\\n            stocks.push(stock);\\n        }\\n        return stocks;\\n    }\\n    function getSymServer(sym) {\\n        const symServer = {\\n            \\\"WDS\\\": \\\"\\\",\\n            \\\"ECP\\\": \\\"ecorp\\\",\\n            \\\"MGCP\\\": \\\"megacorp\\\",\\n            \\\"BLD\\\": \\\"blade\\\",\\n            \\\"CLRK\\\": \\\"clarkinc\\\",\\n            \\\"OMTK\\\": \\\"omnitek\\\",\\n            \\\"FSIG\\\": \\\"4sigma\\\",\\n            \\\"KGI\\\": \\\"kuai-gong\\\",\\n            \\\"DCOMM\\\": \\\"defcomm\\\",\\n            \\\"VITA\\\": \\\"vitalife\\\",\\n            \\\"ICRS\\\": \\\"icarus\\\",\\n            \\\"UNV\\\": \\\"univ-energy\\\",\\n            \\\"AERO\\\": \\\"aerocorp\\\",\\n            \\\"SLRS\\\": \\\"solaris\\\",\\n            \\\"GPH\\\": \\\"global-pharm\\\",\\n            \\\"NVMD\\\": \\\"nova-med\\\",\\n            \\\"LXO\\\": \\\"lexo-corp\\\",\\n            \\\"RHOC\\\": \\\"rho-construction\\\",\\n            \\\"APHE\\\": \\\"alpha-ent\\\",\\n            \\\"SYSC\\\": \\\"syscore\\\",\\n            \\\"CTK\\\": \\\"comptek\\\",\\n            \\\"NTLK\\\": \\\"netlink\\\",\\n            \\\"OMGA\\\": \\\"omega-net\\\",\\n            \\\"JGN\\\": \\\"joesguns\\\",\\n            \\\"SGC\\\": \\\"sigma-cosmetics\\\",\\n            \\\"CTYS\\\": \\\"catalyst\\\",\\n            \\\"MDYN\\\": \\\"microdyne\\\",\\n            \\\"TITN\\\": \\\"titan-labs\\\",\\n            \\\"FLCM\\\": \\\"fulcrumtech\\\",\\n            \\\"STM\\\": \\\"stormtech\\\",\\n            \\\"HLS\\\": \\\"helios\\\",\\n            \\\"OMN\\\": \\\"omnia\\\",\\n            \\\"FNS\\\": \\\"foodnstuff\\\"\\n        };\\n        return symServer[sym];\\n    }\\n}\\nexport function getAllStocks(ns) {\\n    // make a lookup table of all stocks and all their properties\\n    const stockSymbols = ns.stock.getSymbols();\\n    const stocks = [];\\n    for (const sym of stockSymbols) {\\n        const pos = ns.stock.getPosition(sym);\\n        const stock = {\\n            sym: sym,\\n            longShares: pos[0],\\n            longPrice: pos[1],\\n            shortShares: pos[2],\\n            shortPrice: pos[3],\\n            forecast: ns.stock.getForecast(sym),\\n            volatility: ns.stock.getVolatility(sym),\\n            askPrice: ns.stock.getAskPrice(sym),\\n            bidPrice: ns.stock.getBidPrice(sym),\\n            maxShares: ns.stock.getMaxShares(sym),\\n        };\\n        var longProfit = stock.longShares * (stock.bidPrice - stock.longPrice) - 2 * commission;\\n        var shortProfit = stock.shortShares * (stock.shortPrice - stock.askPrice) - 2 * commission;\\n        stock.profit = longProfit + shortProfit;\\n        stock.cost = (stock.longShares * stock.longPrice) + (stock.shortShares * stock.shortPrice);\\n        // profit potential as chance for profit * effect of profit\\n        var profitChance = 2 * Math.abs(stock.forecast - 0.5);\\n        var profitPotential = profitChance * (stock.volatility);\\n        stock.profitPotential = profitPotential;\\n        stock.summary = `${stock.sym}: ${stock.forecast.toFixed(3)} ± ${stock.volatility.toFixed(3)}`;\\n        stocks.push(stock);\\n    }\\n    return stocks;\\n}\\nfunction getSymServer(sym) {\\n    const symServer = {\\n        \\\"WDS\\\": \\\"\\\",\\n        \\\"ECP\\\": \\\"ecorp\\\",\\n        \\\"MGCP\\\": \\\"megacorp\\\",\\n        \\\"BLD\\\": \\\"blade\\\",\\n        \\\"CLRK\\\": \\\"clarkinc\\\",\\n        \\\"OMTK\\\": \\\"omnitek\\\",\\n        \\\"FSIG\\\": \\\"4sigma\\\",\\n        \\\"KGI\\\": \\\"kuai-gong\\\",\\n        \\\"DCOMM\\\": \\\"defcomm\\\",\\n        \\\"VITA\\\": \\\"vitalife\\\",\\n        \\\"ICRS\\\": \\\"icarus\\\",\\n        \\\"UNV\\\": \\\"univ-energy\\\",\\n        \\\"AERO\\\": \\\"aerocorp\\\",\\n        \\\"SLRS\\\": \\\"solaris\\\",\\n        \\\"GPH\\\": \\\"global-pharm\\\",\\n        \\\"NVMD\\\": \\\"nova-med\\\",\\n        \\\"LXO\\\": \\\"lexo-corp\\\",\\n        \\\"RHOC\\\": \\\"rho-construction\\\",\\n        \\\"APHE\\\": \\\"alpha-ent\\\",\\n        \\\"SYSC\\\": \\\"syscore\\\",\\n        \\\"CTK\\\": \\\"comptek\\\",\\n        \\\"NTLK\\\": \\\"netlink\\\",\\n        \\\"OMGA\\\": \\\"omega-net\\\",\\n        \\\"JGN\\\": \\\"joesguns\\\",\\n        \\\"SGC\\\": \\\"sigma-cosmetics\\\",\\n        \\\"CTYS\\\": \\\"catalyst\\\",\\n        \\\"MDYN\\\": \\\"microdyne\\\",\\n        \\\"TITN\\\": \\\"titan-labs\\\",\\n        \\\"FLCM\\\": \\\"fulcrumtech\\\",\\n        \\\"STM\\\": \\\"stormtech\\\",\\n        \\\"HLS\\\": \\\"helios\\\",\\n        \\\"OMN\\\": \\\"omnia\\\",\\n        \\\"FNS\\\": \\\"foodnstuff\\\"\\n    };\\n    return symServer[sym];\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0JBQXdCO0FBRXhCLHlDQUF5QztBQUV6QyxtREFBbUQ7QUFDbkQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBRTVCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUUxQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsT0FBTyxJQUFJLEVBQUU7UUFDVCxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQzVCO0FBQ0wsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEVBQUU7SUFDdEIsd0JBQXdCO0lBRXhCLHlDQUF5QztJQUV6QyxtREFBbUQ7SUFDL0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBRTVCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUUxQixLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7UUFDbEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQixPQUFPLElBQUksRUFBRTtZQUNULFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNmLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUMsRUFBRTtRQUNsQixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFD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LEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsaUJBQWlCO1FBQ3hCLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLE1BQU0sRUFBRSxhQUFhO1FBQ3JCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLEtBQUssRUFBRSxRQUFRO1FBQ2YsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsWUFBWTtLQUN0QixDQUFBO0lBRUQsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZpbGU6IHN0b2NrLXRyYWRlci5qc1xyXG5cclxuLy8gcmVxdWlyZXMgNHMgTWFya2V0IERhdGEgVElYIEFQSSBBY2Nlc3NcclxuXHJcbi8vIGRlZmluZXMgaWYgc3RvY2tzIGNhbiBiZSBzaG9ydGVkIChzZWUgQml0Tm9kZSA4KVxyXG5jb25zdCBzaG9ydEF2YWlsYWJsZSA9IHRydWU7XHJcblxyXG5jb25zdCBjb21taXNzaW9uID0gMTAwMDAwO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB0ZW5kU3RvY2tzKG5zKTtcclxuICAgICAgICBhd2FpdCBucy5zbGVlcCg1ICogMTAwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRlbmRTdG9ja3MobnMpIHtcclxuLy8gZmlsZTogc3RvY2stdHJhZGVyLmpzXHJcblxyXG4vLyByZXF1aXJlcyA0cyBNYXJrZXQgRGF0YSBUSVggQVBJIEFjY2Vzc1xyXG5cclxuLy8gZGVmaW5lcyBpZiBzdG9ja3MgY2FuIGJlIHNob3J0ZWQgKHNlZSBCaXROb2RlIDgpXHJcbiAgICBjb25zdCBzaG9ydEF2YWlsYWJsZSA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgY29tbWlzc2lvbiA9IDEwMDAwMDtcclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICAgICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgdGVuZFN0b2Nrcyhucyk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdGVuZFN0b2Nrcyhucykge1xyXG4gICAgICAgIG5zLnByaW50KFwiXCIpO1xyXG4gICAgICAgIHZhciBzdG9ja3MgPSBnZXRBbGxTdG9ja3MobnMpO1xyXG5cclxuICAgICAgICBzdG9ja3Muc29ydCgoYSwgYikgPT4gYi5wcm9maXRQb3RlbnRpYWwgLSBhLnByb2ZpdFBvdGVudGlhbCk7XHJcblxyXG4gICAgICAgIHZhciBsb25nU3RvY2tzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHZhciBzaG9ydFN0b2NrcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB2YXIgb3ZlcmFsbFZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBzdG9jayBvZiBzdG9ja3MpIHtcclxuICAgICAgICAgICAgaWYgKHN0b2NrLmxvbmdTaGFyZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvY2suZm9yZWNhc3QgPiAwLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb25nU3RvY2tzLmFkZChzdG9jay5zeW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPICR7c3RvY2suc3VtbWFyeX0gTE9ORyAke25zLm5Gb3JtYXQoc3RvY2suY29zdCArIHN0b2NrLnByb2ZpdCwgXCIwLjBhXCIpfSAke25zLm5Gb3JtYXQoMTAwICogc3RvY2sucHJvZml0IC8gc3RvY2suY29zdCwgXCIwLjAwXCIpfSVgKTtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyYWxsVmFsdWUgKz0gKHN0b2NrLmNvc3QgKyBzdG9jay5wcm9maXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWxlUHJpY2UgPSBucy5zdG9jay5zZWxsKHN0b2NrLnN5bSwgc3RvY2subG9uZ1NoYXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FsZVRvdGFsID0gc2FsZVByaWNlICogc3RvY2subG9uZ1NoYXJlcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWxlQ29zdCA9IHN0b2NrLmxvbmdQcmljZSAqIHN0b2NrLmxvbmdTaGFyZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FsZVByb2ZpdCA9IHNhbGVUb3RhbCAtIHNhbGVDb3N0IC0gMiAqIGNvbW1pc3Npb247XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvY2suc2hhcmVzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBzaG9ydFN0b2Nrcy5hZGQoc3RvY2suc3ltKTtcclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChgV0FSTiAke3N0b2NrLnN1bW1hcnl9IFNPTEQgZm9yICR7bnMubkZvcm1hdChzYWxlUHJvZml0LCBcIiQwLjBhXCIpfSBwcm9maXRgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RvY2suc2hvcnRTaGFyZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvY2suZm9yZWNhc3QgPCAwLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG9ydFN0b2Nrcy5hZGQoc3RvY2suc3ltKTtcclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTyAke3N0b2NrLnN1bW1hcnl9IFNIT1JUICR7bnMubkZvcm1hdChzdG9jay5jb3N0ICsgc3RvY2sucHJvZml0LCBcIjAuMGFcIil9ICR7bnMubkZvcm1hdCgxMDAgKiBzdG9jay5wcm9maXQgLyBzdG9jay5jb3N0LCBcIjAuMDBcIil9JWApO1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJhbGxWYWx1ZSArPSAoc3RvY2suY29zdCArIHN0b2NrLnByb2ZpdCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhbGVQcmljZSA9IG5zLnN0b2NrLnNlbGxTaG9ydChzdG9jay5zeW0sIHN0b2NrLnNob3J0U2hhcmVzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWxlVG90YWwgPSBzYWxlUHJpY2UgKiBzdG9jay5zaG9ydFNoYXJlcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWxlQ29zdCA9IHN0b2NrLnNob3J0UHJpY2UgKiBzdG9jay5zaG9ydFNoYXJlcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWxlUHJvZml0ID0gc2FsZVRvdGFsIC0gc2FsZUNvc3QgLSAyICogY29tbWlzc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICBzdG9jay5zaGFyZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdTdG9ja3MuYWRkKHN0b2NrLnN5bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoYFdBUk4gJHtzdG9jay5zdW1tYXJ5fSBTSE9SVCBTT0xEIGZvciAke25zLm5Gb3JtYXQoc2FsZVByb2ZpdCwgXCIkMC4wYVwiKX0gcHJvZml0YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc3RvY2sgb2Ygc3RvY2tzKSB7XHJcbiAgICAgICAgICAgIHZhciBtb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKTtcclxuICAgICAgICAgICAgLy9ucy5wcmludChgSU5GTyAke3N0b2NrLnN1bW1hcnl9YCk7XHJcbiAgICAgICAgICAgIGlmIChzdG9jay5mb3JlY2FzdCA+IDAuNTUpIHtcclxuICAgICAgICAgICAgICAgIGxvbmdTdG9ja3MuYWRkKHN0b2NrLnN5bSk7XHJcbiAgICAgICAgICAgICAgICAvL25zLnByaW50KGBJTkZPICR7c3RvY2suc3VtbWFyeX1gKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb25leSA+IDUwMCAqIGNvbW1pc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZXNUb0J1eSA9IE1hdGgubWluKHN0b2NrLm1heFNoYXJlcywgTWF0aC5mbG9vcigobW9uZXkgLSBjb21taXNzaW9uKSAvIHN0b2NrLmFza1ByaWNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5zLnN0b2NrLmJ1eShzdG9jay5zeW0sIHNoYXJlc1RvQnV5KSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoYFdBUk4gJHtzdG9jay5zdW1tYXJ5fSBMT05HIEJPVUdIVCAke25zLm5Gb3JtYXQoc2hhcmVzVG9CdXksIFwiJDAuMGFcIil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0b2NrLmZvcmVjYXN0IDwgMC40NSAmJiBzaG9ydEF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgc2hvcnRTdG9ja3MuYWRkKHN0b2NrLnN5bSk7XHJcbiAgICAgICAgICAgICAgICAvL25zLnByaW50KGBJTkZPICR7c3RvY2suc3VtbWFyeX1gKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb25leSA+IDUwMCAqIGNvbW1pc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZXNUb0J1eSA9IE1hdGgubWluKHN0b2NrLm1heFNoYXJlcywgTWF0aC5mbG9vcigobW9uZXkgLSBjb21taXNzaW9uKSAvIHN0b2NrLmJpZFByaWNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5zLnN0b2NrLnNob3J0KHN0b2NrLnN5bSwgc2hhcmVzVG9CdXkpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5wcmludChgV0FSTiAke3N0b2NrLnN1bW1hcnl9IFNIT1JUIEJPVUdIVCAke25zLm5Gb3JtYXQoc2hhcmVzVG9CdXksIFwiJDAuMGFcIil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5zLnByaW50KFwiU3RvY2sgdmFsdWU6IFwiICsgbnMubkZvcm1hdChvdmVyYWxsVmFsdWUsIFwiJDAuMGFcIikpO1xyXG5cclxuICAgICAgICAvLyBzZW5kIHN0b2NrIG1hcmtldCBtYW5pcHVsYXRpb24gb3JkZXJzIHRvIGhhY2sgbWFuYWdlclxyXG4gICAgICAgIHZhciBncm93U3RvY2tQb3J0ID0gbnMuZ2V0UG9ydEhhbmRsZSgxKTsgLy8gcG9ydCAxIGlzIGdyb3dcclxuICAgICAgICB2YXIgaGFja1N0b2NrUG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7IC8vIHBvcnQgMiBpcyBoYWNrXHJcbiAgICAgICAgaWYgKGdyb3dTdG9ja1BvcnQuZW1wdHkoKSAmJiBoYWNrU3RvY2tQb3J0LmVtcHR5KCkpIHtcclxuICAgICAgICAgICAgLy8gb25seSB3cml0ZSB0byBwb3J0cyBpZiBlbXB0eVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN5bSBvZiBsb25nU3RvY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAvL25zLnByaW50KFwiSU5GTyBncm93IFwiICsgc3ltKTtcclxuICAgICAgICAgICAgICAgIGdyb3dTdG9ja1BvcnQud3JpdGUoZ2V0U3ltU2VydmVyKHN5bSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ltIG9mIHNob3J0U3RvY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAvL25zLnByaW50KFwiSU5GTyBoYWNrIFwiICsgc3ltKTtcclxuICAgICAgICAgICAgICAgIGhhY2tTdG9ja1BvcnQud3JpdGUoZ2V0U3ltU2VydmVyKHN5bSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGdldEFsbFN0b2Nrcyhucykge1xyXG4gICAgICAgIC8vIG1ha2UgYSBsb29rdXAgdGFibGUgb2YgYWxsIHN0b2NrcyBhbmQgYWxsIHRoZWlyIHByb3BlcnRpZXNcclxuICAgICAgICBjb25zdCBzdG9ja1N5bWJvbHMgPSBucy5zdG9jay5nZXRTeW1ib2xzKCk7XHJcbiAgICAgICAgY29uc3Qgc3RvY2tzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBzeW0gb2Ygc3RvY2tTeW1ib2xzKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwb3MgPSBucy5zdG9jay5nZXRQb3NpdGlvbihzeW0pO1xyXG4gICAgICAgICAgICBjb25zdCBzdG9jayA9IHtcclxuICAgICAgICAgICAgICAgIHN5bTogc3ltLFxyXG4gICAgICAgICAgICAgICAgbG9uZ1NoYXJlczogcG9zWzBdLFxyXG4gICAgICAgICAgICAgICAgbG9uZ1ByaWNlOiBwb3NbMV0sXHJcbiAgICAgICAgICAgICAgICBzaG9ydFNoYXJlczogcG9zWzJdLFxyXG4gICAgICAgICAgICAgICAgc2hvcnRQcmljZTogcG9zWzNdLFxyXG4gICAgICAgICAgICAgICAgZm9yZWNhc3Q6IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN5bSksXHJcbiAgICAgICAgICAgICAgICB2b2xhdGlsaXR5OiBucy5zdG9jay5nZXRWb2xhdGlsaXR5KHN5bSksXHJcbiAgICAgICAgICAgICAgICBhc2tQcmljZTogbnMuc3RvY2suZ2V0QXNrUHJpY2Uoc3ltKSxcclxuICAgICAgICAgICAgICAgIGJpZFByaWNlOiBucy5zdG9jay5nZXRCaWRQcmljZShzeW0pLFxyXG4gICAgICAgICAgICAgICAgbWF4U2hhcmVzOiBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3ltKSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsb25nUHJvZml0ID0gc3RvY2subG9uZ1NoYXJlcyAqIChzdG9jay5iaWRQcmljZSAtIHN0b2NrLmxvbmdQcmljZSkgLSAyICogY29tbWlzc2lvbjtcclxuICAgICAgICAgICAgdmFyIHNob3J0UHJvZml0ID0gc3RvY2suc2hvcnRTaGFyZXMgKiAoc3RvY2suc2hvcnRQcmljZSAtIHN0b2NrLmFza1ByaWNlKSAtIDIgKiBjb21taXNzaW9uO1xyXG4gICAgICAgICAgICBzdG9jay5wcm9maXQgPSBsb25nUHJvZml0ICsgc2hvcnRQcm9maXQ7XHJcbiAgICAgICAgICAgIHN0b2NrLmNvc3QgPSAoc3RvY2subG9uZ1NoYXJlcyAqIHN0b2NrLmxvbmdQcmljZSkgKyAoc3RvY2suc2hvcnRTaGFyZXMgKiBzdG9jay5zaG9ydFByaWNlKVxyXG5cclxuICAgICAgICAgICAgLy8gcHJvZml0IHBvdGVudGlhbCBhcyBjaGFuY2UgZm9yIHByb2ZpdCAqIGVmZmVjdCBvZiBwcm9maXRcclxuICAgICAgICAgICAgdmFyIHByb2ZpdENoYW5jZSA9IDIgKiBNYXRoLmFicyhzdG9jay5mb3JlY2FzdCAtIDAuNSk7XHJcbiAgICAgICAgICAgIHZhciBwcm9maXRQb3RlbnRpYWwgPSBwcm9maXRDaGFuY2UgKiAoc3RvY2sudm9sYXRpbGl0eSk7XHJcbiAgICAgICAgICAgIHN0b2NrLnByb2ZpdFBvdGVudGlhbCA9IHByb2ZpdFBvdGVudGlhbDtcclxuXHJcbiAgICAgICAgICAgIHN0b2NrLnN1bW1hcnkgPSBgJHtzdG9jay5zeW19OiAke3N0b2NrLmZvcmVjYXN0LnRvRml4ZWQoMyl9IMKxICR7c3RvY2sudm9sYXRpbGl0eS50b0ZpeGVkKDMpfWA7XHJcbiAgICAgICAgICAgIHN0b2Nrcy5wdXNoKHN0b2NrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0b2NrcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTeW1TZXJ2ZXIoc3ltKSB7XHJcbiAgICAgICAgY29uc3Qgc3ltU2VydmVyID0ge1xyXG4gICAgICAgICAgICBcIldEU1wiOiBcIlwiLFxyXG4gICAgICAgICAgICBcIkVDUFwiOiBcImVjb3JwXCIsXHJcbiAgICAgICAgICAgIFwiTUdDUFwiOiBcIm1lZ2Fjb3JwXCIsXHJcbiAgICAgICAgICAgIFwiQkxEXCI6IFwiYmxhZGVcIixcclxuICAgICAgICAgICAgXCJDTFJLXCI6IFwiY2xhcmtpbmNcIixcclxuICAgICAgICAgICAgXCJPTVRLXCI6IFwib21uaXRla1wiLFxyXG4gICAgICAgICAgICBcIkZTSUdcIjogXCI0c2lnbWFcIixcclxuICAgICAgICAgICAgXCJLR0lcIjogXCJrdWFpLWdvbmdcIixcclxuICAgICAgICAgICAgXCJEQ09NTVwiOiBcImRlZmNvbW1cIixcclxuICAgICAgICAgICAgXCJWSVRBXCI6IFwidml0YWxpZmVcIixcclxuICAgICAgICAgICAgXCJJQ1JTXCI6IFwiaWNhcnVzXCIsXHJcbiAgICAgICAgICAgIFwiVU5WXCI6IFwidW5pdi1lbmVyZ3lcIixcclxuICAgICAgICAgICAgXCJBRVJPXCI6IFwiYWVyb2NvcnBcIixcclxuICAgICAgICAgICAgXCJTTFJTXCI6IFwic29sYXJpc1wiLFxyXG4gICAgICAgICAgICBcIkdQSFwiOiBcImdsb2JhbC1waGFybVwiLFxyXG4gICAgICAgICAgICBcIk5WTURcIjogXCJub3ZhLW1lZFwiLFxyXG4gICAgICAgICAgICBcIkxYT1wiOiBcImxleG8tY29ycFwiLFxyXG4gICAgICAgICAgICBcIlJIT0NcIjogXCJyaG8tY29uc3RydWN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiQVBIRVwiOiBcImFscGhhLWVudFwiLFxyXG4gICAgICAgICAgICBcIlNZU0NcIjogXCJzeXNjb3JlXCIsXHJcbiAgICAgICAgICAgIFwiQ1RLXCI6IFwiY29tcHRla1wiLFxyXG4gICAgICAgICAgICBcIk5UTEtcIjogXCJuZXRsaW5rXCIsXHJcbiAgICAgICAgICAgIFwiT01HQVwiOiBcIm9tZWdhLW5ldFwiLFxyXG4gICAgICAgICAgICBcIkpHTlwiOiBcImpvZXNndW5zXCIsXHJcbiAgICAgICAgICAgIFwiU0dDXCI6IFwic2lnbWEtY29zbWV0aWNzXCIsXHJcbiAgICAgICAgICAgIFwiQ1RZU1wiOiBcImNhdGFseXN0XCIsXHJcbiAgICAgICAgICAgIFwiTURZTlwiOiBcIm1pY3JvZHluZVwiLFxyXG4gICAgICAgICAgICBcIlRJVE5cIjogXCJ0aXRhbi1sYWJzXCIsXHJcbiAgICAgICAgICAgIFwiRkxDTVwiOiBcImZ1bGNydW10ZWNoXCIsXHJcbiAgICAgICAgICAgIFwiU1RNXCI6IFwic3Rvcm10ZWNoXCIsXHJcbiAgICAgICAgICAgIFwiSExTXCI6IFwiaGVsaW9zXCIsXHJcbiAgICAgICAgICAgIFwiT01OXCI6IFwib21uaWFcIixcclxuICAgICAgICAgICAgXCJGTlNcIjogXCJmb29kbnN0dWZmXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzeW1TZXJ2ZXJbc3ltXTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxTdG9ja3MobnMpIHtcclxuICAgIC8vIG1ha2UgYSBsb29rdXAgdGFibGUgb2YgYWxsIHN0b2NrcyBhbmQgYWxsIHRoZWlyIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IHN0b2NrU3ltYm9scyA9IG5zLnN0b2NrLmdldFN5bWJvbHMoKTtcclxuICAgIGNvbnN0IHN0b2NrcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBzeW0gb2Ygc3RvY2tTeW1ib2xzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHBvcyA9IG5zLnN0b2NrLmdldFBvc2l0aW9uKHN5bSk7XHJcbiAgICAgICAgY29uc3Qgc3RvY2sgPSB7XHJcbiAgICAgICAgICAgIHN5bTogc3ltLFxyXG4gICAgICAgICAgICBsb25nU2hhcmVzOiBwb3NbMF0sXHJcbiAgICAgICAgICAgIGxvbmdQcmljZTogcG9zWzFdLFxyXG4gICAgICAgICAgICBzaG9ydFNoYXJlczogcG9zWzJdLFxyXG4gICAgICAgICAgICBzaG9ydFByaWNlOiBwb3NbM10sXHJcbiAgICAgICAgICAgIGZvcmVjYXN0OiBucy5zdG9jay5nZXRGb3JlY2FzdChzeW0pLFxyXG4gICAgICAgICAgICB2b2xhdGlsaXR5OiBucy5zdG9jay5nZXRWb2xhdGlsaXR5KHN5bSksXHJcbiAgICAgICAgICAgIGFza1ByaWNlOiBucy5zdG9jay5nZXRBc2tQcmljZShzeW0pLFxyXG4gICAgICAgICAgICBiaWRQcmljZTogbnMuc3RvY2suZ2V0QmlkUHJpY2Uoc3ltKSxcclxuICAgICAgICAgICAgbWF4U2hhcmVzOiBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3ltKSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9uZ1Byb2ZpdCA9IHN0b2NrLmxvbmdTaGFyZXMgKiAoc3RvY2suYmlkUHJpY2UgLSBzdG9jay5sb25nUHJpY2UpIC0gMiAqIGNvbW1pc3Npb247XHJcbiAgICAgICAgdmFyIHNob3J0UHJvZml0ID0gc3RvY2suc2hvcnRTaGFyZXMgKiAoc3RvY2suc2hvcnRQcmljZSAtIHN0b2NrLmFza1ByaWNlKSAtIDIgKiBjb21taXNzaW9uO1xyXG4gICAgICAgIHN0b2NrLnByb2ZpdCA9IGxvbmdQcm9maXQgKyBzaG9ydFByb2ZpdDtcclxuICAgICAgICBzdG9jay5jb3N0ID0gKHN0b2NrLmxvbmdTaGFyZXMgKiBzdG9jay5sb25nUHJpY2UpICsgKHN0b2NrLnNob3J0U2hhcmVzICogc3RvY2suc2hvcnRQcmljZSlcclxuXHJcbiAgICAgICAgLy8gcHJvZml0IHBvdGVudGlhbCBhcyBjaGFuY2UgZm9yIHByb2ZpdCAqIGVmZmVjdCBvZiBwcm9maXRcclxuICAgICAgICB2YXIgcHJvZml0Q2hhbmNlID0gMiAqIE1hdGguYWJzKHN0b2NrLmZvcmVjYXN0IC0gMC41KTtcclxuICAgICAgICB2YXIgcHJvZml0UG90ZW50aWFsID0gcHJvZml0Q2hhbmNlICogKHN0b2NrLnZvbGF0aWxpdHkpO1xyXG4gICAgICAgIHN0b2NrLnByb2ZpdFBvdGVudGlhbCA9IHByb2ZpdFBvdGVudGlhbDtcclxuXHJcbiAgICAgICAgc3RvY2suc3VtbWFyeSA9IGAke3N0b2NrLnN5bX06ICR7c3RvY2suZm9yZWNhc3QudG9GaXhlZCgzKX0gwrEgJHtzdG9jay52b2xhdGlsaXR5LnRvRml4ZWQoMyl9YDtcclxuICAgICAgICBzdG9ja3MucHVzaChzdG9jayk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RvY2tzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTeW1TZXJ2ZXIoc3ltKSB7XHJcbiAgICBjb25zdCBzeW1TZXJ2ZXIgPSB7XHJcbiAgICAgICAgXCJXRFNcIjogXCJcIixcclxuICAgICAgICBcIkVDUFwiOiBcImVjb3JwXCIsXHJcbiAgICAgICAgXCJNR0NQXCI6IFwibWVnYWNvcnBcIixcclxuICAgICAgICBcIkJMRFwiOiBcImJsYWRlXCIsXHJcbiAgICAgICAgXCJDTFJLXCI6IFwiY2xhcmtpbmNcIixcclxuICAgICAgICBcIk9NVEtcIjogXCJvbW5pdGVrXCIsXHJcbiAgICAgICAgXCJGU0lHXCI6IFwiNHNpZ21hXCIsXHJcbiAgICAgICAgXCJLR0lcIjogXCJrdWFpLWdvbmdcIixcclxuICAgICAgICBcIkRDT01NXCI6IFwiZGVmY29tbVwiLFxyXG4gICAgICAgIFwiVklUQVwiOiBcInZpdGFsaWZlXCIsXHJcbiAgICAgICAgXCJJQ1JTXCI6IFwiaWNhcnVzXCIsXHJcbiAgICAgICAgXCJVTlZcIjogXCJ1bml2LWVuZXJneVwiLFxyXG4gICAgICAgIFwiQUVST1wiOiBcImFlcm9jb3JwXCIsXHJcbiAgICAgICAgXCJTTFJTXCI6IFwic29sYXJpc1wiLFxyXG4gICAgICAgIFwiR1BIXCI6IFwiZ2xvYmFsLXBoYXJtXCIsXHJcbiAgICAgICAgXCJOVk1EXCI6IFwibm92YS1tZWRcIixcclxuICAgICAgICBcIkxYT1wiOiBcImxleG8tY29ycFwiLFxyXG4gICAgICAgIFwiUkhPQ1wiOiBcInJoby1jb25zdHJ1Y3Rpb25cIixcclxuICAgICAgICBcIkFQSEVcIjogXCJhbHBoYS1lbnRcIixcclxuICAgICAgICBcIlNZU0NcIjogXCJzeXNjb3JlXCIsXHJcbiAgICAgICAgXCJDVEtcIjogXCJjb21wdGVrXCIsXHJcbiAgICAgICAgXCJOVExLXCI6IFwibmV0bGlua1wiLFxyXG4gICAgICAgIFwiT01HQVwiOiBcIm9tZWdhLW5ldFwiLFxyXG4gICAgICAgIFwiSkdOXCI6IFwiam9lc2d1bnNcIixcclxuICAgICAgICBcIlNHQ1wiOiBcInNpZ21hLWNvc21ldGljc1wiLFxyXG4gICAgICAgIFwiQ1RZU1wiOiBcImNhdGFseXN0XCIsXHJcbiAgICAgICAgXCJNRFlOXCI6IFwibWljcm9keW5lXCIsXHJcbiAgICAgICAgXCJUSVROXCI6IFwidGl0YW4tbGFic1wiLFxyXG4gICAgICAgIFwiRkxDTVwiOiBcImZ1bGNydW10ZWNoXCIsXHJcbiAgICAgICAgXCJTVE1cIjogXCJzdG9ybXRlY2hcIixcclxuICAgICAgICBcIkhMU1wiOiBcImhlbGlvc1wiLFxyXG4gICAgICAgIFwiT01OXCI6IFwib21uaWFcIixcclxuICAgICAgICBcIkZOU1wiOiBcImZvb2Ruc3R1ZmZcIlxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzeW1TZXJ2ZXJbc3ltXTtcclxuXHJcbn0iXX0=\",\"filename\":\"trade.js\",\"server\":\"home\"}}],[\"util/hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var totalSpent = 0; // Tracks how much money we have spent on nodes\\n    ns.tprint(\\\"Hacknet Node Manager Started\\\");\\n    // Bring all available hacknet nodes up to base level\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var node = ns.hacknet.nodes[i];\\n        var cost = node.getLevelUpgradeCost(1);\\n        totalSpent += cost; // Add the upgrade cost to the money spent\\n        node.upgradeLevel(1);\\n    }\\n    // Mandatory wait period to allow earnings to accumulate\\n    await ns.sleep(60000);\\n    while (true) { // Loop keeps the script running forever\\n        var totalEarned = 0;\\n        // Sum earnings from all nodes\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            var node = ns.hacknet.nodes[i];\\n            totalEarned += node.totalMoneyEarned; // Add the earnings from each node to total\\n        }\\n        // Check if we have enough earnings to buy a new node\\n        if (totalEarned >= totalSpent * 3) {\\n            var newNode = ns.hacknet.purchaseNode();\\n            if (newNode !== -1) {\\n                var cost = ns.hacknet.nodes[newNode].getLevelUpgradeCost(1);\\n                totalSpent += cost; // Add cost to the money spent\\n                ns.hacknet.node[newNode].upgradeLevel(1);\\n            }\\n        }\\n        await ns.sleep(30000); // Check for upgrades every 30 seconds\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja25ldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hhY2tuZXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUUsK0NBQStDO0lBQ3BFLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUUxQyxxREFBcUQ7SUFDckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBRSwwQ0FBMEM7UUFDL0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QjtJQUVELHdEQUF3RDtJQUN4RCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdEIsT0FBTyxJQUFJLEVBQUUsRUFBRSx3Q0FBd0M7UUFDbkQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLDhCQUE4QjtRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixXQUFXLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsMkNBQTJDO1NBQ3BGO1FBRUQscURBQXFEO1FBQ3JELElBQUksV0FBVyxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN4QyxJQUFHLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDZixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUQsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFFLDhCQUE4QjtnQkFDbkQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0o7UUFFRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7S0FDaEU7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgdmFyIHRvdGFsU3BlbnQgPSAwOyAgLy8gVHJhY2tzIGhvdyBtdWNoIG1vbmV5IHdlIGhhdmUgc3BlbnQgb24gbm9kZXNcclxuICAgIG5zLnRwcmludChcIkhhY2tuZXQgTm9kZSBNYW5hZ2VyIFN0YXJ0ZWRcIik7XHJcblxyXG4gICAgLy8gQnJpbmcgYWxsIGF2YWlsYWJsZSBoYWNrbmV0IG5vZGVzIHVwIHRvIGJhc2UgbGV2ZWxcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnMuaGFja25ldC5udW1Ob2RlcygpOyBpKyspIHtcclxuICAgICAgICB2YXIgbm9kZSA9IG5zLmhhY2tuZXQubm9kZXNbaV07XHJcbiAgICAgICAgdmFyIGNvc3QgPSBub2RlLmdldExldmVsVXBncmFkZUNvc3QoMSk7XHJcbiAgICAgICAgdG90YWxTcGVudCArPSBjb3N0OyAgLy8gQWRkIHRoZSB1cGdyYWRlIGNvc3QgdG8gdGhlIG1vbmV5IHNwZW50XHJcbiAgICAgICAgbm9kZS51cGdyYWRlTGV2ZWwoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFuZGF0b3J5IHdhaXQgcGVyaW9kIHRvIGFsbG93IGVhcm5pbmdzIHRvIGFjY3VtdWxhdGVcclxuICAgIGF3YWl0IG5zLnNsZWVwKDYwMDAwKTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkgeyAvLyBMb29wIGtlZXBzIHRoZSBzY3JpcHQgcnVubmluZyBmb3JldmVyXHJcbiAgICAgICAgdmFyIHRvdGFsRWFybmVkID0gMDtcclxuXHJcbiAgICAgICAgLy8gU3VtIGVhcm5pbmdzIGZyb20gYWxsIG5vZGVzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBucy5oYWNrbmV0Lm51bU5vZGVzKCk7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5zLmhhY2tuZXQubm9kZXNbaV07XHJcbiAgICAgICAgICAgIHRvdGFsRWFybmVkICs9IG5vZGUudG90YWxNb25leUVhcm5lZDsgLy8gQWRkIHRoZSBlYXJuaW5ncyBmcm9tIGVhY2ggbm9kZSB0byB0b3RhbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggZWFybmluZ3MgdG8gYnV5IGEgbmV3IG5vZGVcclxuICAgICAgICBpZiAodG90YWxFYXJuZWQgPj0gdG90YWxTcGVudCAqIDMpIHtcclxuICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBucy5oYWNrbmV0LnB1cmNoYXNlTm9kZSgpO1xyXG4gICAgICAgICAgICBpZihuZXdOb2RlICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvc3QgPSBucy5oYWNrbmV0Lm5vZGVzW25ld05vZGVdLmdldExldmVsVXBncmFkZUNvc3QoMSk7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFNwZW50ICs9IGNvc3Q7ICAvLyBBZGQgY29zdCB0byB0aGUgbW9uZXkgc3BlbnRcclxuICAgICAgICAgICAgICAgIG5zLmhhY2tuZXQubm9kZVtuZXdOb2RlXS51cGdyYWRlTGV2ZWwoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDMwMDAwKTsgLy8gQ2hlY2sgZm9yIHVwZ3JhZGVzIGV2ZXJ5IDMwIHNlY29uZHNcclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"util/hacknet.js\",\"server\":\"home\"}}],[\"util/copyfilesto.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint(\\\"Error: No target server specified. Usage: run copyToServer.js [targetServer]\\\");\\n        return;\\n    }\\n    if (!ns.hasRootAccess(targetServer)) {\\n        ns.tprint(`Error: You do not have root access to ${targetServer}.`);\\n        return;\\n    }\\n    const files = ns.ls('home').filter(file => file.endsWith('.js') || file.endsWith('.txt') || file.endsWith('.lit'));\\n    for (const file of files) {\\n        await ns.scp(file, targetServer);\\n    }\\n    ns.tprint(`Supported files copied to ${targetServer}.`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weWZpbGVzdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9jb3B5ZmlsZXN0by5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLDhFQUE4RSxDQUFDLENBQUM7UUFDMUYsT0FBTztLQUNWO0lBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDakMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUNwRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkgsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNwQztJQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMsNkJBQTZCLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDNUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yOiBObyB0YXJnZXQgc2VydmVyIHNwZWNpZmllZC4gVXNhZ2U6IHJ1biBjb3B5VG9TZXJ2ZXIuanMgW3RhcmdldFNlcnZlcl1cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghbnMuaGFzUm9vdEFjY2Vzcyh0YXJnZXRTZXJ2ZXIpKSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFcnJvcjogWW91IGRvIG5vdCBoYXZlIHJvb3QgYWNjZXNzIHRvICR7dGFyZ2V0U2VydmVyfS5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmlsZXMgPSBucy5scygnaG9tZScpLmZpbHRlcihmaWxlID0+IGZpbGUuZW5kc1dpdGgoJy5qcycpIHx8IGZpbGUuZW5kc1dpdGgoJy50eHQnKSB8fCBmaWxlLmVuZHNXaXRoKCcubGl0JykpO1xyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgYXdhaXQgbnMuc2NwKGZpbGUsIHRhcmdldFNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTdXBwb3J0ZWQgZmlsZXMgY29waWVkIHRvICR7dGFyZ2V0U2VydmVyfS5gKTtcclxufVxyXG4iXX0=\",\"filename\":\"util/copyfilesto.js\",\"server\":\"home\"}}],[\"server/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const ServerName = ns.args[0];\\n    const maxServers = ns.getPurchasedServerLimit();\\n    let purchasedServers = ns.getPurchasedServers();\\n    let serversToPurchase = maxServers - purchasedServers.length;\\n    if (serversToPurchase <= 0) {\\n        ns.tprint(\\\"You already own the maximum number of servers.\\\");\\n        return;\\n    }\\n    //\\n    const ramOptions = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768];\\n    let affordableRamOption = ramOptions[0];\\n    for (let i = ramOptions.length - 1; i >= 0; i--) {\\n        const ramCost = ns.getPurchasedServerCost(ramOptions[i]);\\n        if (ns.getServerMoneyAvailable('home') >= ramCost) {\\n            affordableRamOption = ramOptions[i];\\n            break;\\n        }\\n    }\\n    while (serversToPurchase > 0 && ns.getServerMoneyAvailable('home') >= ns.getPurchasedServerCost(affordableRamOption)) {\\n        const newServer = ns.purchaseServer(`${ServerName}-${purchasedServers.length}`, affordableRamOption);\\n        if (newServer) {\\n            purchasedServers.push(newServer);\\n            serversToPurchase--;\\n            ns.tprint(`Purchased new server: ${newServer} with ${affordableRamOption}GB RAM`);\\n            await copyFilesToServer(ns, newServer); // Copy files to the new server\\n        }\\n        else {\\n            ns.tprint(\\\"Failed to purchase a new server. Insufficient funds or at server limit.\\\");\\n            break;\\n        }\\n    }\\n}\\nasync function copyFilesToServer(ns, targetServer) {\\n    if (!ns.hasRootAccess(targetServer)) {\\n        ns.tprint(`Error: You do not have root access to ${targetServer}.`);\\n        return;\\n    }\\n    const files = ns.ls('home').filter(file => file.endsWith('.js') || file.endsWith('.txt') || file.endsWith('.lit'));\\n    for (const file of files) {\\n        await ns.scp(file, 'home', targetServer);\\n    }\\n    ns.tprint(`Supported files copied to ${targetServer}.`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci9kZXBsb3kuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2hELElBQUksaUJBQWlCLEdBQUcsVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUU3RCxJQUFJLGlCQUFpQixJQUFJLENBQUMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7UUFDNUQsT0FBTztLQUNWO0lBQ0QsRUFBRTtJQUNGLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEYsSUFBSSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDL0MsbUJBQW1CLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU07U0FDVDtLQUNKO0lBRUQsT0FBTyxpQkFBaUIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1FBQ2xILE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxVQUFVLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUNyRyxJQUFJLFNBQVMsRUFBRTtZQUNYLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxNQUFNLENBQUMseUJBQXlCLFNBQVMsU0FBUyxtQkFBbUIsUUFBUSxDQUFDLENBQUM7WUFDbEYsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7U0FDMUU7YUFBTTtZQUNILEVBQUUsQ0FBQyxNQUFNLENBQUMseUVBQXlFLENBQUMsQ0FBQztZQUNyRixNQUFNO1NBQ1Q7S0FDSjtBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFBRSxFQUFFLFlBQVk7SUFDN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDakMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUNwRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkgsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDNUM7SUFFRCxFQUFFLENBQUMsTUFBTSxDQUFDLDZCQUE2QixZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCBTZXJ2ZXJOYW1lID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IG1heFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpO1xyXG4gICAgbGV0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7XHJcbiAgICBsZXQgc2VydmVyc1RvUHVyY2hhc2UgPSBtYXhTZXJ2ZXJzIC0gcHVyY2hhc2VkU2VydmVycy5sZW5ndGg7XHJcblxyXG4gICAgaWYgKHNlcnZlcnNUb1B1cmNoYXNlIDw9IDApIHtcclxuICAgICAgICBucy50cHJpbnQoXCJZb3UgYWxyZWFkeSBvd24gdGhlIG1heGltdW0gbnVtYmVyIG9mIHNlcnZlcnMuXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vXHJcbiAgICBjb25zdCByYW1PcHRpb25zID0gWzgsIDE2LCAzMiwgNjQsIDEyOCwgMjU2LCA1MTIsIDEwMjQsIDIwNDgsIDQwOTYsIDgxOTIsIDE2Mzg0LCAzMjc2OF07XHJcbiAgICBsZXQgYWZmb3JkYWJsZVJhbU9wdGlvbiA9IHJhbU9wdGlvbnNbMF07XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHJhbU9wdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCByYW1Db3N0ID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW1PcHRpb25zW2ldKTtcclxuICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA+PSByYW1Db3N0KSB7XHJcbiAgICAgICAgICAgIGFmZm9yZGFibGVSYW1PcHRpb24gPSByYW1PcHRpb25zW2ldO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUgKHNlcnZlcnNUb1B1cmNoYXNlID4gMCAmJiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpID49IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QoYWZmb3JkYWJsZVJhbU9wdGlvbikpIHtcclxuICAgICAgICBjb25zdCBuZXdTZXJ2ZXIgPSBucy5wdXJjaGFzZVNlcnZlcihgJHtTZXJ2ZXJOYW1lfS0ke3B1cmNoYXNlZFNlcnZlcnMubGVuZ3RofWAsIGFmZm9yZGFibGVSYW1PcHRpb24pO1xyXG4gICAgICAgIGlmIChuZXdTZXJ2ZXIpIHtcclxuICAgICAgICAgICAgcHVyY2hhc2VkU2VydmVycy5wdXNoKG5ld1NlcnZlcik7XHJcbiAgICAgICAgICAgIHNlcnZlcnNUb1B1cmNoYXNlLS07XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgUHVyY2hhc2VkIG5ldyBzZXJ2ZXI6ICR7bmV3U2VydmVyfSB3aXRoICR7YWZmb3JkYWJsZVJhbU9wdGlvbn1HQiBSQU1gKTtcclxuICAgICAgICAgICAgYXdhaXQgY29weUZpbGVzVG9TZXJ2ZXIobnMsIG5ld1NlcnZlcik7IC8vIENvcHkgZmlsZXMgdG8gdGhlIG5ldyBzZXJ2ZXJcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoXCJGYWlsZWQgdG8gcHVyY2hhc2UgYSBuZXcgc2VydmVyLiBJbnN1ZmZpY2llbnQgZnVuZHMgb3IgYXQgc2VydmVyIGxpbWl0LlwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb3B5RmlsZXNUb1NlcnZlcihucywgdGFyZ2V0U2VydmVyKSB7XHJcbiAgICBpZiAoIW5zLmhhc1Jvb3RBY2Nlc3ModGFyZ2V0U2VydmVyKSkge1xyXG4gICAgICAgIG5zLnRwcmludChgRXJyb3I6IFlvdSBkbyBub3QgaGF2ZSByb290IGFjY2VzcyB0byAke3RhcmdldFNlcnZlcn0uYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZpbGVzID0gbnMubHMoJ2hvbWUnKS5maWx0ZXIoZmlsZSA9PiBmaWxlLmVuZHNXaXRoKCcuanMnKSB8fCBmaWxlLmVuZHNXaXRoKCcudHh0JykgfHwgZmlsZS5lbmRzV2l0aCgnLmxpdCcpKTtcclxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgIGF3YWl0IG5zLnNjcChmaWxlLCAnaG9tZScsIHRhcmdldFNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTdXBwb3J0ZWQgZmlsZXMgY29waWVkIHRvICR7dGFyZ2V0U2VydmVyfS5gKTtcclxufSJdfQ==\",\"filename\":\"server/deploy.js\",\"server\":\"home\"}}],[\"util/ispy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var refreshInterval = 10;\\n    const topServers = getTopServers(ns, 5);\\n    ns.print(\\\"Top servers: \\\" + JSON.stringify(topServers));\\n    if (topServers.length === 0) {\\n        ns.toast(\\\"No top servers found\\\", \\\"error\\\");\\n        return;\\n    }\\n    topServers.forEach(server => {\\n        ns.exec('ispy.js', 'home', 1, server);\\n        ns.print(`Launched monitoring on ${server}`);\\n    });\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(\\\"===== Monitoring Top Servers =====\\\");\\n        for (const server of topServers) {\\n            // Fetch and display server stats\\n            const moneyAvailable = ns.getServerMoneyAvailable(server);\\n            const maxMoney = ns.getServerMaxMoney(server);\\n            const securityLevel = ns.getServerSecurityLevel(server);\\n            const minSecurityLevel = ns.getServerMinSecurityLevel(server);\\n            const hackingLevel = ns.getServerRequiredHackingLevel(server);\\n            const growthRate = ns.getServerGrowth(server);\\n            ns.print(`Money Available: $${ns.nFormat(moneyAvailable, '0.000a')}`);\\n            ns.print(`Maximum Money: $${ns.nFormat(maxMoney, '0.000a')}`);\\n            ns.print(`Current Security Level: ${securityLevel.toFixed(2)}`);\\n            ns.print(`Minimum Security Level: ${minSecurityLevel.toFixed(2)}`);\\n            ns.print(`Required Hacking Level: ${hackingLevel}`);\\n            ns.print(`Server Growth Rate: ${growthRate}`);\\n        }\\n        for (let i = refreshInterval; i > 0; i--) {\\n            ns.print(`Refreshing all servers in ${i} seconds...`);\\n            await ns.sleep(1000);\\n        }\\n    }\\n}\\nfunction getAllServers(ns, server = 'home', seenServers = new Set()) {\\n    if (seenServers.has(server))\\n        return [];\\n    seenServers.add(server);\\n    const connectedServers = ns.scan(server);\\n    let servers = [server];\\n    for (const connectedServer of connectedServers) {\\n        servers = servers.concat(getAllServers(ns, connectedServer, seenServers));\\n    }\\n    return servers;\\n}\\nfunction getTopServers(ns, number) {\\n    let allServers = getAllServers(ns);\\n    let hackableServers = allServers.filter(server => ns.hasRootAccess(server) &&\\n        ns.getServerMaxMoney(server) > 0 &&\\n        ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel());\\n    hackableServers.sort((a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\n    return hackableServers.slice(0, number);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNweS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2lzcHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXZELElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxQyxPQUFPO0tBQ1Y7SUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxFQUFFO1FBQ1QsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQy9DLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxFQUFFO1lBRTdCLGlDQUFpQztZQUNqQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLE1BQU0sYUFBYSxHQUFHLEVBQUUs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LyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgdmFyIHJlZnJlc2hJbnRlcnZhbCA9IDEwO1xyXG4gICAgY29uc3QgdG9wU2VydmVycyA9IGdldFRvcFNlcnZlcnMobnMsIDUpO1xyXG4gICAgbnMucHJpbnQoXCJUb3Agc2VydmVyczogXCIgKyBKU09OLnN0cmluZ2lmeSh0b3BTZXJ2ZXJzKSk7XHJcblxyXG4gICAgaWYgKHRvcFNlcnZlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgbnMudG9hc3QoXCJObyB0b3Agc2VydmVycyBmb3VuZFwiLCBcImVycm9yXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0b3BTZXJ2ZXJzLmZvckVhY2goc2VydmVyID0+IHtcclxuICAgICAgICBucy5leGVjKCdpc3B5LmpzJywgJ2hvbWUnLCAxLCBzZXJ2ZXIpO1xyXG4gICAgICAgIG5zLnByaW50KGBMYXVuY2hlZCBtb25pdG9yaW5nIG9uICR7c2VydmVyfWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBucy5jbGVhckxvZygpXHJcbiAgICAgICAgbnMucHJpbnQoXCI9PT09PSBNb25pdG9yaW5nIFRvcCBTZXJ2ZXJzID09PT09XCIpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIHRvcFNlcnZlcnMpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEZldGNoIGFuZCBkaXNwbGF5IHNlcnZlciBzdGF0c1xyXG4gICAgICAgICAgICBjb25zdCBtb25leUF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3QgbWluU2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3QgaGFja2luZ0xldmVsID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3QgZ3Jvd3RoUmF0ZSA9IG5zLmdldFNlcnZlckdyb3d0aChzZXJ2ZXIpO1xyXG5cclxuICAgICAgICAgICAgbnMucHJpbnQoYE1vbmV5IEF2YWlsYWJsZTogJCR7bnMubkZvcm1hdChtb25leUF2YWlsYWJsZSwgJzAuMDAwYScpfWApO1xyXG4gICAgICAgICAgICBucy5wcmludChgTWF4aW11bSBNb25leTogJCR7bnMubkZvcm1hdChtYXhNb25leSwgJzAuMDAwYScpfWApO1xyXG4gICAgICAgICAgICBucy5wcmludChgQ3VycmVudCBTZWN1cml0eSBMZXZlbDogJHtzZWN1cml0eUxldmVsLnRvRml4ZWQoMil9YCk7XHJcbiAgICAgICAgICAgIG5zLnByaW50KGBNaW5pbXVtIFNlY3VyaXR5IExldmVsOiAke21pblNlY3VyaXR5TGV2ZWwudG9GaXhlZCgyKX1gKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoYFJlcXVpcmVkIEhhY2tpbmcgTGV2ZWw6ICR7aGFja2luZ0xldmVsfWApO1xyXG4gICAgICAgICAgICBucy5wcmludChgU2VydmVyIEdyb3d0aCBSYXRlOiAke2dyb3d0aFJhdGV9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gcmVmcmVzaEludGVydmFsOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KGBSZWZyZXNoaW5nIGFsbCBzZXJ2ZXJzIGluICR7aX0gc2Vjb25kcy4uLmApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRBbGxTZXJ2ZXJzKG5zLCBzZXJ2ZXIgPSAnaG9tZScsIHNlZW5TZXJ2ZXJzID0gbmV3IFNldCgpKSB7XHJcbiAgICBpZiAoc2VlblNlcnZlcnMuaGFzKHNlcnZlcikpIHJldHVybiBbXTtcclxuICAgIHNlZW5TZXJ2ZXJzLmFkZChzZXJ2ZXIpO1xyXG5cclxuICAgIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKHNlcnZlcik7XHJcbiAgICBsZXQgc2VydmVycyA9IFtzZXJ2ZXJdO1xyXG5cclxuICAgIGZvciAoY29uc3QgY29ubmVjdGVkU2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICBzZXJ2ZXJzID0gc2VydmVycy5jb25jYXQoZ2V0QWxsU2VydmVycyhucywgY29ubmVjdGVkU2VydmVyLCBzZWVuU2VydmVycykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb3BTZXJ2ZXJzKG5zLCBudW1iZXIpIHtcclxuICAgIGxldCBhbGxTZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcbiAgICBsZXQgaGFja2FibGVTZXJ2ZXJzID0gYWxsU2VydmVycy5maWx0ZXIoc2VydmVyID0+XHJcbiAgICAgICAgbnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXIpICYmXHJcbiAgICAgICAgbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyKSA+IDAgJiZcclxuICAgICAgICBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpIDw9IG5zLmdldEhhY2tpbmdMZXZlbCgpXHJcbiAgICApO1xyXG5cclxuICAgIGhhY2thYmxlU2VydmVycy5zb3J0KChhLCBiKSA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShiKSAtIG5zLmdldFNlcnZlck1heE1vbmV5KGEpKTtcclxuICAgIHJldHVybiBoYWNrYWJsZVNlcnZlcnMuc2xpY2UoMCwgbnVtYmVyKTtcclxufVxyXG4iXX0=\",\"filename\":\"util/ispy.js\",\"server\":\"home\"}}],[\"wormy/batching/super_jack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Work in progress script for calculating and deploying batches\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    // Pass the target server from the arguments\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('WARN No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    const rootServers = getRootServers(ns);\\n    rootServers.push(homeServer);\\n    // Try nuking the targetServer to gain root access\\n    tryNuke(ns, targetServer);\\n    // eslint-disable-next-line no-constant-condition\\n    const formulas = ns.formulas.hacking;\\n    while (true) {\\n        // Default to 5 seconds if no scripts are running\\n        let maxRunTime = 5000;\\n        for (let source of rootServers) {\\n            const scriptsRunning = ns.ps(source);\\n            for (let script of scriptsRunning) {\\n                // Validate timeRunning before using it\\n                if (script.timeRunning && !isNaN(script.timeRunning)) {\\n                    maxRunTime = Math.max(maxRunTime, script.timeRunning);\\n                }\\n            }\\n        }\\n        // Wait for max running time plus a bit buffer if scripts are running\\n        if (maxRunTime > 5000) {\\n            await ns.sleep((maxRunTime * 1000) + 100);\\n        }\\n        else {\\n            // If no scripts are running, just sleep for the default interval\\n            await ns.sleep(100);\\n        }\\n        for (let source of rootServers) {\\n            let action, threads, scriptPath;\\n            const player = ns.getPlayer();\\n            const server = ns.getServer(targetServer);\\n            const maxRam = ns.getServerMaxRam(source);\\n            const usedRam = ns.getServerUsedRam(source);\\n            const availableRam = maxRam - usedRam;\\n            const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n            const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n            const maxMoney = ns.getServerMaxMoney(targetServer);\\n            const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n            const moneyThreshold = 0.90;\\n            if (currentSecurity > securityThreshold) {\\n                action = 'weaken';\\n                threads = calculateWeakenThreads(ns, targetServer);\\n                scriptPath = 'wormy/advanced/scripts/weaken.js';\\n            }\\n            else if ((currentMoney / maxMoney) < moneyThreshold) {\\n                action = 'grow';\\n                threads = calculateGrowThreads(ns, targetServer, 2); // 2x server's money\\n                scriptPath = 'wormy/advanced/scripts/grow.js';\\n            }\\n            else {\\n                action = 'hack';\\n                threads = calculateHackThreads(ns, targetServer, 0.5); // hack 50% of the money\\n                scriptPath = 'wormy/advanced/scripts/hack.js';\\n            }\\n            const scriptRam = ns.getScriptRam(scriptPath, homeServer);\\n            if (scriptRam <= 0) {\\n                ns.print(`WARN: Script RAM usage is zero or invalid for ${scriptPath} on home server ${homeServer}`);\\n                return;\\n            }\\n            if ((threads * scriptRam) > availableRam) {\\n                ns.print(`WARN: Not enough RAM available on ${source} for ${scriptPath} with ${threads} threads.`);\\n                continue;\\n            }\\n            ns.scp(scriptPath, source);\\n            ns.exec(scriptPath, source, threads, targetServer);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\nfunction tryNuke(ns, server) {\\n    if (ns.fileExists('BruteSSH.exe', 'home'))\\n        ns.brutessh(server);\\n    if (ns.fileExists('FTPCrack.exe', 'home'))\\n        ns.ftpcrack(server);\\n    if (ns.fileExists('relaySMTP.exe', 'home'))\\n        ns.relaysmtp(server);\\n    if (ns.fileExists('HTTPWorm.exe', 'home'))\\n        ns.httpworm(server);\\n    if (ns.fileExists('SQLInject.exe', 'home'))\\n        ns.sqlinject(server);\\n    if (ns.getServerNumPortsRequired(server) <= 5) {\\n        ns.nuke(server);\\n    }\\n}\\n// Weaken threads calculation function\\nfunction calculateWeakenThreads(ns, targetServer) {\\n    const oldSecurity = ns.getServerSecurityLevel(targetServer);\\n    const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n    const weakenEffect = ns.weakenAnalyze(1);\\n    return Math.ceil((oldSecurity - securityThreshold) / weakenEffect);\\n}\\n// Grow threads calculation function\\nfunction calculateGrowThreads(ns, targetServer, desiredMultiplier) {\\n    // Use growthAnalyze to calculate required threads for achieving the desired multiplier\\n    return Math.ceil(ns.growthAnalyze(targetServer, desiredMultiplier));\\n}\\nfunction calculateHackThreads(ns, targetServer, availablePercentage) {\\n    const maxMoney = ns.getServerMaxMoney(targetServer);\\n    const hackAmount = maxMoney * availablePercentage; // percentage of maxMoney you want to hack\\n    return Math.ceil(ns.hackAnalyzeThreads(targetServer, hackAmount));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXJfamFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JteS9iYXRjaGluZy9zdXBlcl9qYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdFQUFnRTtBQUNoRSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDMUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsd0JBQXdCO0lBRWhELDRDQUE0QztJQUM1QyxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDNUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUU3QixrREFBa0Q7SUFDbEQsT0FBTyxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUUxQixpREFBaUQ7SUFDakQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7SUFFckMsT0FBTyxJQUFJLEVBQUU7UUFDVCxpREFBaUQ7UUFDakQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLEtBQUssSUFBSSxNQUFNLElBQUksV0FBVyxFQUFFO1lBQzVCLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsS0FBSyxJQUFJLE1BQU0sSUFBSSxjQUFjLEVBQUU7Z0JBQy9CLHVDQUF1QztnQkFDdkMsSUFBSSxN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USxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxNQUFNLFVBQVUsR0FBRyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsQ0FBQywwQ0FBMEM7SUFDN0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gV29yayBpbiBwcm9ncmVzcyBzY3JpcHQgZm9yIGNhbGN1bGF0aW5nIGFuZCBkZXBsb3lpbmcgYmF0Y2hlc1xyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCBob21lU2VydmVyID0gJ2hvbWUnO1xyXG4gICAgY29uc3QgcmFtQnVmZmVyID0gMC41MDsgLy8gUmVzZXJ2ZSAwLjUwR0Igb2YgUkFNXHJcblxyXG4gICAgLy8gUGFzcyB0aGUgdGFyZ2V0IHNlcnZlciBmcm9tIHRoZSBhcmd1bWVudHNcclxuICAgIGxldCB0YXJnZXRTZXJ2ZXIgPSBucy5hcmdzWzBdO1xyXG4gICAgaWYgKCF0YXJnZXRTZXJ2ZXIpIHtcclxuICAgICAgICBucy50cHJpbnQoJ1dBUk4gTm8gdGFyZ2V0IHNlcnZlciBwcm92aWRlZCcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBucy50cHJpbnQoYFNVQ0NFU1M6IFN0YXJ0aW5nIGFkdmFuY2VkIGF0dGFjayBzY3JpcHQgb24gdGFyZ2V0IHNlcnZlcjogJHt0YXJnZXRTZXJ2ZXJ9YCk7XHJcblxyXG4gICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICByb290U2VydmVycy5wdXNoKGhvbWVTZXJ2ZXIpO1xyXG5cclxuICAgIC8vIFRyeSBudWtpbmcgdGhlIHRhcmdldFNlcnZlciB0byBnYWluIHJvb3QgYWNjZXNzXHJcbiAgICB0cnlOdWtlKG5zLCB0YXJnZXRTZXJ2ZXIpO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIGNvbnN0IGZvcm11bGFzID0gbnMuZm9ybXVsYXMuaGFja2luZztcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgdG8gNSBzZWNvbmRzIGlmIG5vIHNjcmlwdHMgYXJlIHJ1bm5pbmdcclxuICAgICAgICBsZXQgbWF4UnVuVGltZSA9IDUwMDA7XHJcbiAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHJvb3RTZXJ2ZXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdHNSdW5uaW5nID0gbnMucHMoc291cmNlKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHNjcmlwdHNSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSB0aW1lUnVubmluZyBiZWZvcmUgdXNpbmcgaXRcclxuICAgICAgICAgICAgICAgIGlmIChzY3JpcHQudGltZVJ1bm5pbmcgJiYgIWlzTmFOKHNjcmlwdC50aW1lUnVubmluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhSdW5UaW1lID0gTWF0aC5tYXgobWF4UnVuVGltZSwgc2NyaXB0LnRpbWVSdW5uaW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXYWl0IGZvciBtYXggcnVubmluZyB0aW1lIHBsdXMgYSBiaXQgYnVmZmVyIGlmIHNjcmlwdHMgYXJlIHJ1bm5pbmdcclxuICAgICAgICBpZiAobWF4UnVuVGltZSA+IDUwMDApIHtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoKG1heFJ1blRpbWUgKiAxMDAwKSArIDEwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgbm8gc2NyaXB0cyBhcmUgcnVubmluZywganVzdCBzbGVlcCBmb3IgdGhlIGRlZmF1bHQgaW50ZXJ2YWxcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHNvdXJjZSBvZiByb290U2VydmVycykge1xyXG4gICAgICAgICAgICBsZXQgYWN0aW9uLCB0aHJlYWRzLCBzY3JpcHRQYXRoO1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBucy5nZXRQbGF5ZXIoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VydmVyID0gbnMuZ2V0U2VydmVyKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpO1xyXG4gICAgICAgICAgICBjb25zdCB1c2VkUmFtID0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpO1xyXG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVSYW0gPSBtYXhSYW0gLSB1c2VkUmFtO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0U2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgY29uc3QgbW9uZXlUaHJlc2hvbGQgPSAwLjkwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZWN1cml0eSA+IHNlY3VyaXR5VGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIHRocmVhZHMgPSBjYWxjdWxhdGVXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0UGF0aCA9ICd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL3dlYWtlbi5qcyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGN1cnJlbnRNb25leSAvIG1heE1vbmV5KSA8IG1vbmV5VGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnZ3Jvdyc7XHJcbiAgICAgICAgICAgICAgICB0aHJlYWRzID0gY2FsY3VsYXRlR3Jvd1RocmVhZHMobnMsIHRhcmdldFNlcnZlciwgMik7IC8vIDJ4IHNlcnZlcidzIG1vbmV5XHJcbiAgICAgICAgICAgICAgICBzY3JpcHRQYXRoID0gJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvZ3Jvdy5qcyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnaGFjayc7XHJcbiAgICAgICAgICAgICAgICB0aHJlYWRzID0gY2FsY3VsYXRlSGFja1RocmVhZHMobnMsIHRhcmdldFNlcnZlciwgMC41KTsgIC8vIGhhY2sgNTAlIG9mIHRoZSBtb25leVxyXG4gICAgICAgICAgICAgICAgc2NyaXB0UGF0aCA9ICd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0UGF0aCwgaG9tZVNlcnZlcik7XHJcbiAgICAgICAgICAgIGlmIChzY3JpcHRSYW0gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoYFdBUk46IFNjcmlwdCBSQU0gdXNhZ2UgaXMgemVybyBvciBpbnZhbGlkIGZvciAke3NjcmlwdFBhdGh9IG9uIGhvbWUgc2VydmVyICR7aG9tZVNlcnZlcn1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCh0aHJlYWRzICogc2NyaXB0UmFtKSA+IGF2YWlsYWJsZVJhbSkge1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoYFdBUk46IE5vdCBlbm91Z2ggUkFNIGF2YWlsYWJsZSBvbiAke3NvdXJjZX0gZm9yICR7c2NyaXB0UGF0aH0gd2l0aCAke3RocmVhZHN9IHRocmVhZHMuYCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbnMuc2NwKHNjcmlwdFBhdGgsIHNvdXJjZSk7XHJcbiAgICAgICAgICAgIG5zLmV4ZWMoc2NyaXB0UGF0aCwgc291cmNlLCB0aHJlYWRzLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gRnVuY3Rpb24gY2hlY2tzIGZvciBhbGwgc2VydmVycyB0aGF0IHlvdSBoYXZlIHJvb3QgYWNjZXNzIHRvXHJcbmZ1bmN0aW9uIGdldFJvb3RTZXJ2ZXJzKG5zLCBzdGFydFNlcnZlciA9ICdob21lJykge1xyXG4gICAgbGV0IHZpc2l0ZWRTZXJ2ZXJzID0gW107XHJcbiAgICBsZXQgc2VydmVyc1RvVmlzaXQgPSBbc3RhcnRTZXJ2ZXJdO1xyXG5cclxuICAgIHdoaWxlIChzZXJ2ZXJzVG9WaXNpdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTZXJ2ZXIgPSBzZXJ2ZXJzVG9WaXNpdC5wb3AoKTtcclxuXHJcbiAgICAgICAgaWYgKCF2aXNpdGVkU2VydmVycy5pbmNsdWRlcyhjdXJyZW50U2VydmVyKSkge1xyXG4gICAgICAgICAgICB2aXNpdGVkU2VydmVycy5wdXNoKGN1cnJlbnRTZXJ2ZXIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGN1cnJlbnRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzZXJ2ZXIgb2YgY29ubmVjdGVkU2VydmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlcnNUb1Zpc2l0LnB1c2goc2VydmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmlzaXRlZFNlcnZlcnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyeU51a2UobnMsIHNlcnZlcikge1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ0JydXRlU1NILmV4ZScsICdob21lJykpIG5zLmJydXRlc3NoKHNlcnZlcik7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnRlRQQ3JhY2suZXhlJywgJ2hvbWUnKSkgbnMuZnRwY3JhY2soc2VydmVyKTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdyZWxheVNNVFAuZXhlJywgJ2hvbWUnKSkgbnMucmVsYXlzbXRwKHNlcnZlcik7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnSFRUUFdvcm0uZXhlJywgJ2hvbWUnKSkgbnMuaHR0cHdvcm0oc2VydmVyKTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdTUUxJbmplY3QuZXhlJywgJ2hvbWUnKSkgbnMuc3FsaW5qZWN0KHNlcnZlcik7XHJcblxyXG4gICAgaWYgKG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQoc2VydmVyKSA8PSA1KSB7XHJcbiAgICAgICAgbnMubnVrZShzZXJ2ZXIpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBXZWFrZW4gdGhyZWFkcyBjYWxjdWxhdGlvbiBmdW5jdGlvblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXRTZXJ2ZXIpIHtcclxuICAgIGNvbnN0IG9sZFNlY3VyaXR5ID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgIGNvbnN0IHdlYWtlbkVmZmVjdCA9IG5zLndlYWtlbkFuYWx5emUoMSk7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKChvbGRTZWN1cml0eSAtIHNlY3VyaXR5VGhyZXNob2xkKSAvIHdlYWtlbkVmZmVjdCk7XHJcbn1cclxuXHJcbi8vIEdyb3cgdGhyZWFkcyBjYWxjdWxhdGlvbiBmdW5jdGlvblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVHcm93VGhyZWFkcyhucywgdGFyZ2V0U2VydmVyLCBkZXNpcmVkTXVsdGlwbGllcikge1xyXG4gICAgLy8gVXNlIGdyb3d0aEFuYWx5emUgdG8gY2FsY3VsYXRlIHJlcXVpcmVkIHRocmVhZHMgZm9yIGFjaGlldmluZyB0aGUgZGVzaXJlZCBtdWx0aXBsaWVyXHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0U2VydmVyLCBkZXNpcmVkTXVsdGlwbGllcikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVIYWNrVGhyZWFkcyhucywgdGFyZ2V0U2VydmVyLCBhdmFpbGFibGVQZXJjZW50YWdlKSB7XHJcbiAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldFNlcnZlcik7XHJcbiAgICBjb25zdCBoYWNrQW1vdW50ID0gbWF4TW9uZXkgKiBhdmFpbGFibGVQZXJjZW50YWdlOyAvLyBwZXJjZW50YWdlIG9mIG1heE1vbmV5IHlvdSB3YW50IHRvIGhhY2tcclxuICAgIHJldHVybiBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVUaHJlYWRzKHRhcmdldFNlcnZlciwgaGFja0Ftb3VudCkpO1xyXG59Il19\",\"filename\":\"wormy/batching/super_jack.js\",\"server\":\"home\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 64; // Reserve 512GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.unshift(homeServer); // Move homeServer to the beginning of the array for prioritized processing\\n        await ns.sleep(20);\\n        for (let source of rootServers) {\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source);\\n            if (availableRam <= ramBuffer && source === homeServer) {\\n                ns.print(`INFO: Not enough RAM available on ${source}. Skipping for now.`);\\n                continue;\\n            }\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 1.75;\\n            while (availableRam - scriptRam >= 0) { // Just checking if we have enough RAM to run the script.\\n                await ns.sleep(20);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                // Before exec check for sufficient RAM\\n                scriptRam = ns.getScriptRam(`wormy/advanced/scripts/${action}.js`, source);\\n                if (availableRam - scriptRam < ramBuffer && source === homeServer) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on home server due to low RAM`);\\n                    break;\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam - supportingScriptRam < 0) {\\n                        break;\\n                    }\\n                    else {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(20);\\n                }\\n            }\\n            await ns.sleep(20);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QjtJQUM3QyxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDLDJFQUEyRTtRQUMzRyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFNUUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ3BELEVBQUUsQ0FBQyxLQUFLLENBQUMscUNBQXFD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bUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSA2NDsgLy8gUmVzZXJ2ZSA1MTJHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMudW5zaGlmdChob21lU2VydmVyKSAvLyBNb3ZlIGhvbWVTZXJ2ZXIgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgZm9yIHByaW9yaXRpemVkIHByb2Nlc3NpbmdcclxuICAgICAgICBhd2FpdCBucy5zbGVlcCgyMCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHNvdXJjZSBvZiByb290U2VydmVycykge1xyXG4gICAgICAgICAgICBsZXQgYXZhaWxhYmxlUmFtID0gbnMuZ2V0U2VydmVyTWF4UmFtKHNvdXJjZSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKHNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtIDw9IHJhbUJ1ZmZlciAmJiBzb3VyY2UgPT09IGhvbWVTZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiBOb3QgZW5vdWdoIFJBTSBhdmFpbGFibGUgb24gJHtzb3VyY2V9LiBTa2lwcGluZyBmb3Igbm93LmApO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgc2NyaXB0UmFtIHdpdGggc29tZSBhcmJpdHJhcnkgbGFyZ2UgdmFsdWUuXHJcbiAgICAgICAgICAgIGxldCBzY3JpcHRSYW0gPSAxLjc1O1xyXG4gICAgICAgICAgICB3aGlsZSAoYXZhaWxhYmxlUmFtIC0gc2NyaXB0UmFtID49IDApIHsgLy8gSnVzdCBjaGVja2luZyBpZiB3ZSBoYXZlIGVub3VnaCBSQU0gdG8gcnVuIHRoZSBzY3JpcHQuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgyMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZWN1cml0eSA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN1cml0eVRocmVzaG9sZCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSArIDEwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9uZXlUaHJlc2hvbGQgPSAwLjc1O1xyXG5cclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEJlZm9yZSBleGVjIGNoZWNrIGZvciBzdWZmaWNpZW50IFJBTVxyXG4gICAgICAgICAgICAgICAgc2NyaXB0UmFtID0gbnMuZ2V0U2NyaXB0UmFtKGB3b3JteS9hZHZhbmNlZC9zY3JpcHRzLyR7YWN0aW9ufS5qc2AsIHNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVJhbSAtIHNjcmlwdFJhbSA8IHJhbUJ1ZmZlciAmJiBzb3VyY2UgPT09IGhvbWVTZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChgRVJST1I6IFVuYWJsZSB0byBzdGFydCBzY3JpcHQgJHthY3Rpb259LmpzIG9uIGhvbWUgc2VydmVyIGR1ZSB0byBsb3cgUkFNYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhgd29ybXkvYWR2YW5jZWQvc2NyaXB0cy8ke2FjdGlvbn0uanNgLCBzb3VyY2UsIDEsIHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAocGlkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoYEVSUk9SOiBVbmFibGUgdG8gc3RhcnQgc2NyaXB0ICR7YWN0aW9ufS5qcyBvbiBzZXJ2ZXIgJHtzb3VyY2V9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZVJhbSAtPSBzY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoYFNVQ0NFU1M6IERlcGxveWluZyAke2FjdGlvbn0uanNgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1hbmFnZSB0aGUgc3VwcG9ydGluZyBzY3JpcHRzXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzY3JpcHQgb2Ygc3VwcG9ydGluZ1NjcmlwdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3VwcG9ydGluZ1NjcmlwdFJhbSA9IG5zLmdldFNjcmlwdFJhbShzY3JpcHQsIGhvbWVTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdmFpbGFibGVSYW0gLSBzdXBwb3J0aW5nU2NyaXB0UmFtIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5zY3Aoc2NyaXB0LCBzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc3VwcG9ydGluZ1NjcmlwdFJhbTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMjApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDIwKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gRnVuY3Rpb24gY2hlY2tzIGZvciBhbGwgc2VydmVycyB0aGF0IHlvdSBoYXZlIHJvb3QgYWNjZXNzIHRvXHJcbmZ1bmN0aW9uIGdldFJvb3RTZXJ2ZXJzKG5zLCBzdGFydFNlcnZlciA9ICdob21lJykge1xyXG4gICAgbGV0IHZpc2l0ZWRTZXJ2ZXJzID0gW107XHJcbiAgICBsZXQgc2VydmVyc1RvVmlzaXQgPSBbc3RhcnRTZXJ2ZXJdO1xyXG5cclxuICAgIHdoaWxlIChzZXJ2ZXJzVG9WaXNpdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTZXJ2ZXIgPSBzZXJ2ZXJzVG9WaXNpdC5wb3AoKTtcclxuXHJcbiAgICAgICAgaWYgKCF2aXNpdGVkU2VydmVycy5pbmNsdWRlcyhjdXJyZW50U2VydmVyKSkge1xyXG4gICAgICAgICAgICB2aXNpdGVkU2VydmVycy5wdXNoKGN1cnJlbnRTZXJ2ZXIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGN1cnJlbnRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzZXJ2ZXIgb2YgY29ubmVjdGVkU2VydmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlcnNUb1Zpc2l0LnB1c2goc2VydmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2aXNpdGVkU2VydmVycztcclxufSJdfQ==\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"home\"}}],[\"wormy/advanced/deploy-jack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const scriptToRun = 'wormy/advanced/jackx.js';\\n    // Outermost loop to keep the script running indefinitely\\n    while (true) {\\n        let servers = ns.scan('home');\\n        await runScriptOnServers(ns, servers, scriptToRun);\\n        // Sleep before starting another round of deploying\\n        ns.print(`Completed a round of server script deployments. Starting again in 1 minute.`);\\n        await ns.sleep(60000);\\n    }\\n}\\nasync function runScriptOnServers(ns, servers, scriptToRun) {\\n    for (let i = 0; i < servers.length; i++) {\\n        if (!ns.isRunning(scriptToRun, 'home', servers[i])) {\\n            if (servers[i] === 'home') {\\n                continue;\\n            }\\n            if (ns.getServerRequiredHackingLevel(servers[i]) <= ns.getHackingLevel() && ns.hasRootAccess(servers[i])) {\\n                if (ns.getServerMaxMoney(servers[i]) === 0) {\\n                    ns.print(`Skipping ${servers[i]} because it has no money`);\\n                    continue;\\n                }\\n                ns.exec(scriptToRun, 'home', 1, servers[i]);\\n                ns.tprint(`SUCCESS: Deployed JACKX on ${servers[i]}`);\\n                await ns.sleep(50);\\n                // If a server is not running the script, then we scan for its connected servers and run the script on them as well\\n                let connectedServers = ns.scan(servers[i]);\\n                await runScriptOnServers(ns, connectedServers, scriptToRun);\\n            }\\n        }\\n        else {\\n            ns.print(`JACKX already running on ${servers[i]}`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWphY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvZGVwbG95LWphY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxXQUFXLEdBQUcseUJBQXlCLENBQUM7SUFFOUMseURBQXlEO0lBQ3pELE9BQU8sSUFBSSxFQUFFO1FBQ1QsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixNQUFNLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbkQsbURBQW1EO1FBQ25ELEVBQUUsQ0FBQyxLQUFLLENBQUMsNkVBQTZFLENBQUMsQ0FBQztRQUN4RixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDekI7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVztJQUN0RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hELElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtnQkFDdkIsU0FBUzthQUNaO1lBQ0QsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RHLElBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBQztvQkFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLE9BQU8sQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQztvQkFDM0QsU0FBUztpQkFDWjtnQkFFRCxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUMzQyxFQUFFLENBQUMsTUFBTSxDQUFDLDhCQUE4QixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBRWxCLG1IQUFtSDtnQkFDbkgsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxNQUFNLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUMvRDtTQUNKO2FBQU07WUFDSCxFQUFFLENBQUMsS0FBSyxDQUFDLDRCQUE0QixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3REO0tBQ0o7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3Qgc2NyaXB0VG9SdW4gPSAnd29ybXkvYWR2YW5jZWQvamFja3guanMnO1xyXG5cclxuICAgIC8vIE91dGVybW9zdCBsb29wIHRvIGtlZXAgdGhlIHNjcmlwdCBydW5uaW5nIGluZGVmaW5pdGVseVxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBsZXQgc2VydmVycyA9IG5zLnNjYW4oJ2hvbWUnKTtcclxuICAgICAgICBhd2FpdCBydW5TY3JpcHRPblNlcnZlcnMobnMsIHNlcnZlcnMsIHNjcmlwdFRvUnVuKTtcclxuXHJcbiAgICAgICAgLy8gU2xlZXAgYmVmb3JlIHN0YXJ0aW5nIGFub3RoZXIgcm91bmQgb2YgZGVwbG95aW5nXHJcbiAgICAgICAgbnMucHJpbnQoYENvbXBsZXRlZCBhIHJvdW5kIG9mIHNlcnZlciBzY3JpcHQgZGVwbG95bWVudHMuIFN0YXJ0aW5nIGFnYWluIGluIDEgbWludXRlLmApO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDYwMDAwKTtcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcnVuU2NyaXB0T25TZXJ2ZXJzKG5zLCBzZXJ2ZXJzLCBzY3JpcHRUb1J1bikge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKCFucy5pc1J1bm5pbmcoc2NyaXB0VG9SdW4sICdob21lJywgc2VydmVyc1tpXSkpIHtcclxuICAgICAgICAgICAgaWYgKHNlcnZlcnNbaV0gPT09ICdob21lJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcnNbaV0pIDw9IG5zLmdldEhhY2tpbmdMZXZlbCgpICYmIG5zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIGlmKG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcnNbaV0pID09PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChgU2tpcHBpbmcgJHtzZXJ2ZXJzW2ldfSBiZWNhdXNlIGl0IGhhcyBubyBtb25leWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5zLmV4ZWMoc2NyaXB0VG9SdW4sICdob21lJywgMSwgc2VydmVyc1tpXSlcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgU1VDQ0VTUzogRGVwbG95ZWQgSkFDS1ggb24gJHtzZXJ2ZXJzW2ldfWApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoNTApXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgYSBzZXJ2ZXIgaXMgbm90IHJ1bm5pbmcgdGhlIHNjcmlwdCwgdGhlbiB3ZSBzY2FuIGZvciBpdHMgY29ubmVjdGVkIHNlcnZlcnMgYW5kIHJ1biB0aGUgc2NyaXB0IG9uIHRoZW0gYXMgd2VsbFxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKHNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcnVuU2NyaXB0T25TZXJ2ZXJzKG5zLCBjb25uZWN0ZWRTZXJ2ZXJzLCBzY3JpcHRUb1J1bik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBucy5wcmludChgSkFDS1ggYWxyZWFkeSBydW5uaW5nIG9uICR7c2VydmVyc1tpXX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"wormy/advanced/deploy-jack.js\",\"server\":\"home\"}}],[\"wormy/advanced/wormx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js',\\n        'wormy/advanced/scripts/weaken.js', 'wormy/advanced/jackx.js'];\\n    // Outermost loop to keep the script running indefinitely\\n    while (true) {\\n        // create a queue, and add the initially scanned servers from 'home'\\n        let serversToProcess = ns.scan('home');\\n        while (serversToProcess.length > 0) {\\n            let currentServer = serversToProcess.shift();\\n            if (currentServer !== 'home') {\\n                await processServer(ns, currentServer, supportingScripts);\\n                ns.print(`WARN: Scanning for new servers from ${currentServer}`);\\n                let foundServers = ns.scan(currentServer);\\n                for (let server of foundServers) {\\n                    if (!serversToProcess.includes(server)) {\\n                        serversToProcess.push(server);\\n                    }\\n                }\\n                await ns.sleep(100);\\n            }\\n        }\\n        // Sleep before starting another round of scanning and processing\\n        ns.tprint(`INFO: Completed a round of server processing. Starting again in 1 second.`);\\n        await ns.sleep(1000);\\n    }\\n}\\nasync function processServer(ns, server, supportingScripts) {\\n    let portsRequired = ns.getServerNumPortsRequired(server);\\n    let portsOpened = 0;\\n    if (ns.hasRootAccess(server)) {\\n        // ns.tprint(`Already have root access on ${server}`);\\n        return;\\n    }\\n    if (ns.fileExists('BruteSSH.exe', 'home')) {\\n        ns.brutessh(server);\\n        portsOpened++;\\n    }\\n    if (ns.fileExists('FTPCrack.exe', 'home')) {\\n        ns.ftpcrack(server);\\n        portsOpened++;\\n    }\\n    if (ns.fileExists('relaySMTP.exe', 'home')) {\\n        ns.relaysmtp(server);\\n        portsOpened++;\\n    }\\n    if (ns.fileExists('HTTPWorm.exe', 'home')) {\\n        ns.httpworm(server);\\n        portsOpened++;\\n    }\\n    if (ns.fileExists('SQLInject.exe', 'home')) {\\n        ns.sqlinject(server);\\n        portsOpened++;\\n    }\\n    if (portsRequired <= portsOpened) {\\n        ns.nuke(server);\\n        for (let script of supportingScripts) {\\n            ns.scp(script, server);\\n            ns.print(`Copied ${script} to ${server}`);\\n            await ns.sleep(500);\\n        }\\n        ns.tprint(`SUCCESS: Root Access gained on ${server}`);\\n    }\\n    await ns.sleep(1500);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ybXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvd29ybXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGdDQUFnQyxFQUFFLGdDQUFnQztRQUN6RixrQ0FBa0MsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBRW5FLHlEQUF5RDtJQUN6RCxPQUFPLElBQUksRUFBRTtRQUNULG9FQUFvRTtRQUNwRSxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdkMsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2hDLElBQUksYUFBYSxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzdDLElBQUksYUFBYSxLQUFLLE1BQU0sRUFBRTtnQkFDMUIsTUFBTSxhQUFhLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUMxRCxFQUFFLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxhQUFhLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMxQyxLQUFLLElBQUksTUFBTSxJQUFJLFlBQVksRUFBRTtvQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTt3QkFDcEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUNqQztpQkFDSjtnQkFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7U0FDSjtRQUVELGlFQUFpRTtRQUNqRSxFQUFFLENBQUMsTUFBTSxDQUFDLDJFQUEyRSxDQUFDLENBQUM7UUFDdkYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxhQUFhLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxpQkFBaUI7SUFDdEQsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDMUIsc0RBQXNEO1FBQ3RELE9BQU87S0FDVjtJQUNELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixXQUFXLEVBQUUsQ0FBQztLQUNqQjtJQUNELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixXQUFXLEVBQUUsQ0FBQztLQUNqQjtJQUNELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDeEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixXQUFXLEVBQUUsQ0FBQztLQUNqQjtJQUNELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixXQUFXLEVBQUUsQ0FBQztLQUNqQjtJQUNELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDeEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixXQUFXLEVBQUUsQ0FBQztLQUNqQjtJQUVELElBQUksYUFBYSxJQUFJLFdBQVcsRUFBRTtRQUM5QixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hCLEtBQUssSUFBSSxNQUFNLElBQUksaUJBQWlCLEVBQUU7WUFDbEMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLE1BQU0sT0FBTyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDekQ7SUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJyxcclxuICAgICAgICAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy93ZWFrZW4uanMnLCAnd29ybXkvYWR2YW5jZWQvamFja3guanMnXTtcclxuXHJcbiAgICAvLyBPdXRlcm1vc3QgbG9vcCB0byBrZWVwIHRoZSBzY3JpcHQgcnVubmluZyBpbmRlZmluaXRlbHlcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgLy8gY3JlYXRlIGEgcXVldWUsIGFuZCBhZGQgdGhlIGluaXRpYWxseSBzY2FubmVkIHNlcnZlcnMgZnJvbSAnaG9tZSdcclxuICAgICAgICBsZXQgc2VydmVyc1RvUHJvY2VzcyA9IG5zLnNjYW4oJ2hvbWUnKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKHNlcnZlcnNUb1Byb2Nlc3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFNlcnZlciA9IHNlcnZlcnNUb1Byb2Nlc3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXJ2ZXIgIT09ICdob21lJykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc1NlcnZlcihucywgY3VycmVudFNlcnZlciwgc3VwcG9ydGluZ1NjcmlwdHMpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoYFdBUk46IFNjYW5uaW5nIGZvciBuZXcgc2VydmVycyBmcm9tICR7Y3VycmVudFNlcnZlcn1gKTtcclxuICAgICAgICAgICAgICAgIGxldCBmb3VuZFNlcnZlcnMgPSBucy5zY2FuKGN1cnJlbnRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGZvdW5kU2VydmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VydmVyc1RvUHJvY2Vzcy5pbmNsdWRlcyhzZXJ2ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlcnNUb1Byb2Nlc3MucHVzaChzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNsZWVwIGJlZm9yZSBzdGFydGluZyBhbm90aGVyIHJvdW5kIG9mIHNjYW5uaW5nIGFuZCBwcm9jZXNzaW5nXHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBDb21wbGV0ZWQgYSByb3VuZCBvZiBzZXJ2ZXIgcHJvY2Vzc2luZy4gU3RhcnRpbmcgYWdhaW4gaW4gMSBzZWNvbmQuYCk7XHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NTZXJ2ZXIobnMsIHNlcnZlciwgc3VwcG9ydGluZ1NjcmlwdHMpIHtcclxuICAgIGxldCBwb3J0c1JlcXVpcmVkID0gbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzZXJ2ZXIpO1xyXG4gICAgbGV0IHBvcnRzT3BlbmVkID0gMDtcclxuICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAvLyBucy50cHJpbnQoYEFscmVhZHkgaGF2ZSByb290IGFjY2VzcyBvbiAke3NlcnZlcn1gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnQnJ1dGVTU0guZXhlJywgJ2hvbWUnKSkge1xyXG4gICAgICAgIG5zLmJydXRlc3NoKHNlcnZlcik7XHJcbiAgICAgICAgcG9ydHNPcGVuZWQrKztcclxuICAgIH1cclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdGVFBDcmFjay5leGUnLCAnaG9tZScpKSB7XHJcbiAgICAgICAgbnMuZnRwY3JhY2soc2VydmVyKTtcclxuICAgICAgICBwb3J0c09wZW5lZCsrO1xyXG4gICAgfVxyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ3JlbGF5U01UUC5leGUnLCAnaG9tZScpKSB7XHJcbiAgICAgICAgbnMucmVsYXlzbXRwKHNlcnZlcik7XHJcbiAgICAgICAgcG9ydHNPcGVuZWQrKztcclxuICAgIH1cclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdIVFRQV29ybS5leGUnLCAnaG9tZScpKSB7XHJcbiAgICAgICAgbnMuaHR0cHdvcm0oc2VydmVyKTtcclxuICAgICAgICBwb3J0c09wZW5lZCsrO1xyXG4gICAgfVxyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ1NRTEluamVjdC5leGUnLCAnaG9tZScpKSB7XHJcbiAgICAgICAgbnMuc3FsaW5qZWN0KHNlcnZlcik7XHJcbiAgICAgICAgcG9ydHNPcGVuZWQrKztcclxuICAgIH1cclxuXHJcbiAgICBpZiAocG9ydHNSZXF1aXJlZCA8PSBwb3J0c09wZW5lZCkge1xyXG4gICAgICAgIG5zLm51a2Uoc2VydmVyKTtcclxuICAgICAgICBmb3IgKGxldCBzY3JpcHQgb2Ygc3VwcG9ydGluZ1NjcmlwdHMpIHtcclxuICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoYENvcGllZCAke3NjcmlwdH0gdG8gJHtzZXJ2ZXJ9YCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5zLnRwcmludChgU1VDQ0VTUzogUm9vdCBBY2Nlc3MgZ2FpbmVkIG9uICR7c2VydmVyfWApO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgbnMuc2xlZXAoMTUwMCk7XHJcbn0iXX0=\",\"filename\":\"wormy/advanced/wormx.js\",\"server\":\"home\"}}],[\"wormy/simple/jack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Description: Attack deployment manager. This script will automatically launch grow/weaken/hack scripts as needed.\\n// Uses grow.js, weaken.js, and hack.js to attack a target server.\\n// Usage: run jack.js [target]\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const hostServer = ns.getHostname();\\n    const moneyThreshold = 0.90; // 75% of max money\\n    const ramBuffer = 2.5; // Reserve 2.5GB of RAM\\n    if (!target) {\\n        ns.tprint(\\\"Error: No target specified. Exiting.\\\");\\n        return;\\n    }\\n    ns.tprint(`Starting advanced attack script on target: ${target} from server: ${hostServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        try {\\n            const currentSecurity = ns.getServerSecurityLevel(target);\\n            const securityThreshold = ns.getServerMinSecurityLevel(target) + 10;\\n            const lowSecurityThreshold = ns.getServerSecurityLevel(target) + 1;\\n            const currentMoney = ns.getServerMoneyAvailable(target);\\n            const maxMoney = ns.getServerMaxMoney(target);\\n            // If security is too high, kill all grow and hack processes and deploy weaken scripts\\n            if (currentSecurity >= securityThreshold) {\\n                // Kill grow and hack processes\\n                killGrowAndHack(ns, hostServer, target);\\n                deployWeaken(ns, hostServer, target);\\n                break;\\n                // If security is low enough, and target has maxMoney available, kill all grow and weaken processes and deploy hack scripts\\n            }\\n            else if (currentSecurity <= securityThreshold && currentMoney >= maxMoney) {\\n                killGrowAndHack(ns, hostServer, target);\\n                deployHack(ns, hostServer, target);\\n                break;\\n                // if security is at minimum, and target has maxMoney available, kill all grow and weaken processes and deploy hack scripts\\n            }\\n            else if (currentSecurity <= lowSecurityThreshold && currentMoney >= maxMoney) {\\n                killGrowAndWeaken(ns, hostServer, target);\\n                deployHack(ns, hostServer, target);\\n                break;\\n            }\\n            let action;\\n            if (currentSecurity > securityThreshold) {\\n                action = 'weaken';\\n            }\\n            else if (currentMoney < maxMoney * moneyThreshold) {\\n                action = 'grow';\\n            }\\n            else {\\n                action = 'hack';\\n            }\\n            const scriptRam = ns.getScriptRam(`wormy/simple/scripts/${action}.js`, hostServer);\\n            if (scriptRam <= 0) {\\n                ns.tprint(`Error: Script RAM usage is zero or invalid for ${action}.js on server ${hostServer}`);\\n                return;\\n            }\\n            let availableRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer) - ramBuffer;\\n            while (availableRam >= scriptRam) {\\n                const pid = ns.exec(`wormy/simple/scripts/${action}.js`, hostServer, 1, target);\\n                if (pid === 0) {\\n                    // ns.tprint(`Failed to start ${action}.js on target: ${target} from server ${hostServer}.`);\\n                    break; // Break the loop if unable to start a new process\\n                }\\n                else {\\n                    // ns.tprint(`Launched ${action}.js on target: ${target} from server ${hostServer}. PID: ${pid}`);\\n                    availableRam -= scriptRam;\\n                }\\n                await ns.sleep(100); // Short sleep to prevent script from hogging CPU\\n            }\\n            // ns.tprint(`Not enough RAM on server ${hostServer} to perform ${action} on target: ${target}. Waiting to retry...`);\\n            await ns.sleep(5000);\\n        }\\n        catch (e) {\\n            ns.tprint(`An error occurred on server ${hostServer}: ${e}`);\\n            await ns.sleep(1000);\\n        }\\n    }\\n    function calculateWeakenThreads(ns, target, currentSecurity, securityThreshold) {\\n        const weakenAmount = ns.weakenAnalyze(1); // The amount of security reduced by a single thread\\n        const securityDifference = currentSecurity - securityThreshold;\\n        return Math.ceil(securityDifference / weakenAmount);\\n    }\\n    function deployWeaken(ns, hostServer, target) {\\n        const currentSecurity = ns.getServerSecurityLevel(target);\\n        const securityThreshold = ns.getServerMinSecurityLevel(target) + 10;\\n        const threadsNeeded = calculateWeakenThreads(ns, target, currentSecurity, securityThreshold);\\n        const scriptRam = ns.getScriptRam('wormy/simple/scripts/weaken.js', hostServer);\\n        let availableRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer) - ramBuffer;\\n        let scriptsToLaunch = Math.min(Math.floor(availableRam / scriptRam), threadsNeeded);\\n        for (let i = 0; i < scriptsToLaunch; i++) {\\n            ns.exec('wormy/simple/scripts/weaken.js', hostServer, 1, target);\\n        }\\n    }\\n    function killGrowAndHack(ns, hostServer, target) {\\n        // Get all running scripts on the host server\\n        const runningScripts = ns.ps(hostServer);\\n        for (const process of runningScripts) {\\n            if ((process.filename === 'wormy/simple/scripts/grow.js' || process.filename === 'wormy/simple/scripts/hack.js') && process.args.includes(target)) {\\n                ns.kill(process.pid); // Kill the process if it's grow or hack targeting the specific server\\n            }\\n        }\\n    }\\n    function calculateHackThreads(ns, target, currentMoney) {\\n        const hackPercent = 0.1; //hacks 10% of the available money\\n        const moneyToSteal = currentMoney * hackPercent;\\n        const hackChance = ns.hackAnalyzeChance(target);\\n        const hackAmount = ns.hackAnalyze(target); // The amount of money stolen by a single thread\\n        return Math.ceil((moneyToSteal / hackAmount) / hackChance);\\n    }\\n    function deployHack(ns, hostServer, target) {\\n        const currentMoney = ns.getServerMoneyAvailable(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const threadsNeeded = calculateHackThreads(ns, target, currentMoney);\\n        const scriptRam = ns.getScriptRam('wormy/simple/scripts/hack.js', hostServer);\\n        let availableRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer) - ramBuffer;\\n        let scriptsToLaunch = Math.min(Math.floor(availableRam / scriptRam), threadsNeeded);\\n        for (let i = 0; i < scriptsToLaunch; i++) {\\n            ns.exec('wormy/simple/scripts/hack.js', hostServer, 1, target);\\n        }\\n    }\\n    function killGrowAndWeaken(ns, hostServer, target) {\\n        // Get all running scripts on the host server\\n        const runningScripts = ns.ps(hostServer);\\n        for (const process of runningScripts) {\\n            if ((process.filename === 'wormy/simple/scripts/grow.js' || process.filename === 'wormy/simple/scripts/weaken.js') && process.args.includes(target)) {\\n                ns.kill(process.pid); // Kill the process if it's grow or weaken targeting the specific server\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JteS9zaW1wbGUvamFjay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvSEFBb0g7QUFDcEgsa0VBQWtFO0FBQ2xFLDhCQUE4QjtBQUU5QixzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsQ0FBQyxtQkFBbUI7SUFDaEQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUMsdUJBQXVCO0lBRTlDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDbEQsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4Q0FBOEMsTUFBTSxpQkFBaUIsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUU3RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJO1lBQ0EsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRSxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkUsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FB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RyxTQUFTLENBQUM7UUFDaEcsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUVwRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNsRTtJQUNMLENBQUM7SUFFRCxTQUFTLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTTtRQUM3Qyw2Q0FBNkM7UUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QyxLQUFLLE1BQU0sT0FBTyxJQUFJLGNBQWMsRUFBRTtZQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyw4QkFBOEIsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLGdDQUFnQyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2pKLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsd0VBQXdFO2FBQ2pHO1NBQ0o7SUFDTCxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIERlc2NyaXB0aW9uOiBBdHRhY2sgZGVwbG95bWVudCBtYW5hZ2VyLiBUaGlzIHNjcmlwdCB3aWxsIGF1dG9tYXRpY2FsbHkgbGF1bmNoIGdyb3cvd2Vha2VuL2hhY2sgc2NyaXB0cyBhcyBuZWVkZWQuXHJcbi8vIFVzZXMgZ3Jvdy5qcywgd2Vha2VuLmpzLCBhbmQgaGFjay5qcyB0byBhdHRhY2sgYSB0YXJnZXQgc2VydmVyLlxyXG4vLyBVc2FnZTogcnVuIGphY2suanMgW3RhcmdldF1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCBob3N0U2VydmVyID0gbnMuZ2V0SG9zdG5hbWUoKTtcclxuICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC45MDsgLy8gNzUlIG9mIG1heCBtb25leVxyXG4gICAgY29uc3QgcmFtQnVmZmVyID0gMi41OyAvLyBSZXNlcnZlIDIuNUdCIG9mIFJBTVxyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRXJyb3I6IE5vIHRhcmdldCBzcGVjaWZpZWQuIEV4aXRpbmcuXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBucy50cHJpbnQoYFN0YXJ0aW5nIGFkdmFuY2VkIGF0dGFjayBzY3JpcHQgb24gdGFyZ2V0OiAke3RhcmdldH0gZnJvbSBzZXJ2ZXI6ICR7aG9zdFNlcnZlcn1gKTtcclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZWN1cml0eSA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCkgKyAxMDtcclxuICAgICAgICAgICAgY29uc3QgbG93U2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgKyAxO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBzZWN1cml0eSBpcyB0b28gaGlnaCwga2lsbCBhbGwgZ3JvdyBhbmQgaGFjayBwcm9jZXNzZXMgYW5kIGRlcGxveSB3ZWFrZW4gc2NyaXB0c1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID49IHNlY3VyaXR5VGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBLaWxsIGdyb3cgYW5kIGhhY2sgcHJvY2Vzc2VzXHJcbiAgICAgICAgICAgICAgICBraWxsR3Jvd0FuZEhhY2sobnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBkZXBsb3lXZWFrZW4obnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBzZWN1cml0eSBpcyBsb3cgZW5vdWdoLCBhbmQgdGFyZ2V0IGhhcyBtYXhNb25leSBhdmFpbGFibGUsIGtpbGwgYWxsIGdyb3cgYW5kIHdlYWtlbiBwcm9jZXNzZXMgYW5kIGRlcGxveSBoYWNrIHNjcmlwdHNcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50U2VjdXJpdHkgPD0gc2VjdXJpdHlUaHJlc2hvbGQgJiYgY3VycmVudE1vbmV5ID49IG1heE1vbmV5KSB7XHJcbiAgICAgICAgICAgICAgICBraWxsR3Jvd0FuZEhhY2sobnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBkZXBsb3lIYWNrKG5zLCBob3N0U2VydmVyLCB0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgc2VjdXJpdHkgaXMgYXQgbWluaW11bSwgYW5kIHRhcmdldCBoYXMgbWF4TW9uZXkgYXZhaWxhYmxlLCBraWxsIGFsbCBncm93IGFuZCB3ZWFrZW4gcHJvY2Vzc2VzIGFuZCBkZXBsb3kgaGFjayBzY3JpcHRzXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFNlY3VyaXR5IDw9IGxvd1NlY3VyaXR5VGhyZXNob2xkICYmIGN1cnJlbnRNb25leSA+PSBtYXhNb25leSkge1xyXG4gICAgICAgICAgICAgICAga2lsbEdyb3dBbmRXZWFrZW4obnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBkZXBsb3lIYWNrKG5zLCBob3N0U2VydmVyLCB0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgYWN0aW9uO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICd3ZWFrZW4nO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRNb25leSA8IG1heE1vbmV5ICogbW9uZXlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdoYWNrJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NyaXB0UmFtID0gbnMuZ2V0U2NyaXB0UmFtKGB3b3JteS9zaW1wbGUvc2NyaXB0cy8ke2FjdGlvbn0uanNgLCBob3N0U2VydmVyKTtcclxuICAgICAgICAgICAgaWYgKHNjcmlwdFJhbSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoYEVycm9yOiBTY3JpcHQgUkFNIHVzYWdlIGlzIHplcm8gb3IgaW52YWxpZCBmb3IgJHthY3Rpb259LmpzIG9uIHNlcnZlciAke2hvc3RTZXJ2ZXJ9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBhdmFpbGFibGVSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdFNlcnZlcikgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RTZXJ2ZXIpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICB3aGlsZSAoYXZhaWxhYmxlUmFtID49IHNjcmlwdFJhbSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhgd29ybXkvc2ltcGxlL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgaG9zdFNlcnZlciwgMSwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwaWQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBucy50cHJpbnQoYEZhaWxlZCB0byBzdGFydCAke2FjdGlvbn0uanMgb24gdGFyZ2V0OiAke3RhcmdldH0gZnJvbSBzZXJ2ZXIgJHtob3N0U2VydmVyfS5gKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gQnJlYWsgdGhlIGxvb3AgaWYgdW5hYmxlIHRvIHN0YXJ0IGEgbmV3IHByb2Nlc3NcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbnMudHByaW50KGBMYXVuY2hlZCAke2FjdGlvbn0uanMgb24gdGFyZ2V0OiAke3RhcmdldH0gZnJvbSBzZXJ2ZXIgJHtob3N0U2VydmVyfS4gUElEOiAke3BpZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTsgLy8gU2hvcnQgc2xlZXAgdG8gcHJldmVudCBzY3JpcHQgZnJvbSBob2dnaW5nIENQVVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBucy50cHJpbnQoYE5vdCBlbm91Z2ggUkFNIG9uIHNlcnZlciAke2hvc3RTZXJ2ZXJ9IHRvIHBlcmZvcm0gJHthY3Rpb259IG9uIHRhcmdldDogJHt0YXJnZXR9LiBXYWl0aW5nIHRvIHJldHJ5Li4uYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwMDApO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBBbiBlcnJvciBvY2N1cnJlZCBvbiBzZXJ2ZXIgJHtob3N0U2VydmVyfTogJHtlfWApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlV2Vha2VuVGhyZWFkcyhucywgdGFyZ2V0LCBjdXJyZW50U2VjdXJpdHksIHNlY3VyaXR5VGhyZXNob2xkKSB7XHJcbiAgICAgICAgY29uc3Qgd2Vha2VuQW1vdW50ID0gbnMud2Vha2VuQW5hbHl6ZSgxKTsgLy8gVGhlIGFtb3VudCBvZiBzZWN1cml0eSByZWR1Y2VkIGJ5IGEgc2luZ2xlIHRocmVhZFxyXG4gICAgICAgIGNvbnN0IHNlY3VyaXR5RGlmZmVyZW5jZSA9IGN1cnJlbnRTZWN1cml0eSAtIHNlY3VyaXR5VGhyZXNob2xkO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoc2VjdXJpdHlEaWZmZXJlbmNlIC8gd2Vha2VuQW1vdW50KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZXBsb3lXZWFrZW4obnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZWN1cml0eSA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBzZWN1cml0eVRocmVzaG9sZCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KSArIDEwO1xyXG4gICAgICAgIGNvbnN0IHRocmVhZHNOZWVkZWQgPSBjYWxjdWxhdGVXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQsIGN1cnJlbnRTZWN1cml0eSwgc2VjdXJpdHlUaHJlc2hvbGQpO1xyXG5cclxuICAgICAgICBjb25zdCBzY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oJ3dvcm15L3NpbXBsZS9zY3JpcHRzL3dlYWtlbi5qcycsIGhvc3RTZXJ2ZXIpO1xyXG4gICAgICAgIGxldCBhdmFpbGFibGVSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdFNlcnZlcikgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RTZXJ2ZXIpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgIGxldCBzY3JpcHRzVG9MYXVuY2ggPSBNYXRoLm1pbihNYXRoLmZsb29yKGF2YWlsYWJsZVJhbSAvIHNjcmlwdFJhbSksIHRocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHNUb0xhdW5jaDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5zLmV4ZWMoJ3dvcm15L3NpbXBsZS9zY3JpcHRzL3dlYWtlbi5qcycsIGhvc3RTZXJ2ZXIsIDEsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGtpbGxHcm93QW5kSGFjayhucywgaG9zdFNlcnZlciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBydW5uaW5nIHNjcmlwdHMgb24gdGhlIGhvc3Qgc2VydmVyXHJcbiAgICAgICAgY29uc3QgcnVubmluZ1NjcmlwdHMgPSBucy5wcyhob3N0U2VydmVyKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3Mgb2YgcnVubmluZ1NjcmlwdHMpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmZpbGVuYW1lID09PSAnd29ybXkvc2ltcGxlL3NjcmlwdHMvZ3Jvdy5qcycgfHwgcHJvY2Vzcy5maWxlbmFtZSA9PT0gJ3dvcm15L3NpbXBsZS9zY3JpcHRzL2hhY2suanMnKSAmJiBwcm9jZXNzLmFyZ3MuaW5jbHVkZXModGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgbnMua2lsbChwcm9jZXNzLnBpZCk7IC8vIEtpbGwgdGhlIHByb2Nlc3MgaWYgaXQncyBncm93IG9yIGhhY2sgdGFyZ2V0aW5nIHRoZSBzcGVjaWZpYyBzZXJ2ZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVIYWNrVGhyZWFkcyhucywgdGFyZ2V0LCBjdXJyZW50TW9uZXkpIHtcclxuICAgICAgICBjb25zdCBoYWNrUGVyY2VudCA9IDAuMTsgLy9oYWNrcyAxMCUgb2YgdGhlIGF2YWlsYWJsZSBtb25leVxyXG4gICAgICAgIGNvbnN0IG1vbmV5VG9TdGVhbCA9IGN1cnJlbnRNb25leSAqIGhhY2tQZXJjZW50O1xyXG4gICAgICAgIGNvbnN0IGhhY2tDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGhhY2tBbW91bnQgPSBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpOyAvLyBUaGUgYW1vdW50IG9mIG1vbmV5IHN0b2xlbiBieSBhIHNpbmdsZSB0aHJlYWRcclxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKChtb25leVRvU3RlYWwgLyBoYWNrQW1vdW50KSAvIGhhY2tDaGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlcGxveUhhY2sobnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHRocmVhZHNOZWVkZWQgPSBjYWxjdWxhdGVIYWNrVGhyZWFkcyhucywgdGFyZ2V0LCBjdXJyZW50TW9uZXkpO1xyXG5cclxuICAgICAgICBjb25zdCBzY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oJ3dvcm15L3NpbXBsZS9zY3JpcHRzL2hhY2suanMnLCBob3N0U2VydmVyKTtcclxuICAgICAgICBsZXQgYXZhaWxhYmxlUmFtID0gbnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RTZXJ2ZXIpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0U2VydmVyKSAtIHJhbUJ1ZmZlcjtcclxuICAgICAgICBsZXQgc2NyaXB0c1RvTGF1bmNoID0gTWF0aC5taW4oTWF0aC5mbG9vcihhdmFpbGFibGVSYW0gLyBzY3JpcHRSYW0pLCB0aHJlYWRzTmVlZGVkKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHRzVG9MYXVuY2g7IGkrKykge1xyXG4gICAgICAgICAgICBucy5leGVjKCd3b3JteS9zaW1wbGUvc2NyaXB0cy9oYWNrLmpzJywgaG9zdFNlcnZlciwgMSwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24ga2lsbEdyb3dBbmRXZWFrZW4obnMsIGhvc3RTZXJ2ZXIsIHRhcmdldCkge1xyXG4gICAgICAgIC8vIEdldCBhbGwgcnVubmluZyBzY3JpcHRzIG9uIHRoZSBob3N0IHNlcnZlclxyXG4gICAgICAgIGNvbnN0IHJ1bm5pbmdTY3JpcHRzID0gbnMucHMoaG9zdFNlcnZlcik7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzIG9mIHJ1bm5pbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5maWxlbmFtZSA9PT0gJ3dvcm15L3NpbXBsZS9zY3JpcHRzL2dyb3cuanMnIHx8IHByb2Nlc3MuZmlsZW5hbWUgPT09ICd3b3JteS9zaW1wbGUvc2NyaXB0cy93ZWFrZW4uanMnKSAmJiBwcm9jZXNzLmFyZ3MuaW5jbHVkZXModGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgbnMua2lsbChwcm9jZXNzLnBpZCk7IC8vIEtpbGwgdGhlIHByb2Nlc3MgaWYgaXQncyBncm93IG9yIHdlYWtlbiB0YXJnZXRpbmcgdGhlIHNwZWNpZmljIHNlcnZlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19\",\"filename\":\"wormy/simple/jack.js\",\"server\":\"home\"}}],[\"wormy/simple/tail.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const targetServer = ns.args[0];\\n    while (true) {\\n        let serverStatus = {\\n            securityLevel: ns.getServerSecurityLevel(targetServer),\\n            availableMoney: ns.getServerMoneyAvailable(targetServer),\\n            totalMoney: ns.getServerMaxMoney(targetServer),\\n            numPortsRequired: ns.getServerNumPortsRequired(targetServer),\\n            ramUsage: ns.getServerUsedRam(targetServer),\\n            hasRootAccess: ns.hasRootAccess(targetServer)\\n        };\\n        ns.clearLog(); // clear the log before printing the status\\n        ns.tprint(JSON.stringify(serverStatus, null, 4)); // print the status with indentation\\n        await ns.sleep(10000); // sleep for 10 seconds before checking again\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JteS9zaW1wbGUvdGFpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFFdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRS9CLE9BQU0sSUFBSSxFQUFFO1FBQ1IsSUFBSSxZQUFZLEdBQUc7WUFDZixhQUFhLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQztZQUN0RCxjQUFjLEVBQUUsRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQztZQUN4RCxVQUFVLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQztZQUM5QyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsWUFBWSxDQUFDO1lBQzVELFFBQVEsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDO1lBQzNDLGFBQWEsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztTQUNoRCxDQUFDO1FBRUYsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsMkNBQTJDO1FBQzFELEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0M7UUFDdEYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsNkNBQTZDO0tBQ3ZFO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCB0YXJnZXRTZXJ2ZXIgPSBucy5hcmdzWzBdXHJcblxyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgIGxldCBzZXJ2ZXJTdGF0dXMgPSB7XHJcbiAgICAgICAgICAgIHNlY3VyaXR5TGV2ZWw6IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0U2VydmVyKSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlTW9uZXk6IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldFNlcnZlciksXHJcbiAgICAgICAgICAgIHRvdGFsTW9uZXk6IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldFNlcnZlciksXHJcbiAgICAgICAgICAgIG51bVBvcnRzUmVxdWlyZWQ6IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQodGFyZ2V0U2VydmVyKSxcclxuICAgICAgICAgICAgcmFtVXNhZ2U6IG5zLmdldFNlcnZlclVzZWRSYW0odGFyZ2V0U2VydmVyKSxcclxuICAgICAgICAgICAgaGFzUm9vdEFjY2VzczogbnMuaGFzUm9vdEFjY2Vzcyh0YXJnZXRTZXJ2ZXIpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbnMuY2xlYXJMb2coKTsgLy8gY2xlYXIgdGhlIGxvZyBiZWZvcmUgcHJpbnRpbmcgdGhlIHN0YXR1c1xyXG4gICAgICAgIG5zLnRwcmludChKU09OLnN0cmluZ2lmeShzZXJ2ZXJTdGF0dXMsIG51bGwsIDQpKTsgLy8gcHJpbnQgdGhlIHN0YXR1cyB3aXRoIGluZGVudGF0aW9uXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMDApOyAvLyBzbGVlcCBmb3IgMTAgc2Vjb25kcyBiZWZvcmUgY2hlY2tpbmcgYWdhaW5cclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"wormy/simple/tail.js\",\"server\":\"home\"}}],[\"wormy/simple/worm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Description: This script should attempt to hack all servers in the game by using the 'worm' strategy.\\n// The worm strategy is to first nuke a server, then deploy a script that will automatically launch grow/weaken/hack scripts as needed.\\n// Copies jack.js and supporting scripts to all servers that are connected to the target server, then executes jack.js on each server.\\n// Usage: run worm.js [target]\\n// ...\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const mainScript = 'wormy/advanced/jackx.js';\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServers = getAllServers(ns);\\n    // get servers with max money information\\n    let serversWithMoney = targetServers.map(server => ({\\n        server,\\n        money: ns.getServerMaxMoney(server)\\n    })).filter(serverInfo => canHack(ns, serverInfo.server)); // Filter servers that can be hacked\\n    // sort in descending order of max money\\n    serversWithMoney.sort((a, b) => b.money - a.money);\\n    // pick top 5\\n    serversWithMoney = serversWithMoney.slice(0, 5);\\n    const targets = serversWithMoney.map(serverInfo => serverInfo.server); // list of top 5 servers\\n    for (const serverInfo of serversWithMoney) {\\n        let server = serverInfo.server;\\n        if (!ns.hasRootAccess(server) && canNuke(ns, server)) {\\n            tryNuke(ns, server);\\n        }\\n        if (ns.hasRootAccess(server)) {\\n            const success = await deployScripts(ns, server, [mainScript, ...supportingScripts], mainScript, targets); // pass targets to deployScripts\\n            if (!success) {\\n                ns.tprint(`Failed to deploy on server: ${server}`);\\n            }\\n            await ns.sleep(100); // Adding a slight delay to reduce load\\n        }\\n    }\\n}\\nfunction getAllServers(ns, server = 'home', seenServers = new Set()) {\\n    if (seenServers.has(server))\\n        return [];\\n    seenServers.add(server);\\n    const connectedServers = ns.scan(server);\\n    let servers = [server];\\n    for (const connectedServer of connectedServers) {\\n        servers = servers.concat(getAllServers(ns, connectedServer, seenServers));\\n    }\\n    return servers;\\n}\\nfunction canHack(ns, server) {\\n    return ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(server);\\n}\\nfunction canNuke(ns, server) {\\n    let portsRequired = ns.getServerNumPortsRequired(server);\\n    let portsOpened = 0;\\n    if (ns.fileExists('BruteSSH.exe', 'home'))\\n        portsOpened++;\\n    if (ns.fileExists('FTPCrack.exe', 'home'))\\n        portsOpened++;\\n    if (ns.fileExists('relaySMTP.exe', 'home'))\\n        portsOpened++;\\n    if (ns.fileExists('HTTPWorm.exe', 'home'))\\n        portsOpened++;\\n    if (ns.fileExists('SQLInject.exe', 'home'))\\n        portsOpened++;\\n    return portsOpened >= portsRequired;\\n}\\nfunction tryNuke(ns, server) {\\n    if (ns.fileExists('BruteSSH.exe', 'home'))\\n        ns.brutessh(server);\\n    if (ns.fileExists('FTPCrack.exe', 'home'))\\n        ns.ftpcrack(server);\\n    if (ns.fileExists('relaySMTP.exe', 'home'))\\n        ns.relaysmtp(server);\\n    if (ns.fileExists('HTTPWorm.exe', 'home'))\\n        ns.httpworm(server);\\n    if (ns.fileExists('SQLInject.exe', 'home'))\\n        ns.sqlinject(server);\\n    if (canNuke(ns, server)) {\\n        ns.nuke(server);\\n    }\\n}\\nasync function deployScripts(ns, server, scripts, mainScript, targets) {\\n    for (const script of scripts) {\\n        const success = await ns.scp(script, server);\\n        if (!success) {\\n            return false; // If copying fails, return false\\n        }\\n    }\\n    // Ensure targets is an array and pass it to exec\\n    targets = Array.isArray(targets) ? targets : [targets];\\n    const pid = ns.exec(mainScript, server, 1, ...targets); // Spread the targets array\\n    return pid !== 0; // Return true if exec was successful, false otherwise\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JteS9zaW1wbGUvd29ybS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3R0FBd0c7QUFDeEcsdUlBQXVJO0FBQ3ZJLHNJQUFzSTtBQUN0SSw4QkFBOEI7QUFFOUIsTUFBTTtBQUVOLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBRXpCLE1BQU0sVUFBVSxHQUFHLHlCQUF5QixDQUFDO0lBQzdDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBRSxnQ0FBZ0MsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0lBRW5JLElBQUksYUFBYSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUxQyx5Q0FBeUM7SUFDckMsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNO1FBQ04sS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7S0FDdEMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztJQUVsRyx3Q0FBd0M7SUFDcEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdkQsYUFBYTtJQUNULGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFaEQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0lBRS9GLEtBQUssTUFBTSxVQUFVLElBQUksZ0JBQWdCLEVBQUU7UUFDdkMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ2xELE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO1lBQzFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1YsRUFBRSxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUN0RDtZQUNELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztTQUMvRDtLQUNKO0FBQ0wsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLEdBQUcsTUFBTSxFQUFFLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRTtJQUMvRCxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDdkMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV4QixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV2QixLQUFLLE1BQU0sZUFBZSxJQUFJLGdCQUFnQixFQUFFO1FBQzVDLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7S0FDN0U7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU07SUFDdkIsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUN2QixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsV0FBVyxFQUFFLENBQUM7SUFDekQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxXQUFXLEVBQUUsQ0FBQztJQUN6RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLFdBQVcsRUFBRSxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsV0FBVyxFQUFFLENBQUM7SUFDekQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxXQUFXLEVBQUUsQ0FBQztJQUUxRCxPQUFPLFdBQVcsSUFBSSxhQUFhLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQ3ZCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakUsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkI7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTztJQUVqRSxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQyxDQUFDLGlDQUFpQztTQUNsRDtLQUNKO0lBQ0QsaURBQWlEO0lBQ2pELE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBQ25GLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNEQUFzRDtBQUM1RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVzY3JpcHRpb246IFRoaXMgc2NyaXB0IHNob3VsZCBhdHRlbXB0IHRvIGhhY2sgYWxsIHNlcnZlcnMgaW4gdGhlIGdhbWUgYnkgdXNpbmcgdGhlICd3b3JtJyBzdHJhdGVneS5cclxuLy8gVGhlIHdvcm0gc3RyYXRlZ3kgaXMgdG8gZmlyc3QgbnVrZSBhIHNlcnZlciwgdGhlbiBkZXBsb3kgYSBzY3JpcHQgdGhhdCB3aWxsIGF1dG9tYXRpY2FsbHkgbGF1bmNoIGdyb3cvd2Vha2VuL2hhY2sgc2NyaXB0cyBhcyBuZWVkZWQuXHJcbi8vIENvcGllcyBqYWNrLmpzIGFuZCBzdXBwb3J0aW5nIHNjcmlwdHMgdG8gYWxsIHNlcnZlcnMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIHRoZSB0YXJnZXQgc2VydmVyLCB0aGVuIGV4ZWN1dGVzIGphY2suanMgb24gZWFjaCBzZXJ2ZXIuXHJcbi8vIFVzYWdlOiBydW4gd29ybS5qcyBbdGFyZ2V0XVxyXG5cclxuLy8gLi4uXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcblxyXG4gICAgY29uc3QgbWFpblNjcmlwdCA9ICd3b3JteS9hZHZhbmNlZC9qYWNreC5qcyc7XHJcbiAgICBjb25zdCBzdXBwb3J0aW5nU2NyaXB0cyA9IFsnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9oYWNrLmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvZ3Jvdy5qcycsICd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL3dlYWtlbi5qcyddO1xyXG5cclxuICAgIGxldCB0YXJnZXRTZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcblxyXG4vLyBnZXQgc2VydmVycyB3aXRoIG1heCBtb25leSBpbmZvcm1hdGlvblxyXG4gICAgbGV0IHNlcnZlcnNXaXRoTW9uZXkgPSB0YXJnZXRTZXJ2ZXJzLm1hcChzZXJ2ZXIgPT4gKHtcclxuICAgICAgICBzZXJ2ZXIsXHJcbiAgICAgICAgbW9uZXk6IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcilcclxuICAgIH0pKS5maWx0ZXIoc2VydmVySW5mbyA9PiBjYW5IYWNrKG5zLCBzZXJ2ZXJJbmZvLnNlcnZlcikpOyAvLyBGaWx0ZXIgc2VydmVycyB0aGF0IGNhbiBiZSBoYWNrZWRcclxuXHJcbi8vIHNvcnQgaW4gZGVzY2VuZGluZyBvcmRlciBvZiBtYXggbW9uZXlcclxuICAgIHNlcnZlcnNXaXRoTW9uZXkuc29ydCgoYSwgYikgPT4gYi5tb25leSAtIGEubW9uZXkpO1xyXG5cclxuLy8gcGljayB0b3AgNVxyXG4gICAgc2VydmVyc1dpdGhNb25leSA9IHNlcnZlcnNXaXRoTW9uZXkuc2xpY2UoMCwgNSk7XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0cyA9IHNlcnZlcnNXaXRoTW9uZXkubWFwKHNlcnZlckluZm8gPT4gc2VydmVySW5mby5zZXJ2ZXIpOyAvLyBsaXN0IG9mIHRvcCA1IHNlcnZlcnNcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNlcnZlckluZm8gb2Ygc2VydmVyc1dpdGhNb25leSkge1xyXG4gICAgICAgIGxldCBzZXJ2ZXIgPSBzZXJ2ZXJJbmZvLnNlcnZlcjtcclxuICAgICAgICBpZiAoIW5zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSAmJiBjYW5OdWtlKG5zLCBzZXJ2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRyeU51a2UobnMsIHNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGRlcGxveVNjcmlwdHMobnMsIHNlcnZlciwgW21haW5TY3JpcHQsIC4uLnN1cHBvcnRpbmdTY3JpcHRzXSwgbWFpblNjcmlwdCwgdGFyZ2V0cyk7IC8vIHBhc3MgdGFyZ2V0cyB0byBkZXBsb3lTY3JpcHRzXHJcbiAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBGYWlsZWQgdG8gZGVwbG95IG9uIHNlcnZlcjogJHtzZXJ2ZXJ9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTsgLy8gQWRkaW5nIGEgc2xpZ2h0IGRlbGF5IHRvIHJlZHVjZSBsb2FkXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxTZXJ2ZXJzKG5zLCBzZXJ2ZXIgPSAnaG9tZScsIHNlZW5TZXJ2ZXJzID0gbmV3IFNldCgpKSB7XHJcbiAgICBpZiAoc2VlblNlcnZlcnMuaGFzKHNlcnZlcikpIHJldHVybiBbXTtcclxuICAgIHNlZW5TZXJ2ZXJzLmFkZChzZXJ2ZXIpO1xyXG5cclxuICAgIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKHNlcnZlcik7XHJcbiAgICBsZXQgc2VydmVycyA9IFtzZXJ2ZXJdO1xyXG5cclxuICAgIGZvciAoY29uc3QgY29ubmVjdGVkU2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICBzZXJ2ZXJzID0gc2VydmVycy5jb25jYXQoZ2V0QWxsU2VydmVycyhucywgY29ubmVjdGVkU2VydmVyLCBzZWVuU2VydmVycykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5IYWNrKG5zLCBzZXJ2ZXIpIHtcclxuICAgIHJldHVybiBucy5nZXRIYWNraW5nTGV2ZWwoKSA+PSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5OdWtlKG5zLCBzZXJ2ZXIpIHtcclxuICAgIGxldCBwb3J0c1JlcXVpcmVkID0gbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzZXJ2ZXIpO1xyXG4gICAgbGV0IHBvcnRzT3BlbmVkID0gMDtcclxuXHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnQnJ1dGVTU0guZXhlJywgJ2hvbWUnKSkgcG9ydHNPcGVuZWQrKztcclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdGVFBDcmFjay5leGUnLCAnaG9tZScpKSBwb3J0c09wZW5lZCsrO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ3JlbGF5U01UUC5leGUnLCAnaG9tZScpKSBwb3J0c09wZW5lZCsrO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ0hUVFBXb3JtLmV4ZScsICdob21lJykpIHBvcnRzT3BlbmVkKys7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnU1FMSW5qZWN0LmV4ZScsICdob21lJykpIHBvcnRzT3BlbmVkKys7XHJcblxyXG4gICAgcmV0dXJuIHBvcnRzT3BlbmVkID49IHBvcnRzUmVxdWlyZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyeU51a2UobnMsIHNlcnZlcikge1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoJ0JydXRlU1NILmV4ZScsICdob21lJykpIG5zLmJydXRlc3NoKHNlcnZlcik7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnRlRQQ3JhY2suZXhlJywgJ2hvbWUnKSkgbnMuZnRwY3JhY2soc2VydmVyKTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdyZWxheVNNVFAuZXhlJywgJ2hvbWUnKSkgbnMucmVsYXlzbXRwKHNlcnZlcik7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cygnSFRUUFdvcm0uZXhlJywgJ2hvbWUnKSkgbnMuaHR0cHdvcm0oc2VydmVyKTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKCdTUUxJbmplY3QuZXhlJywgJ2hvbWUnKSkgbnMuc3FsaW5qZWN0KHNlcnZlcik7XHJcblxyXG4gICAgaWYgKGNhbk51a2UobnMsIHNlcnZlcikpIHtcclxuICAgICAgICBucy5udWtlKHNlcnZlcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRlcGxveVNjcmlwdHMobnMsIHNlcnZlciwgc2NyaXB0cywgbWFpblNjcmlwdCwgdGFyZ2V0cykge1xyXG5cclxuICAgIGZvciAoY29uc3Qgc2NyaXB0IG9mIHNjcmlwdHMpIHtcclxuICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgbnMuc2NwKHNjcmlwdCwgc2VydmVyKTtcclxuICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJZiBjb3B5aW5nIGZhaWxzLCByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBFbnN1cmUgdGFyZ2V0cyBpcyBhbiBhcnJheSBhbmQgcGFzcyBpdCB0byBleGVjXHJcbiAgICB0YXJnZXRzID0gQXJyYXkuaXNBcnJheSh0YXJnZXRzKSA/IHRhcmdldHMgOiBbdGFyZ2V0c107XHJcbiAgICBjb25zdCBwaWQgPSBucy5leGVjKG1haW5TY3JpcHQsIHNlcnZlciwgMSwgLi4udGFyZ2V0cyk7IC8vIFNwcmVhZCB0aGUgdGFyZ2V0cyBhcnJheVxyXG4gICAgcmV0dXJuIHBpZCAhPT0gMDsgLy8gUmV0dXJuIHRydWUgaWYgZXhlYyB3YXMgc3VjY2Vzc2Z1bCwgZmFsc2Ugb3RoZXJ3aXNlXHJcbn0iXX0=\",\"filename\":\"wormy/simple/worm.js\",\"server\":\"home\"}}],[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"home\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"home\"}}],[\"wormy/simple/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by jack.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"Error: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9zaW1wbGUvc2NyaXB0cy9ncm93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUVwRCxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDbEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRTlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IGphY2suanMgdG8gYSB0YXJnZXQgc2VydmVyXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG4gICAgY29uc3QgdGhyZWFkcyA9IG5zLmFyZ3NbMV0gfHwgMTtcclxuXHJcbiAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yOiBObyB0YXJnZXQgc3BlY2lmaWVkIGZvciBncm93LlwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/simple/scripts/grow.js\",\"server\":\"home\"}}],[\"wormy/simple/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by jack.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"Error: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9zaW1wbGUvc2NyaXB0cy9oYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUVwRCxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDbEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRTlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IGphY2suanMgdG8gYSB0YXJnZXQgc2VydmVyXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG4gICAgY29uc3QgdGhyZWFkcyA9IG5zLmFyZ3NbMV0gfHwgMTtcclxuXHJcbiAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yOiBObyB0YXJnZXQgc3BlY2lmaWVkIGZvciBoYWNrLlwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/simple/scripts/hack.js\",\"server\":\"home\"}}],[\"wormy/simple/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by jack.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"Error: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L3NpbXBsZS9zY3JpcHRzL3dlYWtlbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFFcEQsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1QsRUFBRSxDQUFDLE1BQU0sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQ3BELE9BQU87S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztBQUVoRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFkZSB0byBiZSBkZXBsb3llZCBieSBqYWNrLmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFcnJvcjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3Igd2Vha2VuLlwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCwge3RocmVhZHM6IHRocmVhZHN9KTtcclxuXHJcbn1cclxuIl19\",\"filename\":\"wormy/simple/scripts/weaken.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprint(\\\"Hello Remote API!\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDakMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMudHByaW50KFwiSGVsbG8gUmVtb3RlIEFQSSFcIik7XHJcbn1cclxuIl19\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"trade/trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { instanceCount, getConfiguration, getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers, formatMoney, formatNumberShort, formatDuration, getStockSymbols } from 'trade/helper.js';\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0.0; // We can keep track of how much we've earned since start.\\nlet lastLog = \\\"\\\"; // We update faster than the stock-market ticks, but we don't log anything unless there's been a change\\nlet allStockSymbols = null; // Stores the set of all symbols collected at start\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anythingorecast\\nlet noisy = false; // If set to true, tprints and announces each time stocks are bought/sold\\nlet dictSourceFiles; // Populated at init, a dictionary of source-files the user has access to, and their level\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet showMarketSummary = false; // If set to true, will always generate and display the pre-4s forecast table in a separate tail window\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of detemining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.10; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\nlet resetInfo = ( /**@returns{ResetInfo}*/() => undefined)(); // Information about the current bitnode\\nlet options;\\nconst argsSchema = [\\n    ['l', false],\\n    ['liquidate', false],\\n    ['mock', false],\\n    ['noisy', false],\\n    ['disable-shorts', false],\\n    ['reserve', null],\\n    ['fracB', 0.4],\\n    ['fracH', 0.2],\\n    ['buy-threshold', 0.0001],\\n    ['sell-threshold', 0],\\n    ['diversification', 0.34],\\n    ['disableHud', false],\\n    ['disable-purchase-tix-api', false],\\n    // The following settings are related only to tweaking pre-4s stock-market logic\\n    ['show-pre-4s-forecast', false],\\n    ['show-market-summary', false],\\n    ['pre-4s-buy-threshold-probability', 0.15],\\n    ['pre-4s-buy-threshold-return', 0.0015],\\n    ['pre-4s-sell-threshold-return', 0.0005],\\n    ['pre-4s-min-tick-history', 21],\\n    ['pre-4s-forecast-window', 51],\\n    ['pre-4s-inversion-detection-window', 10],\\n    ['pre-4s-min-blackout-window', 10],\\n    ['pre-4s-minimum-hold-time', 10],\\n    ['buy-4s-budget', 0.8], // Maximum corpus value we will sacrifice in order to buy 4S. Setting to 0 will never buy 4s.\\n];\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n/** Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can\\n * @param {NS} ns */\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions)\\n        return; // Invalid options, or ran in --help mode.\\n    // If given the \\\"liquidate\\\" command, try to kill any versions of this script trading in stocks\\n    // NOTE: We must do this immediately before we start resetting / overwriting global state below (which is shared between script instances)\\n    const hasTixApiAccess = await getNsDataThroughFile(ns, 'ns.stock.hasTIXAPIAccess()');\\n    if (runOptions.l || runOptions.liquidate) {\\n        if (!hasTixApiAccess)\\n            return log(ns, 'ERROR: Cannot liquidate stocks because we do not have Tix Api Access', true, 'error');\\n        log(ns, 'INFO: Killing any other stockmaster processes...', false, 'info');\\n        await runCommand(ns, `ns.ps().filter(proc => proc.filename == '${ns.getScriptName()}' && !proc.args.includes('-l') && !proc.args.includes('--liquidate'))` +\\n            `.forEach(proc => ns.kill(proc.pid))`, '/Temp/kill-stockmarket-scripts.js');\\n        log(ns, 'INFO: Checking for and liquidating any stocks...', false, 'info');\\n        await liquidate(ns); // Sell all stocks\\n        return;\\n    } // Otherwise, prevent multiple instances of this script from being started, even with different args.\\n    if (await instanceCount(ns) > 1)\\n        return;\\n    ns.disableLog(\\\"ALL\\\");\\n    // Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    mock = options.mock;\\n    noisy = options.noisy;\\n    const fracB = options.fracB;\\n    const fracH = options.fracH;\\n    const diversification = options.diversification;\\n    const disableHud = options.disableHud || options.liquidate || options.mock;\\n    disableShorts = options['disable-shorts'];\\n    const pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n    const pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n    const pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n    minTickHistory = options['pre-4s-min-tick-history'] || 21;\\n    nearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n    longTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n    showMarketSummary = options['show-pre-4s-forecast'] || options['show-market-summary'];\\n    // Other global values must be reset at start lest they be left in memory from a prior run\\n    lastTick = 0, totalProfit = 0, lastLog = \\\"\\\", marketCycleDetected = false, detectedCycleTick = 0, inversionAgreementThreshold = 6;\\n    let myStocks = [], allStocks = [];\\n    let player = await getPlayerInfo(ns);\\n    resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n    if (!hasTixApiAccess) { // You cannot use the stockmaster until you have API access\\n        if (options['disable-purchase-tix-api'])\\n            return log(ns, \\\"ERROR: You do not have stock market API access, and --disable-purchase-tix-api is set.\\\", true);\\n        let success = false;\\n        log(ns, `INFO: You are missing stock market API access. (NOTE: This is granted for free once you have SF8). ` +\\n            `Waiting until we can have the 5b needed to buy it. (Run with --disable-purchase-tix-api to disable this feature.)`, true);\\n        do {\\n            await ns.sleep(sleepInterval);\\n            try {\\n                const reserve = options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0);\\n                success = await tryGetStockMarketAccess(ns, player.money - reserve);\\n            }\\n            catch (err) {\\n                log(ns, `WARNING: stockmaster.js Caught (and suppressed) an unexpected error while waiting to buy stock market access:\\\\n` +\\n                    (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n            }\\n        } while (!success);\\n    }\\n    dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!disableShorts && (!(8 in dictSourceFiles) || dictSourceFiles[8] < 2)) {\\n        log(ns, \\\"INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)\\\");\\n        disableShorts = true;\\n    }\\n    allStockSymbols = await getStockSymbols(ns);\\n    allStocks = await initAllStocks(ns);\\n    let bitnodeMults;\\n    if (5 in dictSourceFiles)\\n        bitnodeMults = await tryGetBitNodeMultipliers(ns);\\n    // Assume bitnode mults are 1 if user doesn't have this API access yet\\n    if (!bitnodeMults)\\n        bitnodeMults = { FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1 };\\n    if (showMarketSummary)\\n        await launchSummaryTail(ns); // Opens a separate script / window to continuously display the Pre4S forecast\\n    let hudElement = null;\\n    if (!disableHud) {\\n        hudElement = initializeHud();\\n        ns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n    }\\n    log(ns, `Welcome! Please note: all stock purchases will initially result in a Net (unrealized) Loss. This is not only due to commission, but because each stock has a 'spread' (difference in buy price and sell price). ` +\\n        `This script is designed to buy stocks that are most likely to surpass that loss and turn a profit, but it will take a few minutes to see the progress.\\\\n\\\\n` +\\n        `If you choose to stop the script, make sure you SELL all your stocks (can go 'run ${ns.getScriptName()} --liquidate') to get your money back.\\\\n\\\\nGood luck!\\\\n~ Insight\\\\n\\\\n`);\\n    let pre4s = true;\\n    while (true) {\\n        try {\\n            const playerStats = await getPlayerInfo(ns);\\n            const reserve = options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0);\\n            // Check whether we have 4s access yes (once we do, we can stop checking)\\n            if (pre4s)\\n                pre4s = !(await checkAccess(ns, 'has4SDataTIXAPI'));\\n            const holdings = await refresh(ns, !pre4s, allStocks, myStocks); // Returns total stock value\\n            const corpus = holdings + playerStats.money; // Corpus means total stocks + cash\\n            const maxHoldings = (1 - fracH) * corpus; // The largest value of stock we could hold without violiating fracH (Fraction to keep as cash)\\n            if (pre4s && !mock && await tryGet4SApi(ns, playerStats, bitnodeMults, corpus * (options['buy-4s-budget'] - fracH) - reserve))\\n                continue; // Start the loop over if we just bought 4S API access\\n            // Be more conservative with our decisions if we don't have 4S data\\n            const thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n            const thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n            if (myStocks.length > 0)\\n                doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n            else if (hudElement)\\n                hudElement.innerText = \\\"$0.000 \\\";\\n            if (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n                log(ns, `Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n                await ns.sleep(sleepInterval);\\n                continue;\\n            }\\n            // Sell forecasted-to-underperform shares (worse than some expected return threshold)\\n            let sales = 0;\\n            for (let stk of myStocks) {\\n                if (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n                    if (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n                        if (!stk.warnedBadPurchase)\\n                            log(ns, `WARNING: Thinking of selling ${stk.sym} with ER ${formatBP(stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n                        stk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n                    }\\n                    else {\\n                        sales += await doSellAll(ns, stk);\\n                        stk.warnedBadPurchase = false;\\n                    }\\n                }\\n            }\\n            if (sales > 0)\\n                continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n            // If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n            // Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n            // BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n            if (playerStats.money / corpus > fracB) {\\n                // Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n                let cash = Math.min(playerStats.money - reserve, maxHoldings - holdings);\\n                // If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n                const estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 10 : inversionAgreementThreshold <= 8 ? 20 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n                // Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n                for (const stk of allStocks.sort(purchaseOrder)) {\\n                    if (cash <= 0)\\n                        break; // Break if we are out of money (i.e. from prior purchases)\\n                    // Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n                    if (stk.blackoutWindow() >= marketCycleLength - estTick)\\n                        continue;\\n                    if (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick))\\n                        continue;\\n                    // Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n                    if (stk.ownedShares() == stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish()))\\n                        continue;\\n                    // If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n                    if (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability))\\n                        continue;\\n                    // Enforce diversification: Don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n                    // Inflate our budget / current position value by a factor of stk.spread_pct to avoid repeated micro-buys of a stock due to the buy/ask spread making holdings appear more diversified after purchase\\n                    let budget = Math.min(cash, maxHoldings * (diversification + stk.spread_pct) - stk.positionValue() * (1.01 + stk.spread_pct));\\n                    let purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n                    let affordableShares = Math.floor((budget - commission) / purchasePrice);\\n                    let numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n                    if (numShares <= 0)\\n                        continue;\\n                    // Don't buy fewer shares than can beat the comission before the next stock market cycle (after covering the spread), lest the position reverse before we break-even.\\n                    let ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n                    if (ticksBeforeCycleEnd < 1)\\n                        continue; // We're cutting it too close to the market cycle, position might reverse before we break-even on commission\\n                    let estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n                    let owned = stk.ownedShares() > 0;\\n                    if (estEndOfCycleValue <= 2 * commission)\\n                        log(ns, (owned ? '' : `We currently have ${formatNumberShort(stk.ownedShares(), 3, 1)} shares in ${stk.sym} valued at ${formatMoney(stk.positionValue())} ` +\\n                            `(${(100 * stk.positionValue() / maxHoldings).toFixed(1)}% of corpus, capped at ${(diversification * 100).toFixed(1)}% by --diversification).\\\\n`) +\\n                            `Despite attractive ER of ${formatBP(stk.absReturn())}, ${owned ? 'more ' : ''}${stk.sym} was not bought. ` +\\n                            `\\\\nBudget: ${formatMoney(budget)} can only buy ${numShares.toLocaleString('en')} ${owned ? 'more ' : ''}shares @ ${formatMoney(purchasePrice)}. ` +\\n                            `\\\\nGiven an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${(stk.spread_pct * 100).toFixed(2)}%), ` +\\n                            `remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(2 * commission, 3)})`);\\n                    else\\n                        cash -= await doBuy(ns, stk, numShares);\\n                }\\n            }\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: stockmaster.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(sleepInterval);\\n    }\\n}\\n/** Ram-dodge getting updated player info. Note that this is the only async routine called in the main loop.\\n * If latency or ram instability is an issue, you may wish to try uncommenting the direct request.\\n * @param {NS} ns\\n * @returns {Promise<Player>} */\\nasync function getPlayerInfo(ns) {\\n    return await getNsDataThroughFile(ns, `ns.getPlayer()`);\\n}\\nfunction getTimeInBitnode() {\\n    return Date.now() - resetInfo.lastNodeReset;\\n}\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nlet purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n/** @param {NS} ns\\n * Generic helper for dodging the hefty RAM requirements of stock functions by spawning a temporary script to collect info for us. */\\nasync function getStockInfoDict(ns, stockFunction) {\\n    allStockSymbols ??= await getStockSymbols(ns);\\n    if (allStockSymbols == null)\\n        throw new Error(`No WSE API Access yet, this call to ns.stock.${stockFunction} is premature.`);\\n    return await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${stockFunction}(sym)]))`, `/Temp/stock-${stockFunction}.txt`, allStockSymbols);\\n}\\n;\\n/** @param {NS} ns **/\\nasync function initAllStocks(ns) {\\n    let dictMaxShares = await getStockInfoDict(ns, 'getMaxShares'); // Only need to get this once, it never changes\\n    return allStockSymbols.map(s => ({\\n        sym: s,\\n        maxShares: dictMaxShares[s],\\n        expectedReturn: function () {\\n            // To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n            let normalizedProb = (this.prob - 0.5);\\n            let conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n            return this.vol * conservativeProb;\\n        },\\n        absReturn: function () {\\n            return Math.abs(this.expectedReturn());\\n        },\\n        bullish: function () {\\n            return this.prob > 0.5;\\n        },\\n        bearish: function () {\\n            return !this.bullish();\\n        },\\n        ownedShares: function () {\\n            return this.sharesLong + this.sharesShort;\\n        },\\n        owned: function () {\\n            return this.ownedShares() > 0;\\n        },\\n        positionValueLong: function () {\\n            return this.sharesLong * this.bid_price;\\n        },\\n        positionValueShort: function () {\\n            return this.sharesShort * (2 * this.boughtPriceShort - this.ask_price);\\n        },\\n        positionValue: function () {\\n            return this.positionValueLong() + this.positionValueShort();\\n        },\\n        // How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n        // This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n        timeToCoverTheSpread: function () {\\n            return Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn());\\n        },\\n        // We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n        blackoutWindow: function () {\\n            return Math.ceil(this.timeToCoverTheSpread());\\n        },\\n        // Pre-4s properties used for forecasting\\n        priceHistory: [],\\n        lastInversion: 0,\\n    }));\\n}\\n/** @param {NS} ns **/\\nasync function refresh(ns, has4s, allStocks, myStocks) {\\n    let holdings = 0;\\n    // Dodge hefty RAM requirements by spawning a sequence of temporary scripts to collect info for us one function at a time\\n    const dictAskPrices = await getStockInfoDict(ns, 'getAskPrice');\\n    const dictBidPrices = await getStockInfoDict(ns, 'getBidPrice');\\n    const dictVolatilities = !has4s ? null : await getStockInfoDict(ns, 'getVolatility');\\n    const dictForecasts = !has4s ? null : await getStockInfoDict(ns, 'getForecast');\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    const ticked = allStocks.some(stk => stk.ask_price != dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n    if (ticked) {\\n        if (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n            if (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n                let changedPrices = allStocks.filter(stk => stk.ask_price != dictAskPrices[stk.sym]);\\n                log(ns, `WARNING: Detected a stock market tick after only ${formatDuration(Date.now() - lastTick)}, but expected ~${formatDuration(expectedTickTime)}. ` +\\n                    (changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk => `${stk.sym} ${formatMoney(stk.ask_price)} -> ${formatMoney(dictAskPrices[stk.sym])}`).join(\\\", \\\")}`), false, 'warning');\\n            }\\n            else\\n                log(ns, `INFO: Detected a rapid stock market tick (${formatDuration(Date.now() - lastTick)}), likely to make up for lag / offline time.`);\\n        }\\n        lastTick = Date.now();\\n    }\\n    myStocks.length = 0;\\n    for (const stk of allStocks) {\\n        const sym = stk.sym;\\n        stk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n        stk.bid_price = dictBidPrices[sym]; // The amount we would recieve if we sold the stock (lower than 'price')\\n        stk.spread = stk.ask_price - stk.bid_price;\\n        stk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n        stk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n        stk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n        stk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n        stk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n        // Update our current portfolio of owned stock\\n        let [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n        stk.position = mock ? null : dictPositions[sym];\\n        stk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n        stk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n        stk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n        stk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n        holdings += stk.positionValue();\\n        if (stk.owned())\\n            myStocks.push(stk);\\n        else\\n            stk.ticksHeld = 0;\\n        if (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n            stk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong == 0) || (priorShort > 0 && stk.sharesShort == 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n    }\\n    if (ticked)\\n        await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n    return holdings;\\n}\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx == 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n    /* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n/** @param {NS} ns **/\\nasync function updateForecast(ns, allStocks, has4s) {\\n    const currentHistory = allStocks[0].priceHistory.length;\\n    const prepSummary = showMarketSummary || mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length == 0)); // Decide whether to display the market summary table.\\n    const inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n    detectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n    for (const stk of allStocks) {\\n        stk.priceHistory.unshift(stk.price);\\n        if (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n            stk.priceHistory.splice(maxTickHistory, 1);\\n        // Volatility is easy - the largest observed % movement in a single tick\\n        if (!has4s)\\n            stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx == 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n        // We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n        // (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions so we can ditch our position.\\n        stk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n        let preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength, nearTermForecastWindowLength + marketCycleLength)); // Used to detect the probability before the potential inversion event.\\n        // Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n        stk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n        stk.lastTickProbability = stk.prob;\\n        if (stk.possibleInversionDetected)\\n            inversionsDetected.push(stk);\\n    }\\n    // Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n    let summary = \\\"\\\";\\n    if (inversionsDetected.length > 0) {\\n        summary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n        if (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n            const newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n            if (detectedCycleTick != newPredictedCycleTick)\\n                log(ns, `Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n                    `Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n            marketCycleDetected = true;\\n            detectedCycleTick = newPredictedCycleTick;\\n            // Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n            // actual cycles and we need to reset our clock even after previously determining the cycle with great certainty.)\\n            inversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n        }\\n    }\\n    // Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n    for (const stk of allStocks) {\\n        // Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n        if (stk.possibleInversionDetected && (has4s && detectedCycleTick == 0 ||\\n            (!has4s && (detectedCycleTick >= nearTermForecastWindowLength / 2) && (detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance))))\\n            stk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n        else\\n            stk.lastInversion++;\\n        // Only take the stock history since after the last inversion to compute the probability of the stock.\\n        const probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n        stk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n        if (!has4s) {\\n            stk.prob = stk.longTermForecast;\\n            stk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n        }\\n        const signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n        if (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n            stk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n                `Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n                `t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n                `tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${(stk.vol * 100).toFixed(2)}% ER:${formatBP(stk.expectedReturn()).padStart(8)} ` +\\n                `Spread:${(stk.spread_pct * 100).toFixed(2)}% ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n            if (stk.owned())\\n                stk.debugLog += ` Pos: ${formatNumberShort(stk.ownedShares(), 3, 1)} (${stk.ownedShares() == stk.maxShares ? 'max' :\\n                    ((100 * stk.ownedShares() / stk.maxShares).toFixed(0).padStart(2) + '%')}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n            if (stk.possibleInversionDetected)\\n                stk.debugLog += ' ⇄⇄⇄';\\n        }\\n    }\\n    // Print a summary of stocks as of this most recent tick (if enabled)\\n    if (prepSummary) {\\n        summary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n            `Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join(\\\"\\\\n\\\");\\n        if (showMarketSummary)\\n            await updateForecastFile(ns, summary);\\n        else\\n            log(ns, summary);\\n    }\\n    // Write out a file of stock probabilities so that other scripts can make use of this (e.g. hack orchestrator can manipulate the stock market)\\n    await ns.write('/Temp/stock-probabilities.txt', JSON.stringify(Object.fromEntries(allStocks.map(stk => [stk.sym, { prob: stk.prob, sharesLong: stk.sharesLong, sharesShort: stk.sharesShort }]))), \\\"w\\\");\\n}\\n// Helpers to display the stock market summary in a separate window.\\nlet summaryFile = '/Temp/stockmarket-summary.txt';\\nlet updateForecastFile = async (ns, summary) => await ns.write(summaryFile, summary, 'w');\\nlet launchSummaryTail = async (ns) => {\\n    let summaryTailScript = summaryFile.replace('.txt', '-tail.js');\\n    if (await getNsDataThroughFile(ns, `ns.scriptRunning('${summaryTailScript}', ns.getHostname())`, '/Temp/stockmarket-summary-is-running.txt'))\\n        return;\\n    //await getNsDataThroughFile(ns, `ns.scriptKill('${summaryTailScript}', ns.getHostname())`, summaryTailScript.replace('.js', '-kill.js')); // Only needed if we're changing the script below\\n    await runCommand(ns, `ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\r\\n        while (true) { \\r\\n            let read = ns.read('${summaryFile}');\\r\\n            if (lastRead != read) ns.print(lastRead = read);\\r\\n            await ns.sleep(1000); \\r\\n        }`, summaryTailScript);\\n};\\n// Ram-dodging helpers that spawn temporary scripts to buy/sell rather than pay 2.5GB ram per variant\\nlet buyStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buyStock'); // ns.stock.buyStock(sym, numShares);\\nlet buyShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buyShort'); // ns.stock.buyShort(sym, numShares);\\nlet sellStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellStock'); // ns.stock.sellStock(sym, numShares);\\nlet sellShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellShort'); // ns.stock.sellShort(sym, numShares);\\nlet transactStock = async (ns, sym, numShares, action) => await getNsDataThroughFile(ns, `ns.stock.${action}(ns.args[0], ns.args[1])`, null, [sym, numShares]);\\n/** @param {NS} ns\\n * Automatically buys either a short or long position depending on the outlook of the stock. */\\nasync function doBuy(ns, stk, sharesToBuy) {\\n    // We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n    // the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n    let price = 0; //price wasn't defined yet.\\n    if (stk.owned())\\n        totalProfit -= commission;\\n    let long = stk.bullish();\\n    let expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n    log(ns, `INFO: ${long ? 'Buying  ' : 'Shorting'} ${formatNumberShort(sharesToBuy, 3, 3).padStart(5)} (` +\\n        `${stk.maxShares == sharesToBuy + stk.ownedShares() ? '@max shares' : `${formatNumberShort(sharesToBuy + stk.ownedShares(), 3, 3).padStart(5)}/${formatNumberShort(stk.maxShares, 3, 3).padStart(5)}`}) ` +\\n        `${stk.sym.padEnd(5)} @ ${formatMoney(expectedPrice).padStart(9)} for ${formatMoney(sharesToBuy * expectedPrice).padStart(9)} (Spread:${(stk.spread_pct * 100).toFixed(2)}% ` +\\n        `ER:${formatBP(stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`, noisy, 'info');\\n    try {\\n        price = mock ? expectedPrice : Number(await transactStock(ns, stk.sym, sharesToBuy, long ? 'buyStock' : 'buyShort'));\\n    }\\n    catch (err) {\\n        if (long)\\n            throw err;\\n        disableShorts = true;\\n        log(ns, `WARN: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`, true, 'warning');\\n        return 0;\\n    }\\n    // The rest of this work is for troubleshooting / mock-mode purposes\\n    if (price == 0) {\\n        const playerMoney = (await getPlayerInfo(ns)).money;\\n        if (playerMoney < sharesToBuy * expectedPrice)\\n            log(ns, `WARN: Failed to ${long ? 'buy' : 'short'} ${stk.sym} because money just recently dropped to ${formatMoney(playerMoney)} and we can no longer afford it.`, noisy);\\n        else\\n            log(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(expectedPrice)} (0 was returned) despite having ${formatMoney(playerMoney)}.`, true, 'error');\\n        return 0;\\n    }\\n    else if (price != expectedPrice) {\\n        log(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bid_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (mock && long)\\n        stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesToBuy) / (stk.sharesLong + sharesToBuy);\\n    if (mock && !long)\\n        stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesToBuy) / (stk.sharesShort + sharesToBuy);\\n    if (long)\\n        stk.sharesLong += sharesToBuy;\\n    else\\n        stk.sharesShort += sharesToBuy; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    return sharesToBuy * price + commission; // Return the amount spent on the transaction so it can be subtracted from our cash on hand\\n}\\n/** @param {NS} ns\\n * Sell our current position in this stock. */\\nasync function doSellAll(ns, stk) {\\n    let long = stk.sharesLong > 0;\\n    if (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n        log(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`, true, 'error');\\n    let expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n    let sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n    let price = mock ? expectedPrice : await transactStock(ns, stk.sym, sharesSold, long ? 'sellStock' : 'sellShort');\\n    const profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n    log(ns, `${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatNumberShort(sharesSold, 3, 3).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n        `@ ${formatMoney(price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(profit).padStart(9)}` : ` LOSS  of ${formatMoney(-profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`, noisy, noisy ? (profit > 0 ? 'success' : 'error') : undefined);\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    }\\n    else if (price != expectedPrice) {\\n        log(ns, `WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (long)\\n        stk.sharesLong -= sharesSold;\\n    else\\n        stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    totalProfit += profit;\\n    return price * sharesSold - commission; // Return the amount of money recieved from the transaction\\n}\\nlet formatBP = fraction => formatNumberShort(fraction * 100 * 100, 3, 2) + \\\" BP\\\";\\n/** Log / tprint / toast helper.\\n * @param {NS} ns */\\nlet log = (ns, message, tprint = false, toastStyle = \\\"\\\") => {\\n    if (message == lastLog)\\n        return;\\n    ns.print(message);\\n    if (tprint)\\n        ns.tprint(message);\\n    if (toastStyle)\\n        ns.toast(message, toastStyle);\\n    return lastLog = message;\\n};\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n    let maxReturnBP = 10000 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n    let minReturnBP = 10000 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n    let est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n        stk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n    let liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n    let status = `Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n        (myStocks.length == 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n        `Profit: ${formatMoney(totalProfit, 3)} Holdings: ${formatMoney(liquidation_value, 3)} (Cost: ${formatMoney(est_holdings_cost, 3)}) ` +\\n        `Net: ${formatMoney(totalProfit + liquidation_value - est_holdings_cost, 3)}`;\\n    log(ns, status);\\n    if (hudElement)\\n        hudElement.innerText = formatMoney(liquidation_value, 6, 3);\\n}\\n/** @param {NS} ns **/\\nasync function liquidate(ns) {\\n    allStockSymbols ??= await getStockSymbols(ns);\\n    if (allStockSymbols == null)\\n        return; // Nothing to liquidate, no API Access\\n    let totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    for (const sym of allStockSymbols) {\\n        var [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n        if (sharesLong + sharesShort == 0)\\n            continue;\\n        totalStocks++, totalSharesLong += sharesLong, totalSharesShort += sharesShort;\\n        if (sharesLong > 0)\\n            totalRevenue += (await sellStockWrapper(ns, sym, sharesLong)) * sharesLong - commission;\\n        if (sharesShort > 0)\\n            totalRevenue += (2 * avgShortCost - (await sellShortWrapper(ns, sym, sharesShort))) * sharesShort - commission;\\n    }\\n    log(ns, `Sold ${totalSharesLong.toLocaleString('en')} long shares and ${totalSharesShort.toLocaleString('en')} short shares ` +\\n        `in ${totalStocks} stocks for ${formatMoney(totalRevenue, 3)}`, true, 'success');\\n}\\n/** @param {NS} ns **/\\n/** @param {Player} playerStats **/\\nasync function tryGet4SApi(ns, playerStats, bitnodeMults, budget) {\\n    if (await checkAccess(ns, 'has4SDataTIXAPI'))\\n        return false; // Only return true if we just bought it\\n    const cost4sData = 1E9 * bitnodeMults.FourSigmaMarketDataCost;\\n    const cost4sApi = 25E9 * bitnodeMults.FourSigmaMarketDataApiCost;\\n    const has4S = await checkAccess(ns, 'has4SData');\\n    const totalCost = (has4S ? 0 : cost4sData) + cost4sApi;\\n    // Liquidate shares if it would allow us to afford 4S API data\\n    if (totalCost > budget) /* Need to reserve some money to invest */\\n        return false;\\n    if (playerStats.money < totalCost)\\n        await liquidate(ns);\\n    if (!has4S) {\\n        if (await tryBuy(ns, 'purchase4SMarketData'))\\n            log(ns, `SUCCESS: Purchased 4SMarketData for ${formatMoney(cost4sData)} ` +\\n                `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase 4SMarketData!', false, 'error');\\n    }\\n    if (await tryBuy(ns, 'purchase4SMarketDataTixApi')) {\\n        log(ns, `SUCCESS: Purchased 4SMarketDataTixApi for ${formatMoney(cost4sApi)} ` +\\n            `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        return true;\\n    }\\n    else {\\n        log(ns, 'ERROR attempting to purchase 4SMarketDataTixApi!', false, 'error');\\n        if (!(5 in dictSourceFiles)) { // If we do not have access to bitnode multipliers, assume the cost is double and try again later\\n            log(ns, 'INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current bitnode.');\\n            bitnodeMults.FourSigmaMarketDataCost *= 2;\\n            bitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n        }\\n    }\\n    return false;\\n}\\n/** @param {NS} ns\\n * @param {\\\"hasWSEAccount\\\"|\\\"hasTIXAPIAccess\\\"|\\\"has4SData\\\"|\\\"has4SDataTIXAPI\\\"} stockFn\\n * Helper to check for one of the stock access functions */\\nasync function checkAccess(ns, stockFn) {\\n    return await getNsDataThroughFile(ns, `ns.stock.${stockFn}()`);\\n}\\n/** @param {NS} ns\\n * @param {\\\"purchaseWseAccount\\\"|\\\"purchaseTixApi\\\"|\\\"purchase4SMarketData\\\"|\\\"purchase4SMarketDataTixApi\\\"} stockFn\\n * Helper to try and buy a stock access. Yes, the code is the same as above, but I wanted to be explicit. */\\nasync function tryBuy(ns, stockFn) {\\n    return await getNsDataThroughFile(ns, `ns.stock.${stockFn}()`);\\n}\\n/** @param {NS} ns\\n * @param {number} budget - The amount we are willing to spend on WSE and API access\\n * Tries to purchase access to the stock market **/\\nasync function tryGetStockMarketAccess(ns, budget) {\\n    if (await checkAccess(ns, 'hasTIXAPIAccess'))\\n        return true; // Already have access\\n    const costWseAccount = 200E6;\\n    const costTixApi = 5E9;\\n    const hasWSE = await checkAccess(ns, 'hasWSEAccount');\\n    const totalCost = (hasWSE ? 0 : costWseAccount) + costTixApi;\\n    if (totalCost > budget)\\n        return false;\\n    if (!hasWSE) {\\n        if (await tryBuy(ns, 'purchaseWseAccount'))\\n            log(ns, `SUCCESS: Purchased a WSE (stockmarket) account for ${formatMoney(costWseAccount)} ` +\\n                `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase WSE account!', false, 'error');\\n    }\\n    if (await tryBuy(ns, 'purchaseTixApi')) {\\n        log(ns, `SUCCESS: Purchased Tix (stockmarket) Api access for ${formatMoney(costTixApi)} ` +\\n            `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        return true;\\n    }\\n    else\\n        log(ns, 'ERROR attempting to purchase Tix Api!', false, 'error');\\n    return false;\\n}\\nfunction initializeHud() {\\n    const d = eval(\\\"document\\\");\\n    let htmlDisplay = d.getElementById(\\\"stock-display-1\\\");\\n    if (htmlDisplay !== null)\\n        return htmlDisplay;\\n    // Get the custom display elements in HUD.\\n    let customElements = d.getElementById(\\\"overview-extra-hook-0\\\").parentElement.parentElement;\\n    // Make a clone of the hook for extra hud elements, and move it up under money\\n    let stockValueTracker = customElements.cloneNode(true);\\n    // Remove any nested elements created by stats.js\\n    stockValueTracker.querySelectorAll(\\\"p > p\\\").forEach(el => el.parentElement.removeChild(el));\\n    // Change ids since duplicate id's are invalid\\n    stockValueTracker.querySelectorAll(\\\"p\\\").forEach((el, i) => el.id = \\\"stock-display-\\\" + i);\\n    // Get out output element\\n    htmlDisplay = stockValueTracker.querySelector(\\\"#stock-display-1\\\");\\n    // Display label and default value\\n    stockValueTracker.querySelectorAll(\\\"p\\\")[0].innerText = \\\"Stock\\\";\\n    htmlDisplay.innerText = \\\"$0.000 \\\";\\n    // Insert our element right after Money\\n    customElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n    return htmlDisplay;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhZGUvdHJhZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsd0JBQXdCLEVBQ2pILFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUNsRSxNQUFNLGlCQUFpQixDQUFBO0FBRXhCLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztBQUMxQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyx5RUFBeUU7QUFDbEcsSUFBSSxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUMsMERBQTBEO0FBQ2pGLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLHVHQUF1RztBQUN6SCxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsQ0FBQyxtREFBbUQ7QUFDL0UsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsaUZBQWlGO0FBQ25HLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLHlFQUF5RTtBQUM1RixJQUFJLGVBQWUsQ0FBQyxDQUFDLDBGQUEwRjtBQUMvRyw2SEFBNkg7QUFDN0gsSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBRSx1R0FBdUc7QUFDdkksSUFBSSxjQUFjLENBQUMsQ0FBQyw0RUFBNEU7QUFDaEcsSUFBSSw0QkFBNEIsQ0FBQyxDQUFDLDhIQUE4SDtBQUNoSyxJQUFJLDRCQUE0QixDQUFDLENBQUMsK0ZBQStGO0FBQ2pJLDZHQUE2RztBQUM3RyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxDQUFDLHVKQUF1SjtBQUNyTCxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsQ0FBQyw2SEFBNkg7QUFDekosTUFBTSwyQkFBMkIsR0FBRyxJQUFJLENBQUMsQ0FBQyxxSEFBcUg7QUFDL0osTUFBTSxxQkFBcUIs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akQsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1Riw4Q0FBOEM7SUFDOUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6Rix5QkFBeUI7SUFDekIsV0FBVyxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2xFLGtDQUFrQztJQUNsQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQy9ELFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0lBQ2pDLHVDQUF1QztJQUN2QyxjQUFjLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pHLE9BQU8sV0FBVyxDQUFDO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgaW5zdGFuY2VDb3VudCwgZ2V0Q29uZmlndXJhdGlvbiwgZ2V0TnNEYXRhVGhyb3VnaEZpbGUsIHJ1bkNvbW1hbmQsIGdldEFjdGl2ZVNvdXJjZUZpbGVzLCB0cnlHZXRCaXROb2RlTXVsdGlwbGllcnMsXHJcbiAgICBmb3JtYXRNb25leSwgZm9ybWF0TnVtYmVyU2hvcnQsIGZvcm1hdER1cmF0aW9uLCBnZXRTdG9ja1N5bWJvbHNcclxufSBmcm9tICd0cmFkZS9oZWxwZXIuanMnXHJcblxyXG5sZXQgZGlzYWJsZVNob3J0cyA9IGZhbHNlO1xyXG5sZXQgY29tbWlzc2lvbiA9IDEwMDAwMDsgLy8gQnV5L3NlbGwgY29tbWlzc2lvbi4gRXhwZWN0ZWQgcHJvZml0IG11c3QgZXhjZWVkIHRoaXMgdG8gYnV5IGFueXRoaW5nLlxyXG5sZXQgdG90YWxQcm9maXQgPSAwLjA7IC8vIFdlIGNhbiBrZWVwIHRyYWNrIG9mIGhvdyBtdWNoIHdlJ3ZlIGVhcm5lZCBzaW5jZSBzdGFydC5cclxubGV0IGxhc3RMb2cgPSBcIlwiOyAvLyBXZSB1cGRhdGUgZmFzdGVyIHRoYW4gdGhlIHN0b2NrLW1hcmtldCB0aWNrcywgYnV0IHdlIGRvbid0IGxvZyBhbnl0aGluZyB1bmxlc3MgdGhlcmUncyBiZWVuIGEgY2hhbmdlXHJcbmxldCBhbGxTdG9ja1N5bWJvbHMgPSBudWxsOyAvLyBTdG9yZXMgdGhlIHNldCBvZiBhbGwgc3ltYm9scyBjb2xsZWN0ZWQgYXQgc3RhcnRcclxubGV0IG1vY2sgPSBmYWxzZTsgLy8gSWYgc2V0IHRvIHRydWUsIHdpbGwgXCJtb2NrXCIgYnV5L3NlbGwgYnV0IG5vdCBhY3R1YWxseSBidXkvc2VsbCBhbnl0aGluZ29yZWNhc3RcclxubGV0IG5vaXN5ID0gZmFsc2U7IC8vIElmIHNldCB0byB0cnVlLCB0cHJpbnRzIGFuZCBhbm5vdW5jZXMgZWFjaCB0aW1lIHN0b2NrcyBhcmUgYm91Z2h0L3NvbGRcclxubGV0IGRpY3RTb3VyY2VGaWxlczsgLy8gUG9wdWxhdGVkIGF0IGluaXQsIGEgZGljdGlvbmFyeSBvZiBzb3VyY2UtZmlsZXMgdGhlIHVzZXIgaGFzIGFjY2VzcyB0bywgYW5kIHRoZWlyIGxldmVsXHJcbi8vIFByZS00UyBjb25maWd1cmF0aW9uIChpbmZsdWVuY2VzIGhvdyB3ZSBwbGF5IHRoZSBzdG9jayBtYXJrZXQgYmVmb3JlIHdlIGhhdmUgNFMgZGF0YSwgYWZ0ZXIgd2hpY2ggZXZlcnl0aGluZydzIGZvb2wtcHJvb2YpXHJcbmxldCBzaG93TWFya2V0U3VtbWFyeSA9IGZhbHNlOyAgLy8gSWYgc2V0IHRvIHRydWUsIHdpbGwgYWx3YXlzIGdlbmVyYXRlIGFuZCBkaXNwbGF5IHRoZSBwcmUtNHMgZm9yZWNhc3QgdGFibGUgaW4gYSBzZXBhcmF0ZSB0YWlsIHdpbmRvd1xyXG5sZXQgbWluVGlja0hpc3Rvcnk7IC8vIFRoaXMgbXVjaCBoaXN0b3J5IG11c3QgYmUgZ2F0aGVyZWQgYmVmb3JlIHdlIHdpbGwgb2ZmZXIgYSBzdG9jayBmb3JlY2FzdC5cclxubGV0IGxvbmdUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGg7IC8vIFRoaXMgbXVjaCBoaXN0b3J5IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGhpc3RvcmljYWwgcHJvYmFiaWxpdHkgb2YgdGhlIHN0b2NrIChzbyBsb25nIGFzIG5vIGludmVyc2lvbnMgYXJlIGRldGVjdGVkKVxyXG5sZXQgbmVhclRlcm1Gb3JlY2FzdFdpbmRvd0xlbmd0aDsgLy8gVGhpcyBtdWNoIGhpc3Rvcnkgd2lsbCBiZSB1c2VkIHRvIGRldGVjdCByZWNlbnQgbmVnYXRpdmUgdHJlbmRzIGFuZCBhY3Qgb24gdGhlbSBpbW1lZGlhdGVseS5cclxuLy8gVGhlIGZvbGxvd2luZyBwcmUtNHMgY29uc3RhbnRzIGFyZSBoYXJkLWNvZGVkIChub3QgY29uZmlndXJhYmxlIHZpYSBjb21tYW5kIGxpbmUpIGJ1dCBtYXkgcmVxdWlyZSB0d2Vha2luZ1xyXG5jb25zdCBtYXJrZXRDeWNsZUxlbmd0aCA9IDc1OyAvLyBFdmVyeSB0aGlzIG1hbnkgdGlja3MsIGFsbCBzdG9ja3MgaGF2ZSBhIDQ1JSBjaGFuY2Ugb2YgXCJyZXZlcnNpbmdcIiB0aGVpciBwcm9iYWJpbGl0eS4gU29tZXRoaW5nIHdlIG11c3QgZGV0ZWN0IGFuZCBhY3Qgb24gcXVpY2sgdG8gbm90IGxvc2UgcHJvZml0cy5cclxuY29uc3QgbWF4VGlja0hpc3RvcnkgPSAxNTE7IC8vIFRoaXMgbXVjaCBoaXN0b3J5IHdpbGwgYmUga2VwdCBmb3IgcHVycG9zZXMgb2YgZGV0ZW1pbmluZyB2b2xhdGlsaXR5IGFuZCBwZXJoYXBzIG9uZSBkYXkgcGlucG9pbnRpbmcgdGhlIG1hcmtldCBjeWNsZSB0aWNrXHJcbmNvbnN0IGludmVyc2lvbkRldGVjdGlvblRvbGVyYW5jZSA9IDAuMTA7IC8vIElmIHRoZSBuZWFyLXRlcm0gZm9yZWNhc3QgaXMgd2l0aGluIHRoaXMgZGlzdGFuY2Ugb2YgKDEgLSBsb25nLXRlcm0gZm9yZWNhc3QpLCBjb25zaWRlciBpdCBhIHBvdGVudGlhbCBcImludmVyc2lvblwiXHJcbmNvbnN0IGludmVyc2lvbkxhZ1RvbGVyYW5jZSA9IDU7IC8vIEFuIGludmVyc2lvbiBpcyBcInRydXN0ZWRcIiB1cCB0byB0aGlzIG1hbnkgdGlja3MgYWZ0ZXIgdGhlIG5vcm1hbCBuZWFyVGVybUZvcmVjYXN0V2luZG93TGVuZ3RoIGV4cGVjdGVkIGRldGVjdGlvbiB0aW1lXHJcbi8vIChOb3RlOiAzMyB0b3RhbCBzdG9ja3MgKiA0NSUgaW52ZXJzaW9uIGNoYW5jZSBlYWNoIGN5Y2xlID0gfjE1IGV4cGVjdGVkIGludmVyc2lvbnMgcGVyIGN5Y2xlKVxyXG4vLyBUaGUgZm9sbG93aW5nIHByZS00cyB2YWx1ZXMgYXJlIHNldCBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoZSBwcm9ncmFtXHJcbmxldCBtYXJrZXRDeWNsZURldGVjdGVkID0gZmFsc2U7IC8vIFdlIHNob3VsZCBub3QgbWFrZSByaXNreSBwdXJjaGFzaW5nIGRlY2lzaW9ucyB1bnRpbCB0aGUgc3RvY2sgbWFya2V0IGN5Y2xlIGlzIGRldGVjdGVkLiBUaGlzIGNhbiB0YWtlIGEgbG9uZyB0aW1lLCBidXQgd2UnbGwgYmUgdGhhbmtlZFxyXG5sZXQgZGV0ZWN0ZWRDeWNsZVRpY2sgPSAwOyAvLyBUaGlzIHdpbGwgYmUgcmVzZXQgdG8gemVybyBvbmNlIHdlJ3ZlIGRldGVjdGVkIHRoZSBtYXJrZXQgY3ljbGUgcG9pbnQuXHJcbmxldCBpbnZlcnNpb25BZ3JlZW1lbnRUaHJlc2hvbGQgPSA2OyAvLyBJZiB0aGlzIG1hbnkgc3RvY2tzIGFyZSBkZXRlY3RlZCBhcyBiZWluZyBpbiBhbiBcImludmVyc2lvblwiLCBjb25zaWRlciB0aGlzIHRoZSBzdG9jayBtYXJrZXQgY3ljbGUgcG9pbnRcclxuY29uc3QgZXhwZWN0ZWRUaWNrVGltZSA9IDYwMDA7XHJcbmNvbnN0IGNhdGNoVXBUaWNrVGltZSA9IDQwMDA7XHJcbmxldCBsYXN0VGljayA9IDA7XHJcbmxldCBzbGVlcEludGVydmFsID0gMTAwMDtcclxubGV0IHJlc2V0SW5mbyA9ICgvKipAcmV0dXJuc3tSZXNldEluZm99Ki8oKSA9PiB1bmRlZmluZWQpKCk7IC8vIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGJpdG5vZGVcclxuXHJcbmxldCBvcHRpb25zO1xyXG5jb25zdCBhcmdzU2NoZW1hID0gW1xyXG4gICAgWydsJywgZmFsc2VdLCAvLyBTdG9wIGFueSBvdGhlciBydW5uaW5nIHN0b2NrbWFzdGVyLmpzIGluc3RhbmNlcyBhbmQgc2VsbCBhbGwgc3RvY2tzXHJcbiAgICBbJ2xpcXVpZGF0ZScsIGZhbHNlXSwgLy8gTG9uZy1mb3JtIGFsaWFzIGZvciB0aGUgYWJvdmUgZmxhZy5cclxuICAgIFsnbW9jaycsIGZhbHNlXSwgLy8gSWYgc2V0IHRvIHRydWUsIHdpbGwgXCJtb2NrXCIgYnV5L3NlbGwgYnV0IG5vdCBhY3R1YWxseSBidXkvc2VsbCBhbnl0aGluZ1xyXG4gICAgWydub2lzeScsIGZhbHNlXSwgLy8gSWYgc2V0IHRvIHRydWUsIHRwcmludHMgYW5kIGFubm91bmNlcyBlYWNoIHRpbWUgc3RvY2tzIGFyZSBib3VnaHQvc29sZFxyXG4gICAgWydkaXNhYmxlLXNob3J0cycsIGZhbHNlXSwgLy8gSWYgc2V0IHRvIHRydWUsIHdpbGwgbm90IHNob3J0IGFueSBzdG9ja3MuIFdpbGwgYmUgc2V0IGRlcGVuZGluZyBvbiBoYXZpbmcgU0Y4LjIgYnkgZGVmYXVsdC5cclxuICAgIFsncmVzZXJ2ZScsIG51bGxdLCAvLyBBIGZpeGVkIGFtb3VudCBvZiBtb25leSB0byBub3Qgc3BlbmRcclxuICAgIFsnZnJhY0InLCAwLjRdLCAvLyBGcmFjdGlvbiBvZiBhc3NldHMgdG8gaGF2ZSBhcyBsaXF1aWQgYmVmb3JlIHdlIGNvbnNpZGVyIGJ1eWluZyBtb3JlIHN0b2NrXHJcbiAgICBbJ2ZyYWNIJywgMC4yXSwgLy8gRnJhY3Rpb24gb2YgYXNzZXRzIHRvIHJldGFpbiBhcyBjYXNoIGluIGhhbmQgd2hlbiBidXlpbmdcclxuICAgIFsnYnV5LXRocmVzaG9sZCcsIDAuMDAwMV0sIC8vIEJ1eSBvbmx5IHN0b2NrcyBmb3JlY2FzdGVkIHRvIGVhcm4gYmV0dGVyIHRoYW4gYSAwLjAxJSByZXR1cm4gKDEgQmFzaXMgUG9pbnQpXHJcbiAgICBbJ3NlbGwtdGhyZXNob2xkJywgMF0sIC8vIFNlbGwgc3RvY2tzIGZvcmVjYXN0ZWQgdG8gZWFybiBsZXNzIHRoYW4gdGhpcyByZXR1cm4gKGRlZmF1bHQgMCUgLSB3aGljaCBoYXBwZW5zIHdoZW4gcHJvYiBoaXRzIDUwJSBvciB3b3JzZSlcclxuICAgIFsnZGl2ZXJzaWZpY2F0aW9uJywgMC4zNF0sIC8vIEJlZm9yZSB3ZSBoYXZlIDRTIGRhdGEsIHdlIHdpbGwgbm90IGhvbGQgbW9yZSB0aGFuIHRoaXMgZnJhY3Rpb24gb2Ygb3VyIHBvcnRmb2xpbyBhcyBhIHNpbmdsZSBzdG9ja1xyXG4gICAgWydkaXNhYmxlSHVkJywgZmFsc2VdLCAvLyBEaXNhYmxlIHNob3dpbmcgc3RvY2sgdmFsdWUgaW4gdGhlIEhVRCBwYW5lbFxyXG4gICAgWydkaXNhYmxlLXB1cmNoYXNlLXRpeC1hcGknLCBmYWxzZV0sIC8vIERpc2FibGUgcHVyY2hhc2luZyB0aGUgVElYIEFQSSBpZiB5b3UgZG8gbm90IGFscmVhZHkgaGF2ZSBpdC5cclxuICAgIC8vIFRoZSBmb2xsb3dpbmcgc2V0dGluZ3MgYXJlIHJlbGF0ZWQgb25seSB0byB0d2Vha2luZyBwcmUtNHMgc3RvY2stbWFya2V0IGxvZ2ljXHJcbiAgICBbJ3Nob3ctcHJlLTRzLWZvcmVjYXN0JywgZmFsc2VdLCAvLyBJZiBzZXQgdG8gdHJ1ZSwgd2lsbCBhbHdheXMgZ2VuZXJhdGUgYW5kIGRpc3BsYXkgdGhlIHByZS00cyBmb3JlY2FzdCAoaWYgZmFsc2UsIGl0J3Mgb25seSBzaG93biB3aGlsZSB3ZSBob2xkIG5vIHN0b2NrcylcclxuICAgIFsnc2hvdy1tYXJrZXQtc3VtbWFyeScsIGZhbHNlXSwgLy8gU2FtZSBlZmZlY3QgYXMgXCJzaG93LXByZS00cy1mb3JlY2FzdFwiLCB0aGlzIG1hcmtldCBzdW1tYXJ5IGhhcyBiZWNvbWUgc28gaW5mb3JtYXRpdmUsIGl0J3MgdmFsdWFibGUgZXZlbiB3aXRoIDRzXHJcbiAgICBbJ3ByZS00cy1idXktdGhyZXNob2xkLXByb2JhYmlsaXR5JywgMC4xNV0sIC8vIEJlZm9yZSB3ZSBoYXZlIDRTIGRhdGEsIG9ubHkgYnV5IHN0b2NrcyB3aG9zZSBwcm9iYWJpbGl0eSBpcyBtb3JlIHRoYW4gdGhpcyBmYXIgYXdheSBmcm9tIDAuNSwgdG8gYWNjb3VudCBmb3IgaW1wcmVjaXNpb25cclxuICAgIFsncHJlLTRzLWJ1eS10aHJlc2hvbGQtcmV0dXJuJywgMC4wMDE1XSwgLy8gQmVmb3JlIHdlIGhhdmUgNFMgZGF0YSwgQnV5IG9ubHkgc3RvY2tzIGZvcmVjYXN0ZWQgdG8gZWFybiBiZXR0ZXIgdGhhbiB0aGlzIHJldHVybiAoZGVmYXVsdCAwLjI1JSBvciAyNSBCYXNpcyBQb2ludHMpXHJcbiAgICBbJ3ByZS00cy1zZWxsLXRocmVzaG9sZC1yZXR1cm4nLCAwLjAwMDVdLCAvLyBCZWZvcmUgd2UgaGF2ZSA0UyBkYXRhLCBTZWxsIHN0b2NrcyBmb3JlY2FzdGVkIHRvIGVhcm4gbGVzcyB0aGFuIHRoaXMgcmV0dXJuIChkZWZhdWx0IDAuMTUlIG9yIDE1IEJhc2lzIFBvaW50cylcclxuICAgIFsncHJlLTRzLW1pbi10aWNrLWhpc3RvcnknLCAyMV0sIC8vIFRoaXMgbXVjaCBoaXN0b3J5IG11c3QgYmUgZ2F0aGVyZWQgYmVmb3JlIHdlIHdpbGwgdXNlIHByZS00cyBzdG9jayBmb3JlY2FzdHMgdG8gbWFrZSBidXkvc2VsbCBkZWNpc2lvbnMuIChEZWZhdWx0IDIxKVxyXG4gICAgWydwcmUtNHMtZm9yZWNhc3Qtd2luZG93JywgNTFdLCAvLyBUaGlzIG11Y2ggaGlzdG9yeSB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBoaXN0b3JpY2FsIHByb2JhYmlsaXR5IG9mIHRoZSBzdG9jayAoc28gbG9uZyBhcyBubyBpbnZlcnNpb25zIGFyZSBkZXRlY3RlZCkgKERlZmF1bHQgNzYpXHJcbiAgICBbJ3ByZS00cy1pbnZlcnNpb24tZGV0ZWN0aW9uLXdpbmRvdycsIDEwXSwgLy8gVGhpcyBtdWNoIGhpc3Rvcnkgd2lsbCBiZSB1c2VkIHRvIGRldGVjdCByZWNlbnQgbmVnYXRpdmUgdHJlbmRzIGFuZCBhY3Qgb24gdGhlbSBpbW1lZGlhdGVseS4gKERlZmF1bHQgMTApXHJcbiAgICBbJ3ByZS00cy1taW4tYmxhY2tvdXQtd2luZG93JywgMTBdLCAvLyBEbyBub3QgbWFrZSBhbnkgbmV3IHB1cmNoYXNlcyB0aGlzIG1hbnkgdGlja3MgYmVmb3JlIHRoZSBkZXRlY3RlZCBzdG9jayBtYXJrZXQgY3ljbGUgdGljaywgdG8gYXZvaWQgYnV5aW5nIGEgcG9zaXRpb24gdGhhdCByZXZlcnNlcyBzb29uIGFmdGVyXHJcbiAgICBbJ3ByZS00cy1taW5pbXVtLWhvbGQtdGltZScsIDEwXSwgLy8gQSByZWNlbnRseSBib3VnaHQgcG9zaXRpb24gbXVzdCBiZSBoZWxkIGZvciB0aGlzIGxvbmcgYmVmb3JlIHNlbGxpbmcsIHRvIGF2b2lkIHJhc2ggZGVjaXNpb25zIGR1ZSB0byBub2lzZSBhZnRlciBhIGZyZXNoIG1hcmtldCBjeWNsZS4gKERlZmF1bHQgMTApXHJcbiAgICBbJ2J1eS00cy1idWRnZXQnLCAwLjhdLCAvLyBNYXhpbXVtIGNvcnB1cyB2YWx1ZSB3ZSB3aWxsIHNhY3JpZmljZSBpbiBvcmRlciB0byBidXkgNFMuIFNldHRpbmcgdG8gMCB3aWxsIG5ldmVyIGJ1eSA0cy5cclxuXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YSwgYXJncykge1xyXG4gICAgZGF0YS5mbGFncyhhcmdzU2NoZW1hKTtcclxuICAgIHJldHVybiBbXTtcclxufVxyXG5cclxuLyoqIFJlcXVpcmVzIGFjY2VzcyB0byB0aGUgVElYIEFQSS4gUHVyY2hhc2VzIGFjY2VzcyB0byB0aGUgNFMgTWt0IERhdGEgQVBJIGFzIHNvb24gYXMgaXQgY2FuXHJcbiAqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCBydW5PcHRpb25zID0gZ2V0Q29uZmlndXJhdGlvbihucywgYXJnc1NjaGVtYSk7XHJcbiAgICBpZiAoIXJ1bk9wdGlvbnMpIHJldHVybjsgLy8gSW52YWxpZCBvcHRpb25zLCBvciByYW4gaW4gLS1oZWxwIG1vZGUuXHJcblxyXG4gICAgLy8gSWYgZ2l2ZW4gdGhlIFwibGlxdWlkYXRlXCIgY29tbWFuZCwgdHJ5IHRvIGtpbGwgYW55IHZlcnNpb25zIG9mIHRoaXMgc2NyaXB0IHRyYWRpbmcgaW4gc3RvY2tzXHJcbiAgICAvLyBOT1RFOiBXZSBtdXN0IGRvIHRoaXMgaW1tZWRpYXRlbHkgYmVmb3JlIHdlIHN0YXJ0IHJlc2V0dGluZyAvIG92ZXJ3cml0aW5nIGdsb2JhbCBzdGF0ZSBiZWxvdyAod2hpY2ggaXMgc2hhcmVkIGJldHdlZW4gc2NyaXB0IGluc3RhbmNlcylcclxuICAgIGNvbnN0IGhhc1RpeEFwaUFjY2VzcyA9IGF3YWl0IGdldE5zRGF0YVRocm91Z2hGaWxlKG5zLCAnbnMuc3RvY2suaGFzVElYQVBJQWNjZXNzKCknKTtcclxuICAgIGlmIChydW5PcHRpb25zLmwgfHwgcnVuT3B0aW9ucy5saXF1aWRhdGUpIHtcclxuICAgICAgICBpZiAoIWhhc1RpeEFwaUFjY2VzcykgcmV0dXJuIGxvZyhucywgJ0VSUk9SOiBDYW5ub3QgbGlxdWlkYXRlIHN0b2NrcyBiZWNhdXNlIHdlIGRvIG5vdCBoYXZlIFRpeCBBcGkgQWNjZXNzJywgdHJ1ZSwgJ2Vycm9yJyk7XHJcbiAgICAgICAgbG9nKG5zLCAnSU5GTzogS2lsbGluZyBhbnkgb3RoZXIgc3RvY2ttYXN0ZXIgcHJvY2Vzc2VzLi4uJywgZmFsc2UsICdpbmZvJyk7XHJcbiAgICAgICAgYXdhaXQgcnVuQ29tbWFuZChucywgYG5zLnBzKCkuZmlsdGVyKHByb2MgPT4gcHJvYy5maWxlbmFtZSA9PSAnJHtucy5nZXRTY3JpcHROYW1lKCl9JyAmJiAhcHJvYy5hcmdzLmluY2x1ZGVzKCctbCcpICYmICFwcm9jLmFyZ3MuaW5jbHVkZXMoJy0tbGlxdWlkYXRlJykpYCArXHJcbiAgICAgICAgICAgIGAuZm9yRWFjaChwcm9jID0+IG5zLmtpbGwocHJvYy5waWQpKWAsICcvVGVtcC9raWxsLXN0b2NrbWFya2V0LXNjcmlwdHMuanMnKTtcclxuICAgICAgICBsb2cobnMsICdJTkZPOiBDaGVja2luZyBmb3IgYW5kIGxpcXVpZGF0aW5nIGFueSBzdG9ja3MuLi4nLCBmYWxzZSwgJ2luZm8nKTtcclxuICAgICAgICBhd2FpdCBsaXF1aWRhdGUobnMpOyAvLyBTZWxsIGFsbCBzdG9ja3NcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9IC8vIE90aGVyd2lzZSwgcHJldmVudCBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhpcyBzY3JpcHQgZnJvbSBiZWluZyBzdGFydGVkLCBldmVuIHdpdGggZGlmZmVyZW50IGFyZ3MuXHJcbiAgICBpZiAoYXdhaXQgaW5zdGFuY2VDb3VudChucykgPiAxKSByZXR1cm47XHJcblxyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIC8vIEV4dHJhY3QgdmFyaW91cyBvcHRpb25zIGZyb20gdGhlIGFyZ3MgKGdsb2JhbHMsIHB1cmNoYXNpbmcgZGVjaXNpb24gZmFjdG9ycywgcHJlLTRzIGZhY3RvcnMpXHJcbiAgICBvcHRpb25zID0gcnVuT3B0aW9uczsgLy8gV2UgZG9uJ3Qgc2V0IHRoZSBnbG9iYWwgXCJvcHRpb25zXCIgdW50aWwgd2UncmUgc3VyZSB0aGlzIGlzIHRoZSBvbmx5IHJ1bm5pbmcgaW5zdGFuY2VcclxuICAgIG1vY2sgPSBvcHRpb25zLm1vY2s7XHJcbiAgICBub2lzeSA9IG9wdGlvbnMubm9pc3k7XHJcbiAgICBjb25zdCBmcmFjQiA9IG9wdGlvbnMuZnJhY0I7XHJcbiAgICBjb25zdCBmcmFjSCA9IG9wdGlvbnMuZnJhY0g7XHJcbiAgICBjb25zdCBkaXZlcnNpZmljYXRpb24gPSBvcHRpb25zLmRpdmVyc2lmaWNhdGlvbjtcclxuICAgIGNvbnN0IGRpc2FibGVIdWQgPSBvcHRpb25zLmRpc2FibGVIdWQgfHwgb3B0aW9ucy5saXF1aWRhdGUgfHwgb3B0aW9ucy5tb2NrO1xyXG4gICAgZGlzYWJsZVNob3J0cyA9IG9wdGlvbnNbJ2Rpc2FibGUtc2hvcnRzJ107XHJcbiAgICBjb25zdCBwcmU0c0J1eVRocmVzaG9sZFByb2JhYmlsaXR5ID0gb3B0aW9uc1sncHJlLTRzLWJ1eS10aHJlc2hvbGQtcHJvYmFiaWxpdHknXTtcclxuICAgIGNvbnN0IHByZTRzTWluQmxhY2tvdXRXaW5kb3cgPSBvcHRpb25zWydwcmUtNHMtbWluLWJsYWNrb3V0LXdpbmRvdyddIHx8IDE7XHJcbiAgICBjb25zdCBwcmU0c01pbkhvbGRUaW1lID0gb3B0aW9uc1sncHJlLTRzLW1pbmltdW0taG9sZC10aW1lJ10gfHwgMDtcclxuICAgIG1pblRpY2tIaXN0b3J5ID0gb3B0aW9uc1sncHJlLTRzLW1pbi10aWNrLWhpc3RvcnknXSB8fCAyMTtcclxuICAgIG5lYXJUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGggPSBvcHRpb25zWydwcmUtNHMtaW52ZXJzaW9uLWRldGVjdGlvbi13aW5kb3cnXSB8fCAxMDtcclxuICAgIGxvbmdUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGggPSBvcHRpb25zWydwcmUtNHMtZm9yZWNhc3Qtd2luZG93J10gfHwgKG1hcmtldEN5Y2xlTGVuZ3RoICsgMSk7XHJcbiAgICBzaG93TWFya2V0U3VtbWFyeSA9IG9wdGlvbnNbJ3Nob3ctcHJlLTRzLWZvcmVjYXN0J10gfHwgb3B0aW9uc1snc2hvdy1tYXJrZXQtc3VtbWFyeSddO1xyXG4gICAgLy8gT3RoZXIgZ2xvYmFsIHZhbHVlcyBtdXN0IGJlIHJlc2V0IGF0IHN0YXJ0IGxlc3QgdGhleSBiZSBsZWZ0IGluIG1lbW9yeSBmcm9tIGEgcHJpb3IgcnVuXHJcbiAgICBsYXN0VGljayA9IDAsIHRvdGFsUHJvZml0ID0gMCwgbGFzdExvZyA9IFwiXCIsIG1hcmtldEN5Y2xlRGV0ZWN0ZWQgPSBmYWxzZSwgZGV0ZWN0ZWRDeWNsZVRpY2sgPSAwLCBpbnZlcnNpb25BZ3JlZW1lbnRUaHJlc2hvbGQgPSA2O1xyXG4gICAgbGV0IG15U3RvY2tzID0gW10sIGFsbFN0b2NrcyA9IFtdO1xyXG4gICAgbGV0IHBsYXllciA9IGF3YWl0IGdldFBsYXllckluZm8obnMpO1xyXG4gICAgcmVzZXRJbmZvID0gYXdhaXQgZ2V0TnNEYXRhVGhyb3VnaEZpbGUobnMsICducy5nZXRSZXNldEluZm8oKScpO1xyXG5cclxuICAgIGlmICghaGFzVGl4QXBpQWNjZXNzKSB7IC8vIFlvdSBjYW5ub3QgdXNlIHRoZSBzdG9ja21hc3RlciB1bnRpbCB5b3UgaGF2ZSBBUEkgYWNjZXNzXHJcbiAgICAgICAgaWYgKG9wdGlvbnNbJ2Rpc2FibGUtcHVyY2hhc2UtdGl4LWFwaSddKVxyXG4gICAgICAgICAgICByZXR1cm4gbG9nKG5zLCBcIkVSUk9SOiBZb3UgZG8gbm90IGhhdmUgc3RvY2sgbWFya2V0IEFQSSBhY2Nlc3MsIGFuZCAtLWRpc2FibGUtcHVyY2hhc2UtdGl4LWFwaSBpcyBzZXQuXCIsIHRydWUpO1xyXG4gICAgICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XHJcbiAgICAgICAgbG9nKG5zLCBgSU5GTzogWW91IGFyZSBtaXNzaW5nIHN0b2NrIG1hcmtldCBBUEkgYWNjZXNzLiAoTk9URTogVGhpcyBpcyBncmFudGVkIGZvciBmcmVlIG9uY2UgeW91IGhhdmUgU0Y4KS4gYCArXHJcbiAgICAgICAgICAgIGBXYWl0aW5nIHVudGlsIHdlIGNhbiBoYXZlIHRoZSA1YiBuZWVkZWQgdG8gYnV5IGl0LiAoUnVuIHdpdGggLS1kaXNhYmxlLXB1cmNoYXNlLXRpeC1hcGkgdG8gZGlzYWJsZSB0aGlzIGZlYXR1cmUuKWAsIHRydWUpO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoc2xlZXBJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNlcnZlID0gb3B0aW9uc1sncmVzZXJ2ZSddICE9IG51bGwgPyBvcHRpb25zWydyZXNlcnZlJ10gOiBOdW1iZXIobnMucmVhZChcInJlc2VydmUudHh0XCIpIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA9IGF3YWl0IHRyeUdldFN0b2NrTWFya2V0QWNjZXNzKG5zLCBwbGF5ZXIubW9uZXkgLSByZXNlcnZlKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBsb2cobnMsIGBXQVJOSU5HOiBzdG9ja21hc3Rlci5qcyBDYXVnaHQgKGFuZCBzdXBwcmVzc2VkKSBhbiB1bmV4cGVjdGVkIGVycm9yIHdoaWxlIHdhaXRpbmcgdG8gYnV5IHN0b2NrIG1hcmtldCBhY2Nlc3M6XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2UgfHwgSlNPTi5zdHJpbmdpZnkoZXJyKSksIGZhbHNlLCAnd2FybmluZycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoIXN1Y2Nlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpY3RTb3VyY2VGaWxlcyA9IGF3YWl0IGdldEFjdGl2ZVNvdXJjZUZpbGVzKG5zKTsgLy8gRmluZCBvdXQgd2hhdCBzb3VyY2UgZmlsZXMgdGhlIHVzZXIgaGFzIHVubG9ja2VkXHJcbiAgICBpZiAoIWRpc2FibGVTaG9ydHMgJiYgKCEoOCBpbiBkaWN0U291cmNlRmlsZXMpIHx8IGRpY3RTb3VyY2VGaWxlc1s4XSA8IDIpKSB7XHJcbiAgICAgICAgbG9nKG5zLCBcIklORk86IFNob3J0aW5nIHN0b2NrcyBoYXMgYmVlbiBkaXNhYmxlZCAoeW91IGhhdmUgbm90IHlldCB1bmxvY2tlZCBhY2Nlc3MgdG8gc2hvcnRpbmcpXCIpO1xyXG4gICAgICAgIGRpc2FibGVTaG9ydHMgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbFN0b2NrU3ltYm9scyA9IGF3YWl0IGdldFN0b2NrU3ltYm9scyhucyk7XHJcbiAgICBhbGxTdG9ja3MgPSBhd2FpdCBpbml0QWxsU3RvY2tzKG5zKTtcclxuXHJcbiAgICBsZXQgYml0bm9kZU11bHRzO1xyXG4gICAgaWYgKDUgaW4gZGljdFNvdXJjZUZpbGVzKSBiaXRub2RlTXVsdHMgPSBhd2FpdCB0cnlHZXRCaXROb2RlTXVsdGlwbGllcnMobnMpO1xyXG4gICAgLy8gQXNzdW1lIGJpdG5vZGUgbXVsdHMgYXJlIDEgaWYgdXNlciBkb2Vzbid0IGhhdmUgdGhpcyBBUEkgYWNjZXNzIHlldFxyXG4gICAgaWYgKCFiaXRub2RlTXVsdHMpIGJpdG5vZGVNdWx0cyA9IHtGb3VyU2lnbWFNYXJrZXREYXRhQ29zdDogMSwgRm91clNpZ21hTWFya2V0RGF0YUFwaUNvc3Q6IDF9O1xyXG5cclxuICAgIGlmIChzaG93TWFya2V0U3VtbWFyeSkgYXdhaXQgbGF1bmNoU3VtbWFyeVRhaWwobnMpOyAvLyBPcGVucyBhIHNlcGFyYXRlIHNjcmlwdCAvIHdpbmRvdyB0byBjb250aW51b3VzbHkgZGlzcGxheSB0aGUgUHJlNFMgZm9yZWNhc3RcclxuXHJcbiAgICBsZXQgaHVkRWxlbWVudCA9IG51bGw7XHJcbiAgICBpZiAoIWRpc2FibGVIdWQpIHtcclxuICAgICAgICBodWRFbGVtZW50ID0gaW5pdGlhbGl6ZUh1ZCgpO1xyXG4gICAgICAgIG5zLmF0RXhpdCgoKSA9PiBodWRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGh1ZEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKG5zLCBgV2VsY29tZSEgUGxlYXNlIG5vdGU6IGFsbCBzdG9jayBwdXJjaGFzZXMgd2lsbCBpbml0aWFsbHkgcmVzdWx0IGluIGEgTmV0ICh1bnJlYWxpemVkKSBMb3NzLiBUaGlzIGlzIG5vdCBvbmx5IGR1ZSB0byBjb21taXNzaW9uLCBidXQgYmVjYXVzZSBlYWNoIHN0b2NrIGhhcyBhICdzcHJlYWQnIChkaWZmZXJlbmNlIGluIGJ1eSBwcmljZSBhbmQgc2VsbCBwcmljZSkuIGAgK1xyXG4gICAgICAgIGBUaGlzIHNjcmlwdCBpcyBkZXNpZ25lZCB0byBidXkgc3RvY2tzIHRoYXQgYXJlIG1vc3QgbGlrZWx5IHRvIHN1cnBhc3MgdGhhdCBsb3NzIGFuZCB0dXJuIGEgcHJvZml0LCBidXQgaXQgd2lsbCB0YWtlIGEgZmV3IG1pbnV0ZXMgdG8gc2VlIHRoZSBwcm9ncmVzcy5cXG5cXG5gICtcclxuICAgICAgICBgSWYgeW91IGNob29zZSB0byBzdG9wIHRoZSBzY3JpcHQsIG1ha2Ugc3VyZSB5b3UgU0VMTCBhbGwgeW91ciBzdG9ja3MgKGNhbiBnbyAncnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfSAtLWxpcXVpZGF0ZScpIHRvIGdldCB5b3VyIG1vbmV5IGJhY2suXFxuXFxuR29vZCBsdWNrIVxcbn4gSW5zaWdodFxcblxcbmApXHJcblxyXG4gICAgbGV0IHByZTRzID0gdHJ1ZTtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyU3RhdHMgPSBhd2FpdCBnZXRQbGF5ZXJJbmZvKG5zKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzZXJ2ZSA9IG9wdGlvbnNbJ3Jlc2VydmUnXSAhPSBudWxsID8gb3B0aW9uc1sncmVzZXJ2ZSddIDogTnVtYmVyKG5zLnJlYWQoXCJyZXNlcnZlLnR4dFwiKSB8fCAwKTtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB3ZSBoYXZlIDRzIGFjY2VzcyB5ZXMgKG9uY2Ugd2UgZG8sIHdlIGNhbiBzdG9wIGNoZWNraW5nKVxyXG4gICAgICAgICAgICBpZiAocHJlNHMpIHByZTRzID0gIShhd2FpdCBjaGVja0FjY2VzcyhucywgJ2hhczRTRGF0YVRJWEFQSScpKTtcclxuICAgICAgICAgICAgY29uc3QgaG9sZGluZ3MgPSBhd2FpdCByZWZyZXNoKG5zLCAhcHJlNHMsIGFsbFN0b2NrcywgbXlTdG9ja3MpOyAvLyBSZXR1cm5zIHRvdGFsIHN0b2NrIHZhbHVlXHJcbiAgICAgICAgICAgIGNvbnN0IGNvcnB1cyA9IGhvbGRpbmdzICsgcGxheWVyU3RhdHMubW9uZXk7IC8vIENvcnB1cyBtZWFucyB0b3RhbCBzdG9ja3MgKyBjYXNoXHJcbiAgICAgICAgICAgIGNvbnN0IG1heEhvbGRpbmdzID0gKDEgLSBmcmFjSCkgKiBjb3JwdXM7IC8vIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHN0b2NrIHdlIGNvdWxkIGhvbGQgd2l0aG91dCB2aW9saWF0aW5nIGZyYWNIIChGcmFjdGlvbiB0byBrZWVwIGFzIGNhc2gpXHJcbiAgICAgICAgICAgIGlmIChwcmU0cyAmJiAhbW9jayAmJiBhd2FpdCB0cnlHZXQ0U0FwaShucywgcGxheWVyU3RhdHMsIGJpdG5vZGVNdWx0cywgY29ycHVzICogKG9wdGlvbnNbJ2J1eS00cy1idWRnZXQnXSAtIGZyYWNIKSAtIHJlc2VydmUpKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIFN0YXJ0IHRoZSBsb29wIG92ZXIgaWYgd2UganVzdCBib3VnaHQgNFMgQVBJIGFjY2Vzc1xyXG4gICAgICAgICAgICAvLyBCZSBtb3JlIGNvbnNlcnZhdGl2ZSB3aXRoIG91ciBkZWNpc2lvbnMgaWYgd2UgZG9uJ3QgaGF2ZSA0UyBkYXRhXHJcbiAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZFRvQnV5ID0gcHJlNHMgPyBvcHRpb25zWydwcmUtNHMtYnV5LXRocmVzaG9sZC1yZXR1cm4nXSA6IG9wdGlvbnNbJ2J1eS10aHJlc2hvbGQnXTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkVG9TZWxsID0gcHJlNHMgPyBvcHRpb25zWydwcmUtNHMtc2VsbC10aHJlc2hvbGQtcmV0dXJuJ10gOiBvcHRpb25zWydzZWxsLXRocmVzaG9sZCddO1xyXG4gICAgICAgICAgICBpZiAobXlTdG9ja3MubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIGRvU3RhdHVzVXBkYXRlKG5zLCBhbGxTdG9ja3MsIG15U3RvY2tzLCBodWRFbGVtZW50KTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaHVkRWxlbWVudCkgaHVkRWxlbWVudC5pbm5lclRleHQgPSBcIiQwLjAwMCBcIjtcclxuICAgICAgICAgICAgaWYgKHByZTRzICYmIGFsbFN0b2Nrc1swXS5wcmljZUhpc3RvcnkubGVuZ3RoIDwgbWluVGlja0hpc3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIGxvZyhucywgYEJ1aWxkaW5nIGEgaGlzdG9yeSBvZiBzdG9jayBwcmljZXMgKCR7YWxsU3RvY2tzWzBdLnByaWNlSGlzdG9yeS5sZW5ndGh9LyR7bWluVGlja0hpc3Rvcnl9KS4uLmApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoc2xlZXBJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2VsbCBmb3JlY2FzdGVkLXRvLXVuZGVycGVyZm9ybSBzaGFyZXMgKHdvcnNlIHRoYW4gc29tZSBleHBlY3RlZCByZXR1cm4gdGhyZXNob2xkKVxyXG4gICAgICAgICAgICBsZXQgc2FsZXMgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzdGsgb2YgbXlTdG9ja3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGsuYWJzUmV0dXJuKCkgPD0gdGhyZXNob2xkVG9TZWxsIHx8IHN0ay5idWxsaXNoKCkgJiYgc3RrLnNoYXJlc1Nob3J0ID4gMCB8fCBzdGsuYmVhcmlzaCgpICYmIHN0ay5zaGFyZXNMb25nID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmU0cyAmJiBzdGsudGlja3NIZWxkIDwgcHJlNHNNaW5Ib2xkVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ay53YXJuZWRCYWRQdXJjaGFzZSkgbG9nKG5zLCBgV0FSTklORzogVGhpbmtpbmcgb2Ygc2VsbGluZyAke3N0ay5zeW19IHdpdGggRVIgJHtmb3JtYXRCUChzdGsuYWJzUmV0dXJuKCkpfSwgYnV0IGhvbGRpbmcgb3V0IGFzIGl0IHdhcyBwdXJjaGFzZWQganVzdCAke3N0ay50aWNrc0hlbGR9IHRpY2tzIGFnby4uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGsud2FybmVkQmFkUHVyY2hhc2UgPSB0cnVlOyAvLyBIYWNrIHRvIGVuc3VyZSB3ZSBkb24ndCBzcGFtIHRoaXMgd2FybmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbGVzICs9IGF3YWl0IGRvU2VsbEFsbChucywgc3RrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RrLndhcm5lZEJhZFB1cmNoYXNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzYWxlcyA+IDApIGNvbnRpbnVlOyAvLyBJZiB3ZSBzb2xkIGFueXRoaW5nLCBsb29wIGltbWVkaWF0ZWx5IChubyBuZWVkIHRvIHNsZWVwKSBhbmQgcmVmcmVzaCBzdGF0cyBpbW1lZGlhdGVseSBiZWZvcmUgbWFraW5nIHB1cmNoYXNpbmcgZGVjaXNpb25zLlxyXG5cclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBnb25lIGFib3ZlIGEgY2VydGFpbiBsaXF1aWRpdHkgdGhyZXNob2xkLCBkb24ndCBhdHRlbXB0IHRvIGJ1eSBtb3JlIHN0b2NrXHJcbiAgICAgICAgICAgIC8vIEF2b2lkcyBkZWF0aC1ieS1hLXRob3VzYW5kLWNvbW1pc3Npb25zIGJlZm9yZSB3ZSBnZXQgc3VwZXItcmljaCwgc3RvY2tzIGFyZSBjYXBwZWQsIGFuZCB0aGlzIGlzIG5vIGxvbmdlciBhbiBpc3N1ZVxyXG4gICAgICAgICAgICAvLyBCVVQgbWF5IG1lYW4gd2UgbWlzcyBzdHJpa2luZyB3aGlsZSB0aGUgaXJvbiBpcyBob3Qgd2hpbGUgd2FpdGluZyB0byBidWlsZCB1cCBtb3JlIGZ1bmRzLlxyXG4gICAgICAgICAgICBpZiAocGxheWVyU3RhdHMubW9uZXkgLyBjb3JwdXMgPiBmcmFjQikge1xyXG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY2FzaCB3ZSBoYXZlIHRvIHNwZW5kIChzdWNoIHRoYXQgc3BlbmRpbmcgaXQgYWxsIG9uIHN0b2NrIHdvdWxkIGJyaW5nIHVzIGRvd24gdG8gYSBsaXF1aWRpdHkgb2YgZnJhY0gpXHJcbiAgICAgICAgICAgICAgICBsZXQgY2FzaCA9IE1hdGgubWluKHBsYXllclN0YXRzLm1vbmV5IC0gcmVzZXJ2ZSwgbWF4SG9sZGluZ3MgLSBob2xkaW5ncyk7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBtYXJrZXQgY3ljbGUgKG9yIGhhdmVuJ3QgZGV0ZWN0ZWQgaXQgcmVsaWFibHkpLCBhc3N1bWUgaXQgbWlnaHQgYmUgcXVpdGUgc29vbiBhbmQgcmVzdHJpY3QgYmV0cyB0byB0aG9zZSB0aGF0IGNhbiB0dXJuIGEgcHJvZml0IGluIHRoZSB2ZXJ5LW5lYXIgdGVybS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGVzdFRpY2sgPSBNYXRoLm1heChkZXRlY3RlZEN5Y2xlVGljaywgbWFya2V0Q3ljbGVMZW5ndGggLSAoIW1hcmtldEN5Y2xlRGV0ZWN0ZWQgPyAxMCA6IGludmVyc2lvbkFncmVlbWVudFRocmVzaG9sZCA8PSA4ID8gMjAgOiBpbnZlcnNpb25BZ3JlZW1lbnRUaHJlc2hvbGQgPD0gMTAgPyAzMCA6IG1hcmtldEN5Y2xlTGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICAvLyBCdXkgc2hhcmVzIHdpdGggY2FzaCByZW1haW5pbmcgaW4gaGFuZCBpZiBleGNlZWRpbmcgc29tZSBidXkgdGhyZXNob2xkLiBQcmlvcml0aXplIHRhcmdldHMgd2hvc2UgZXhwZWN0ZWQgcmV0dXJuIHdpbGwgY292ZXIgdGhlIGFzay9iaXQgc3ByZWFkIHRoZSBzb29uZXN0XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0ayBvZiBhbGxTdG9ja3Muc29ydChwdXJjaGFzZU9yZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXNoIDw9IDApIGJyZWFrOyAvLyBCcmVhayBpZiB3ZSBhcmUgb3V0IG9mIG1vbmV5IChpLmUuIGZyb20gcHJpb3IgcHVyY2hhc2VzKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBwdXJjaGFzZSBhIHN0b2NrIGlmIGl0IGlzIG5vdCBmb3JlY2FzdGVkIHRvIHJlY292ZXIgZnJvbSB0aGUgYXNrL2JpZCBzcHJlYWQgYmVmb3JlIHRoZSBuZXh0IG1hcmtldCBjeWNsZSBhbmQgcG90ZW50aWFsIHByb2JhYmlsaXR5IGludmVyc2lvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGsuYmxhY2tvdXRXaW5kb3coKSA+PSBtYXJrZXRDeWNsZUxlbmd0aCAtIGVzdFRpY2spIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmU0cyAmJiAoTWF0aC5tYXgocHJlNHNNaW5Ib2xkVGltZSwgcHJlNHNNaW5CbGFja291dFdpbmRvdykgPj0gbWFya2V0Q3ljbGVMZW5ndGggLSBlc3RUaWNrKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBpZiB3ZSBhbHJlYWR5IG93biBhbGwgcG9zc2libGUgc2hhcmVzIGluIHRoaXMgc3RvY2ssIG9yIGlmIHRoZSBleHBlY3RlZCByZXR1cm4gaXMgYmVsb3cgb3VyIHRocmVzaG9sZCwgb3IgaWYgc2hvcnRzIGFyZSBkaXNhYmxlZCBhbmQgc3RvY2sgaXMgYmVhcmlzaFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGsub3duZWRTaGFyZXMoKSA9PSBzdGsubWF4U2hhcmVzIHx8IHN0ay5hYnNSZXR1cm4oKSA8PSB0aHJlc2hvbGRUb0J1eSB8fCAoZGlzYWJsZVNob3J0cyAmJiBzdGsuYmVhcmlzaCgpKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgcHJlLTRzLCBkbyBub3QgcHVyY2hhc2UgYW55IHN0b2NrIHdob3NlIGxhc3QgaW52ZXJzaW9uIHdhcyB0b28gcmVjZW50LCBvciB3aG9zZSBwcm9iYWJpbGl0eSBpcyB0b28gY2xvc2UgdG8gMC41XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZTRzICYmIChzdGsubGFzdEludmVyc2lvbiA8IG1pblRpY2tIaXN0b3J5IHx8IE1hdGguYWJzKHN0ay5wcm9iIC0gMC41KSA8IHByZTRzQnV5VGhyZXNob2xkUHJvYmFiaWxpdHkpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5mb3JjZSBkaXZlcnNpZmljYXRpb246IERvbid0IGhvbGQgbW9yZSB0aGFuIHglIG9mIG91ciBwb3J0Zm9saW8gYXMgYSBzaW5nbGUgc3RvY2sgKGFzIGNvcnB1cyBpbmNyZWFzZXMsIHRoaXMgbmF0dXJhbGx5IHN0b3BzIGJlaW5nIGEgbGltaXRlcilcclxuICAgICAgICAgICAgICAgICAgICAvLyBJbmZsYXRlIG91ciBidWRnZXQgLyBjdXJyZW50IHBvc2l0aW9uIHZhbHVlIGJ5IGEgZmFjdG9yIG9mIHN0ay5zcHJlYWRfcGN0IHRvIGF2b2lkIHJlcGVhdGVkIG1pY3JvLWJ1eXMgb2YgYSBzdG9jayBkdWUgdG8gdGhlIGJ1eS9hc2sgc3ByZWFkIG1ha2luZyBob2xkaW5ncyBhcHBlYXIgbW9yZSBkaXZlcnNpZmllZCBhZnRlciBwdXJjaGFzZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWRnZXQgPSBNYXRoLm1pbihjYXNoLCBtYXhIb2xkaW5ncyAqIChkaXZlcnNpZmljYXRpb24gKyBzdGsuc3ByZWFkX3BjdCkgLSBzdGsucG9zaXRpb25WYWx1ZSgpICogKDEuMDEgKyBzdGsuc3ByZWFkX3BjdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHB1cmNoYXNlUHJpY2UgPSBzdGsuYnVsbGlzaCgpID8gc3RrLmFza19wcmljZSA6IHN0ay5iaWRfcHJpY2U7IC8vIERlcGVuZHMgb24gd2hldGhlciB3ZSB3aWxsIGJlIGJ1eWluZyBhIGxvbmcgb3Igc2hvcnQgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWZmb3JkYWJsZVNoYXJlcyA9IE1hdGguZmxvb3IoKGJ1ZGdldCAtIGNvbW1pc3Npb24pIC8gcHVyY2hhc2VQcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bVNoYXJlcyA9IE1hdGgubWluKHN0ay5tYXhTaGFyZXMgLSBzdGsub3duZWRTaGFyZXMoKSwgYWZmb3JkYWJsZVNoYXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bVNoYXJlcyA8PSAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBidXkgZmV3ZXIgc2hhcmVzIHRoYW4gY2FuIGJlYXQgdGhlIGNvbWlzc2lvbiBiZWZvcmUgdGhlIG5leHQgc3RvY2sgbWFya2V0IGN5Y2xlIChhZnRlciBjb3ZlcmluZyB0aGUgc3ByZWFkKSwgbGVzdCB0aGUgcG9zaXRpb24gcmV2ZXJzZSBiZWZvcmUgd2UgYnJlYWstZXZlbi5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGlja3NCZWZvcmVDeWNsZUVuZCA9IG1hcmtldEN5Y2xlTGVuZ3RoIC0gZXN0VGljayAtIHN0ay50aW1lVG9Db3ZlclRoZVNwcmVhZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aWNrc0JlZm9yZUN5Y2xlRW5kIDwgMSkgY29udGludWU7IC8vIFdlJ3JlIGN1dHRpbmcgaXQgdG9vIGNsb3NlIHRvIHRoZSBtYXJrZXQgY3ljbGUsIHBvc2l0aW9uIG1pZ2h0IHJldmVyc2UgYmVmb3JlIHdlIGJyZWFrLWV2ZW4gb24gY29tbWlzc2lvblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlc3RFbmRPZkN5Y2xlVmFsdWUgPSBudW1TaGFyZXMgKiBwdXJjaGFzZVByaWNlICogKChzdGsuYWJzUmV0dXJuKCkgKyAxKSAqKiB0aWNrc0JlZm9yZUN5Y2xlRW5kIC0gMSk7IC8vIEV4cGVjdGVkIGRpZmZlcmVuY2UgaW4gcHVyY2hhc2UgcHJpY2UgYW5kIHZhbHVlIGF0IG5leHQgbWFya2V0IGN5Y2xlIGVuZFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvd25lZCA9IHN0ay5vd25lZFNoYXJlcygpID4gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXN0RW5kT2ZDeWNsZVZhbHVlIDw9IDIgKiBjb21taXNzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cobnMsIChvd25lZCA/ICcnIDogYFdlIGN1cnJlbnRseSBoYXZlICR7Zm9ybWF0TnVtYmVyU2hvcnQoc3RrLm93bmVkU2hhcmVzKCksIDMsIDEpfSBzaGFyZXMgaW4gJHtzdGsuc3ltfSB2YWx1ZWQgYXQgJHtmb3JtYXRNb25leShzdGsucG9zaXRpb25WYWx1ZSgpKX0gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCgkeygxMDAgKiBzdGsucG9zaXRpb25WYWx1ZSgpIC8gbWF4SG9sZGluZ3MpLnRvRml4ZWQoMSl9JSBvZiBjb3JwdXMsIGNhcHBlZCBhdCAkeyhkaXZlcnNpZmljYXRpb24gKiAxMDApLnRvRml4ZWQoMSl9JSBieSAtLWRpdmVyc2lmaWNhdGlvbikuXFxuYCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYERlc3BpdGUgYXR0cmFjdGl2ZSBFUiBvZiAke2Zvcm1hdEJQKHN0ay5hYnNSZXR1cm4oKSl9LCAke293bmVkID8gJ21vcmUgJyA6ICcnfSR7c3RrLnN5bX0gd2FzIG5vdCBib3VnaHQuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbkJ1ZGdldDogJHtmb3JtYXRNb25leShidWRnZXQpfSBjYW4gb25seSBidXkgJHtudW1TaGFyZXMudG9Mb2NhbGVTdHJpbmcoJ2VuJyl9ICR7b3duZWQgPyAnbW9yZSAnIDogJyd9c2hhcmVzIEAgJHtmb3JtYXRNb25leShwdXJjaGFzZVByaWNlKX0uIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbkdpdmVuIGFuIGVzdGltYXRlZCAke21hcmtldEN5Y2xlTGVuZ3RoIC0gZXN0VGlja30gdGlja3MgbGVmdCBpbiBtYXJrZXQgY3ljbGUsIGxlc3MgJHtzdGsudGltZVRvQ292ZXJUaGVTcHJlYWQoKS50b0ZpeGVkKDEpfSB0aWNrcyB0byBjb3ZlciB0aGUgc3ByZWFkICgkeyhzdGsuc3ByZWFkX3BjdCAqIDEwMCkudG9GaXhlZCgyKX0lKSwgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcmVtYWluaW5nICR7dGlja3NCZWZvcmVDeWNsZUVuZC50b0ZpeGVkKDEpfSB0aWNrcyB3b3VsZCBvbmx5IGdlbmVyYXRlICR7Zm9ybWF0TW9uZXkoZXN0RW5kT2ZDeWNsZVZhbHVlKX0sIHdoaWNoIGlzIGxlc3MgdGhhbiAyeCBjb21taXNzaW9uICgke2Zvcm1hdE1vbmV5KDIgKiBjb21taXNzaW9uLCAzKX0pYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNoIC09IGF3YWl0IGRvQnV5KG5zLCBzdGssIG51bVNoYXJlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgbG9nKG5zLCBgV0FSTklORzogc3RvY2ttYXN0ZXIuanMgQ2F1Z2h0IChhbmQgc3VwcHJlc3NlZCkgYW4gdW5leHBlY3RlZCBlcnJvciBpbiB0aGUgbWFpbiBsb29wOlxcbmAgK1xyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2UgfHwgSlNPTi5zdHJpbmdpZnkoZXJyKSksIGZhbHNlLCAnd2FybmluZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBucy5zbGVlcChzbGVlcEludGVydmFsKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIFJhbS1kb2RnZSBnZXR0aW5nIHVwZGF0ZWQgcGxheWVyIGluZm8uIE5vdGUgdGhhdCB0aGlzIGlzIHRoZSBvbmx5IGFzeW5jIHJvdXRpbmUgY2FsbGVkIGluIHRoZSBtYWluIGxvb3AuXHJcbiAqIElmIGxhdGVuY3kgb3IgcmFtIGluc3RhYmlsaXR5IGlzIGFuIGlzc3VlLCB5b3UgbWF5IHdpc2ggdG8gdHJ5IHVuY29tbWVudGluZyB0aGUgZGlyZWN0IHJlcXVlc3QuXHJcbiAqIEBwYXJhbSB7TlN9IG5zXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPFBsYXllcj59ICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFBsYXllckluZm8obnMpIHtcclxuICAgIHJldHVybiBhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucywgYG5zLmdldFBsYXllcigpYCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRpbWVJbkJpdG5vZGUoKSB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHJlc2V0SW5mby5sYXN0Tm9kZVJlc2V0O1xyXG59XHJcblxyXG4vKiBBIHNvcnRpbmcgZnVuY3Rpb24gdG8gcHV0IHN0b2NrcyBpbiB0aGUgb3JkZXIgd2Ugc2hvdWxkIHByaW9yaXRpemUgaW52ZXN0aW5nIGluIHRoZW0gKi9cclxubGV0IHB1cmNoYXNlT3JkZXIgPSAoYSwgYikgPT4gKE1hdGguY2VpbChhLnRpbWVUb0NvdmVyVGhlU3ByZWFkKCkpIC0gTWF0aC5jZWlsKGIudGltZVRvQ292ZXJUaGVTcHJlYWQoKSkpIHx8IChiLmFic1JldHVybigpIC0gYS5hYnNSZXR1cm4oKSk7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogR2VuZXJpYyBoZWxwZXIgZm9yIGRvZGdpbmcgdGhlIGhlZnR5IFJBTSByZXF1aXJlbWVudHMgb2Ygc3RvY2sgZnVuY3Rpb25zIGJ5IHNwYXduaW5nIGEgdGVtcG9yYXJ5IHNjcmlwdCB0byBjb2xsZWN0IGluZm8gZm9yIHVzLiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRTdG9ja0luZm9EaWN0KG5zLCBzdG9ja0Z1bmN0aW9uKSB7XHJcbiAgICBhbGxTdG9ja1N5bWJvbHMgPz89IGF3YWl0IGdldFN0b2NrU3ltYm9scyhucyk7XHJcbiAgICBpZiAoYWxsU3RvY2tTeW1ib2xzID09IG51bGwpIHRocm93IG5ldyBFcnJvcihgTm8gV1NFIEFQSSBBY2Nlc3MgeWV0LCB0aGlzIGNhbGwgdG8gbnMuc3RvY2suJHtzdG9ja0Z1bmN0aW9ufSBpcyBwcmVtYXR1cmUuYCk7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0TnNEYXRhVGhyb3VnaEZpbGUobnMsXHJcbiAgICAgICAgYE9iamVjdC5mcm9tRW50cmllcyhucy5hcmdzLm1hcChzeW0gPT4gW3N5bSwgbnMuc3RvY2suJHtzdG9ja0Z1bmN0aW9ufShzeW0pXSkpYCxcclxuICAgICAgICBgL1RlbXAvc3RvY2stJHtzdG9ja0Z1bmN0aW9ufS50eHRgLCBhbGxTdG9ja1N5bWJvbHMpO1xyXG59O1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5hc3luYyBmdW5jdGlvbiBpbml0QWxsU3RvY2tzKG5zKSB7XHJcbiAgICBsZXQgZGljdE1heFNoYXJlcyA9IGF3YWl0IGdldFN0b2NrSW5mb0RpY3QobnMsICdnZXRNYXhTaGFyZXMnKTsgLy8gT25seSBuZWVkIHRvIGdldCB0aGlzIG9uY2UsIGl0IG5ldmVyIGNoYW5nZXNcclxuICAgIHJldHVybiBhbGxTdG9ja1N5bWJvbHMubWFwKHMgPT4gKHtcclxuICAgICAgICBzeW06IHMsXHJcbiAgICAgICAgbWF4U2hhcmVzOiBkaWN0TWF4U2hhcmVzW3NdLCAvLyBWYWx1ZSBuZXZlciBjaGFuZ2VzIG9uY2UgcmV0cmlldmVkXHJcbiAgICAgICAgZXhwZWN0ZWRSZXR1cm46IGZ1bmN0aW9uICgpIHsgLy8gSG93IG11Y2ggaG9sZGluZ3MgYXJlIGV4cGVjdGVkIHRvIGFwcHJlY2lhdGUgKG9yIGRlcHJlY2lhdGUpIGluIHRoZSBmdXR1cmVcclxuICAgICAgICAgICAgLy8gVG8gYWRkIGNvbnNlcnZhdGlzbSB0byBwcmUtNHMgZXN0aW1hdGVzLCB3ZSByZWR1Y2UgdGhlIHByb2JhYmlsaXR5IGJ5IDEgc3RhbmRhcmQgZGV2aWF0aW9uIHdpdGhvdXQgY3Jvc3NpbmcgdGhlIG1pZHBvaW50XHJcbiAgICAgICAgICAgIGxldCBub3JtYWxpemVkUHJvYiA9ICh0aGlzLnByb2IgLSAwLjUpO1xyXG4gICAgICAgICAgICBsZXQgY29uc2VydmF0aXZlUHJvYiA9IG5vcm1hbGl6ZWRQcm9iIDwgMCA/IE1hdGgubWluKDAsIG5vcm1hbGl6ZWRQcm9iICsgdGhpcy5wcm9iU3RkRGV2KSA6IE1hdGgubWF4KDAsIG5vcm1hbGl6ZWRQcm9iIC0gdGhpcy5wcm9iU3RkRGV2KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudm9sICogY29uc2VydmF0aXZlUHJvYjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFic1JldHVybjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5leHBlY3RlZFJldHVybigpKTtcclxuICAgICAgICB9LCAvLyBBcHByb3ByaWF0ZSB0byB1c2Ugd2hlbiBjYW4ganVzdCBhcyB3ZWxsIGJ1eSBhIHNob3J0IHBvc2l0aW9uIGFzIGEgbG9uZyBwb3NpdGlvblxyXG4gICAgICAgIGJ1bGxpc2g6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvYiA+IDAuNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmVhcmlzaDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuYnVsbGlzaCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3duZWRTaGFyZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVzTG9uZyArIHRoaXMuc2hhcmVzU2hvcnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvd25lZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vd25lZFNoYXJlcygpID4gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc2l0aW9uVmFsdWVMb25nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYXJlc0xvbmcgKiB0aGlzLmJpZF9wcmljZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc2l0aW9uVmFsdWVTaG9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFyZXNTaG9ydCAqICgyICogdGhpcy5ib3VnaHRQcmljZVNob3J0IC0gdGhpcy5hc2tfcHJpY2UpO1xyXG4gICAgICAgIH0sIC8vIFNob3J0cyB3b3JrIGEgYml0IHdlaXJkXHJcbiAgICAgICAgcG9zaXRpb25WYWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvblZhbHVlTG9uZygpICsgdGhpcy5wb3NpdGlvblZhbHVlU2hvcnQoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIEhvdyBtYW55IHN0b2NrIG1hcmtldCB0aWNrcyBtdXN0IG9jY3VyIGF0IHRoZSBjdXJyZW50IGV4cGVjdGVkIHJldHVybiBiZWZvcmUgd2UgcmVnYWluIHRoZSB2YWx1ZSBsb3N0IGJ5IHRoZSBzcHJlYWQgYmV0d2VlbiBidXkgYW5kIHNlbGwgcHJpY2VzLlxyXG4gICAgICAgIC8vIFRoaXMgY2FuIGJlIGRlcml2ZWQgYnkgdGFraW5nIHRoZSBjb21wb3VuZCBpbnRlcmVzdCBmb3JtdWxhIChmdXR1cmUgPSBjdXJyZW50ICogKDEgKyBleHBlY3RlZF9yZXR1cm4pIF4gbikgYW5kIHNvbHZpbmcgZm9yIG5cclxuICAgICAgICB0aW1lVG9Db3ZlclRoZVNwcmVhZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5sb2codGhpcy5hc2tfcHJpY2UgLyB0aGlzLmJpZF9wcmljZSkgLyBNYXRoLmxvZygxICsgdGhpcy5hYnNSZXR1cm4oKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBXZSBzaG91bGQgbm90IGJ1eSB0aGlzIHN0b2NrIHdpdGhpbiB0aGlzIG1hbnkgdGlja3Mgb2YgYSBNYXJrZXQgY3ljbGUsIG9yIHdlIHJpc2sgYmVpbmcgZm9yY2VkIHRvIHNlbGwgZHVlIHRvIGEgcHJvYmFiaWxpdHkgaW52ZXJzaW9uLCBhbmQgbG9zaW5nIG1vbmV5IGR1ZSB0byB0aGUgc3ByZWFkXHJcbiAgICAgICAgYmxhY2tvdXRXaW5kb3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLnRpbWVUb0NvdmVyVGhlU3ByZWFkKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gUHJlLTRzIHByb3BlcnRpZXMgdXNlZCBmb3IgZm9yZWNhc3RpbmdcclxuICAgICAgICBwcmljZUhpc3Rvcnk6IFtdLFxyXG4gICAgICAgIGxhc3RJbnZlcnNpb246IDAsXHJcbiAgICB9KSk7XHJcbn1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaChucywgaGFzNHMsIGFsbFN0b2NrcywgbXlTdG9ja3MpIHtcclxuICAgIGxldCBob2xkaW5ncyA9IDA7XHJcblxyXG4gICAgLy8gRG9kZ2UgaGVmdHkgUkFNIHJlcXVpcmVtZW50cyBieSBzcGF3bmluZyBhIHNlcXVlbmNlIG9mIHRlbXBvcmFyeSBzY3JpcHRzIHRvIGNvbGxlY3QgaW5mbyBmb3IgdXMgb25lIGZ1bmN0aW9uIGF0IGEgdGltZVxyXG4gICAgY29uc3QgZGljdEFza1ByaWNlcyA9IGF3YWl0IGdldFN0b2NrSW5mb0RpY3QobnMsICdnZXRBc2tQcmljZScpO1xyXG4gICAgY29uc3QgZGljdEJpZFByaWNlcyA9IGF3YWl0IGdldFN0b2NrSW5mb0RpY3QobnMsICdnZXRCaWRQcmljZScpO1xyXG4gICAgY29uc3QgZGljdFZvbGF0aWxpdGllcyA9ICFoYXM0cyA/IG51bGwgOiBhd2FpdCBnZXRTdG9ja0luZm9EaWN0KG5zLCAnZ2V0Vm9sYXRpbGl0eScpO1xyXG4gICAgY29uc3QgZGljdEZvcmVjYXN0cyA9ICFoYXM0cyA/IG51bGwgOiBhd2FpdCBnZXRTdG9ja0luZm9EaWN0KG5zLCAnZ2V0Rm9yZWNhc3QnKTtcclxuICAgIGNvbnN0IGRpY3RQb3NpdGlvbnMgPSBtb2NrID8gbnVsbCA6IGF3YWl0IGdldFN0b2NrSW5mb0RpY3QobnMsICdnZXRQb3NpdGlvbicpO1xyXG4gICAgY29uc3QgdGlja2VkID0gYWxsU3RvY2tzLnNvbWUoc3RrID0+IHN0ay5hc2tfcHJpY2UgIT0gZGljdEFza1ByaWNlc1tzdGsuc3ltXSk7IC8vIElmIGFueSBwcmljZSBoYXMgY2hhbmdlZCBzaW5jZSBvdXIgbGFzdCB1cGRhdGUsIHRoZSBzdG9jayBtYXJrZXQgaGFzIFwidGlja2VkXCJcclxuXHJcbiAgICBpZiAodGlja2VkKSB7XHJcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBsYXN0VGljayA8IGV4cGVjdGVkVGlja1RpbWUgLSBzbGVlcEludGVydmFsKSB7XHJcbiAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdFRpY2sgPCBjYXRjaFVwVGlja1RpbWUgLSBzbGVlcEludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hhbmdlZFByaWNlcyA9IGFsbFN0b2Nrcy5maWx0ZXIoc3RrID0+IHN0ay5hc2tfcHJpY2UgIT0gZGljdEFza1ByaWNlc1tzdGsuc3ltXSk7XHJcbiAgICAgICAgICAgICAgICBsb2cobnMsIGBXQVJOSU5HOiBEZXRlY3RlZCBhIHN0b2NrIG1hcmtldCB0aWNrIGFmdGVyIG9ubHkgJHtmb3JtYXREdXJhdGlvbihEYXRlLm5vdygpIC0gbGFzdFRpY2spfSwgYnV0IGV4cGVjdGVkIH4ke2Zvcm1hdER1cmF0aW9uKGV4cGVjdGVkVGlja1RpbWUpfS4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgKGNoYW5nZWRQcmljZXMubGVuZ3RoID49IDMzID8gJyhBbGwgc3RvY2tzIHVwZGF0ZWQpJyA6IGBUaGUgZm9sbG93aW5nICR7Y2hhbmdlZFByaWNlcy5sZW5ndGh9IHN0b2NrIHByaWNlcyBjaGFuZ2VkOiAke2NoYW5nZWRQcmljZXMubWFwKHN0ayA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtzdGsuc3ltfSAke2Zvcm1hdE1vbmV5KHN0ay5hc2tfcHJpY2UpfSAtPiAke2Zvcm1hdE1vbmV5KGRpY3RBc2tQcmljZXNbc3RrLnN5bV0pfWApLmpvaW4oXCIsIFwiKX1gKSwgZmFsc2UsICd3YXJuaW5nJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgbG9nKG5zLCBgSU5GTzogRGV0ZWN0ZWQgYSByYXBpZCBzdG9jayBtYXJrZXQgdGljayAoJHtmb3JtYXREdXJhdGlvbihEYXRlLm5vdygpIC0gbGFzdFRpY2spfSksIGxpa2VseSB0byBtYWtlIHVwIGZvciBsYWcgLyBvZmZsaW5lIHRpbWUuYClcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdFRpY2sgPSBEYXRlLm5vdygpXHJcbiAgICB9XHJcblxyXG4gICAgbXlTdG9ja3MubGVuZ3RoID0gMDtcclxuICAgIGZvciAoY29uc3Qgc3RrIG9mIGFsbFN0b2Nrcykge1xyXG4gICAgICAgIGNvbnN0IHN5bSA9IHN0ay5zeW07XHJcbiAgICAgICAgc3RrLmFza19wcmljZSA9IGRpY3RBc2tQcmljZXNbc3ltXTsgLy8gVGhlIGFtb3VudCB3ZSB3b3VsZCBwYXkgaWYgd2UgYm91Z2h0IHRoZSBzdG9jayAoaGlnaGVyIHRoYW4gJ3ByaWNlJylcclxuICAgICAgICBzdGsuYmlkX3ByaWNlID0gZGljdEJpZFByaWNlc1tzeW1dOyAvLyBUaGUgYW1vdW50IHdlIHdvdWxkIHJlY2lldmUgaWYgd2Ugc29sZCB0aGUgc3RvY2sgKGxvd2VyIHRoYW4gJ3ByaWNlJylcclxuICAgICAgICBzdGsuc3ByZWFkID0gc3RrLmFza19wcmljZSAtIHN0ay5iaWRfcHJpY2U7XHJcbiAgICAgICAgc3RrLnNwcmVhZF9wY3QgPSBzdGsuc3ByZWFkIC8gc3RrLmFza19wcmljZTsgLy8gVGhlIHBlcmNlbnRhZ2Ugb2YgdmFsdWUgd2UgbG9zZSBqdXN0IGJ5IGJ1eWluZyB0aGUgc3RvY2tcclxuICAgICAgICBzdGsucHJpY2UgPSAoc3RrLmFza19wcmljZSArIHN0ay5iaWRfcHJpY2UpIC8gMjsgLy8gPSBucy5zdG9jay5nZXRQcmljZShzeW0pO1xyXG4gICAgICAgIHN0ay52b2wgPSBoYXM0cyA/IGRpY3RWb2xhdGlsaXRpZXNbc3ltXSA6IHN0ay52b2w7XHJcbiAgICAgICAgc3RrLnByb2IgPSBoYXM0cyA/IGRpY3RGb3JlY2FzdHNbc3ltXSA6IHN0ay5wcm9iO1xyXG4gICAgICAgIHN0ay5wcm9iU3RkRGV2ID0gaGFzNHMgPyAwIDogc3RrLnByb2JTdGREZXY7IC8vIFN0YW5kYXJkIGRldmlhdGlvbiBhcm91bmQgdGhlIGVzdC4gcHJvYmFiaWxpdHlcclxuICAgICAgICAvLyBVcGRhdGUgb3VyIGN1cnJlbnQgcG9ydGZvbGlvIG9mIG93bmVkIHN0b2NrXHJcbiAgICAgICAgbGV0IFtwcmlvckxvbmcsIHByaW9yU2hvcnRdID0gW3N0ay5zaGFyZXNMb25nLCBzdGsuc2hhcmVzU2hvcnRdO1xyXG4gICAgICAgIHN0ay5wb3NpdGlvbiA9IG1vY2sgPyBudWxsIDogZGljdFBvc2l0aW9uc1tzeW1dO1xyXG4gICAgICAgIHN0ay5zaGFyZXNMb25nID0gbW9jayA/IChzdGsuc2hhcmVzTG9uZyB8fCAwKSA6IHN0ay5wb3NpdGlvblswXTtcclxuICAgICAgICBzdGsuYm91Z2h0UHJpY2UgPSBtb2NrID8gKHN0ay5ib3VnaHRQcmljZSB8fCAwKSA6IHN0ay5wb3NpdGlvblsxXTtcclxuICAgICAgICBzdGsuc2hhcmVzU2hvcnQgPSBtb2NrID8gKHN0ay5zaGFyZXNfc2hvcnQgfHwgMCkgOiBzdGsucG9zaXRpb25bMl07XHJcbiAgICAgICAgc3RrLmJvdWdodFByaWNlU2hvcnQgPSBtb2NrID8gKHN0ay5ib3VnaHRQcmljZV9zaG9ydCB8fCAwKSA6IHN0ay5wb3NpdGlvblszXTtcclxuICAgICAgICBob2xkaW5ncyArPSBzdGsucG9zaXRpb25WYWx1ZSgpO1xyXG4gICAgICAgIGlmIChzdGsub3duZWQoKSkgbXlTdG9ja3MucHVzaChzdGspOyBlbHNlIHN0ay50aWNrc0hlbGQgPSAwO1xyXG4gICAgICAgIGlmICh0aWNrZWQpIC8vIEluY3JlbWVudCB0aWNrc0hlbGQsIG9yIHJlc2V0IGl0IGlmIHdlIGhhdmUgbm8gcG9zaXRpb24gaW4gdGhpcyBzdG9jayBvciByZXZlcnNlZCBvdXIgcG9zaXRpb24gbGFzdCB0aWNrLlxyXG4gICAgICAgICAgICBzdGsudGlja3NIZWxkID0gIXN0ay5vd25lZCgpIHx8IChwcmlvckxvbmcgPiAwICYmIHN0ay5zaGFyZXNMb25nID09IDApIHx8IChwcmlvclNob3J0ID4gMCAmJiBzdGsuc2hhcmVzU2hvcnQgPT0gMCkgPyAwIDogMSArIChzdGsudGlja3NIZWxkIHx8IDApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRpY2tlZCkgYXdhaXQgdXBkYXRlRm9yZWNhc3QobnMsIGFsbFN0b2NrcywgaGFzNHMpOyAvLyBMb2dpYyBiZWxvdyBvbmx5IHJlcXVpcmVkIG9uIG1hcmtldCB0aWNrXHJcbiAgICByZXR1cm4gaG9sZGluZ3M7XHJcbn1cclxuXHJcbi8vIEhpc3RvcmljYWwgcHJvYmFiaWxpdHkgY2FuIGJlIGluZmVycmVkIGZyb20gdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgc3RvY2sgd2FzIHJlY2VudGx5IG9ic2VydmVkIGluY3JlYXNpbmcgb3ZlciB0aGUgdG90YWwgbnVtYmVyIG9mIG9ic2VydmF0aW9uc1xyXG5jb25zdCBmb3JlY2FzdCA9IGhpc3RvcnkgPT4gaGlzdG9yeS5yZWR1Y2UoKHVwcywgcHJpY2UsIGlkeCkgPT4gaWR4ID09IDAgPyAwIDogKGhpc3RvcnlbaWR4IC0gMV0gPiBwcmljZSA/IHVwcyArIDEgOiB1cHMpLCAwKSAvIChoaXN0b3J5Lmxlbmd0aCAtIDEpO1xyXG4vLyBBbiBcImludmVyc2lvblwiIGNhbiBiZSBkZXRlY3RlZCBpZiB0d28gcHJvYmFiaWxpdGllcyBhcmUgZmFyIGVub3VnaCBhcGFydCBhbmQgYXJlIHdpdGhpbiBcInRvbGVyYW5jZVwiIG9mIHAxIGJlaW5nIGVxdWFsIHRvIDEtcDJcclxuY29uc3QgdG9sMiA9IGludmVyc2lvbkRldGVjdGlvblRvbGVyYW5jZSAvIDI7XHJcbmNvbnN0IGRldGVjdEludmVyc2lvbiA9IChwMSwgcDIpID0+ICgocDEgPj0gMC41ICsgdG9sMikgJiYgKHAyIDw9IDAuNSAtIHRvbDIpICYmIHAyIDw9ICgxIC0gcDEpICsgaW52ZXJzaW9uRGV0ZWN0aW9uVG9sZXJhbmNlKVxyXG4gICAgLyogUmV2ZXJzZSBDb25kaXRpb246ICovIHx8ICgocDEgPD0gMC41IC0gdG9sMikgJiYgKHAyID49IDAuNSArIHRvbDIpICYmIHAyID49ICgxIC0gcDEpIC0gaW52ZXJzaW9uRGV0ZWN0aW9uVG9sZXJhbmNlKTtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRm9yZWNhc3QobnMsIGFsbFN0b2NrcywgaGFzNHMpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRIaXN0b3J5ID0gYWxsU3RvY2tzWzBdLnByaWNlSGlzdG9yeS5sZW5ndGg7XHJcbiAgICBjb25zdCBwcmVwU3VtbWFyeSA9IHNob3dNYXJrZXRTdW1tYXJ5IHx8IG1vY2sgfHwgKCFoYXM0cyAmJiAoY3VycmVudEhpc3RvcnkgPCBtaW5UaWNrSGlzdG9yeSB8fCBhbGxTdG9ja3MuZmlsdGVyKHN0ayA9PiBzdGsub3duZWQoKSkubGVuZ3RoID09IDApKTsgLy8gRGVjaWRlIHdoZXRoZXIgdG8gZGlzcGxheSB0aGUgbWFya2V0IHN1bW1hcnkgdGFibGUuXHJcbiAgICBjb25zdCBpbnZlcnNpb25zRGV0ZWN0ZWQgPSBbXTsgLy8gS2VlcCB0cmFjayBvZiBpbmRpdmlkdWFsIHN0b2NrcyB3aG9zZSBwcm9iYWJpbGl0eSBoYXMgaW52ZXJ0ZWQgKDQ1JSBjaGFuY2Ugb2YgaGFwcGVuaW5nIGVhY2ggXCJjeWNsZVwiKVxyXG4gICAgZGV0ZWN0ZWRDeWNsZVRpY2sgPSAoZGV0ZWN0ZWRDeWNsZVRpY2sgKyAxKSAlIG1hcmtldEN5Y2xlTGVuZ3RoOyAvLyBLZWVwIHRyYWNrIG9mIHN0b2NrIG1hcmtldCBjeWNsZSAod2hpY2ggb2NjdXJzIGV2ZXJ5IDc1IHRpY2tzKVxyXG4gICAgZm9yIChjb25zdCBzdGsgb2YgYWxsU3RvY2tzKSB7XHJcbiAgICAgICAgc3RrLnByaWNlSGlzdG9yeS51bnNoaWZ0KHN0ay5wcmljZSk7XHJcbiAgICAgICAgaWYgKHN0ay5wcmljZUhpc3RvcnkubGVuZ3RoID4gbWF4VGlja0hpc3RvcnkpIC8vIExpbWl0IHRoZSByb2xsaW5nIHdpbmRvdyBzaXplXHJcbiAgICAgICAgICAgIHN0ay5wcmljZUhpc3Rvcnkuc3BsaWNlKG1heFRpY2tIaXN0b3J5LCAxKTtcclxuICAgICAgICAvLyBWb2xhdGlsaXR5IGlzIGVhc3kgLSB0aGUgbGFyZ2VzdCBvYnNlcnZlZCAlIG1vdmVtZW50IGluIGEgc2luZ2xlIHRpY2tcclxuICAgICAgICBpZiAoIWhhczRzKSBzdGsudm9sID0gc3RrLnByaWNlSGlzdG9yeS5yZWR1Y2UoKG1heCwgcHJpY2UsIGlkeCkgPT4gTWF0aC5tYXgobWF4LCBpZHggPT0gMCA/IDAgOiBNYXRoLmFicyhzdGsucHJpY2VIaXN0b3J5W2lkeCAtIDFdIC0gcHJpY2UpIC8gcHJpY2UpLCAwKTtcclxuICAgICAgICAvLyBXZSB3YW50IHN0b2NrcyB0aGF0IGhhdmUgdGhlIGJlc3QgZXhwZWN0ZWQgcmV0dXJuLCBhdmVyYWdlZCBvdmVyIGEgbG9uZyB3aW5kb3cgZm9yIGdyZWF0ZXIgcHJlY2lzaW9uLCBidXQgdGhlIGdhbWUgd2lsbCBvY2Nhc2lvbmFsbHkgaW52ZXJ0IHByb2JhYmlsaXRpZXNcclxuICAgICAgICAvLyAoNDUlIGNoYW5jZSBldmVyeSA3NSB1cGRhdGVzKSwgc28gd2UgYWxzbyBjb21wdXRlIGEgbmVhci10ZXJtIGZvcmVjYXN0IHdpbmRvdyB0byBhbGxvdyBmb3IgZWFybHktZGV0ZWN0aW9uIG9mIGludmVyc2lvbnMgc28gd2UgY2FuIGRpdGNoIG91ciBwb3NpdGlvbi5cclxuICAgICAgICBzdGsubmVhclRlcm1Gb3JlY2FzdCA9IGZvcmVjYXN0KHN0ay5wcmljZUhpc3Rvcnkuc2xpY2UoMCwgbmVhclRlcm1Gb3JlY2FzdFdpbmRvd0xlbmd0aCkpO1xyXG4gICAgICAgIGxldCBwcmVOZWFyVGVybVdpbmRvd1Byb2IgPSBmb3JlY2FzdChzdGsucHJpY2VIaXN0b3J5LnNsaWNlKG5lYXJUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGgsIG5lYXJUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGggKyBtYXJrZXRDeWNsZUxlbmd0aCkpOyAvLyBVc2VkIHRvIGRldGVjdCB0aGUgcHJvYmFiaWxpdHkgYmVmb3JlIHRoZSBwb3RlbnRpYWwgaW52ZXJzaW9uIGV2ZW50LlxyXG4gICAgICAgIC8vIERldGVjdCB3aGV0aGVyIGl0IGFwcGVhcnMgYXMgdGhvdWdoIHRoZSBwcm9iYWJpbGl0eSBvZiB0aGlzIHN0b2NrIGhhcyByZWNlbnRseSB1bmRlcmdvbmUgYW4gaW52ZXJzaW9uIChpLmUuIHByb2IgPT4gMSAtIHByb2IpXHJcbiAgICAgICAgc3RrLnBvc3NpYmxlSW52ZXJzaW9uRGV0ZWN0ZWQgPSBoYXM0cyA/IGRldGVjdEludmVyc2lvbihzdGsucHJvYiwgc3RrLmxhc3RUaWNrUHJvYmFiaWxpdHkgfHwgc3RrLnByb2IpIDogZGV0ZWN0SW52ZXJzaW9uKHByZU5lYXJUZXJtV2luZG93UHJvYiwgc3RrLm5lYXJUZXJtRm9yZWNhc3QpO1xyXG4gICAgICAgIHN0ay5sYXN0VGlja1Byb2JhYmlsaXR5ID0gc3RrLnByb2I7XHJcbiAgICAgICAgaWYgKHN0ay5wb3NzaWJsZUludmVyc2lvbkRldGVjdGVkKSBpbnZlcnNpb25zRGV0ZWN0ZWQucHVzaChzdGspO1xyXG4gICAgfVxyXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgb3VyIGF1dG8tZGV0ZWN0ZWQgXCJzdG9jayBtYXJrZXQgY3ljbGVcIiB0aW1pbmcgc2hvdWxkIGJlIGFkanVzdGVkIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgcG90ZW50aWFsIGludmVyc2lvbnMgb2JzZXJ2ZWRcclxuICAgIGxldCBzdW1tYXJ5ID0gXCJcIjtcclxuICAgIGlmIChpbnZlcnNpb25zRGV0ZWN0ZWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHN1bW1hcnkgKz0gYCR7aW52ZXJzaW9uc0RldGVjdGVkLmxlbmd0aH0gU3RvY2tzIGFwcGVhciB0byBiZSByZXZlcnNpbmcgdGhlaXIgb3V0bG9vazogJHtpbnZlcnNpb25zRGV0ZWN0ZWQubWFwKHMgPT4gcy5zeW0pLmpvaW4oJywgJyl9ICh0aHJlc2hvbGQ6ICR7aW52ZXJzaW9uQWdyZWVtZW50VGhyZXNob2xkfSlcXG5gO1xyXG4gICAgICAgIGlmIChpbnZlcnNpb25zRGV0ZWN0ZWQubGVuZ3RoID49IGludmVyc2lvbkFncmVlbWVudFRocmVzaG9sZCAmJiAoaGFzNHMgfHwgY3VycmVudEhpc3RvcnkgPj0gbWluVGlja0hpc3RvcnkpKSB7IC8vIFdlIGJlbGlldmUgd2UgaGF2ZSBkZXRlY3RlZCB0aGUgc3RvY2sgbWFya2V0IGN5Y2xlIVxyXG4gICAgICAgICAgICBjb25zdCBuZXdQcmVkaWN0ZWRDeWNsZVRpY2sgPSBoYXM0cyA/IDAgOiBuZWFyVGVybUZvcmVjYXN0V2luZG93TGVuZ3RoOyAvLyBCeSB0aGUgdGltZSB3ZSd2ZSBkZXRlY3RlZCBpdCwgd2UncmUgdGhpcyBtYW55IHRpY2tzIHBhc3QgdGhlIGN5Y2xlIHN0YXJ0XHJcbiAgICAgICAgICAgIGlmIChkZXRlY3RlZEN5Y2xlVGljayAhPSBuZXdQcmVkaWN0ZWRDeWNsZVRpY2spXHJcbiAgICAgICAgICAgICAgICBsb2cobnMsIGBUaHJlc2hvbGQgZm9yIGNoYW5naW5nIHByZWRpY3RlZCBtYXJrZXQgY3ljbGUgbWV0ICgke2ludmVyc2lvbnNEZXRlY3RlZC5sZW5ndGh9ID49ICR7aW52ZXJzaW9uQWdyZWVtZW50VGhyZXNob2xkfSkuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBDaGFuZ2luZyBjdXJyZW50IG1hcmtldCB0aWNrIGZyb20gJHtkZXRlY3RlZEN5Y2xlVGlja30gdG8gJHtuZXdQcmVkaWN0ZWRDeWNsZVRpY2t9LmApO1xyXG4gICAgICAgICAgICBtYXJrZXRDeWNsZURldGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZGV0ZWN0ZWRDeWNsZVRpY2sgPSBuZXdQcmVkaWN0ZWRDeWNsZVRpY2s7XHJcbiAgICAgICAgICAgIC8vIERvbid0IGFkanVzdCB0aGlzIGluIHRoZSBmdXR1cmUgdW5sZXNzIHdlIHNlZSBhbm90aGVyIGRheSB3aXRoIGFzIG11Y2ggb3IgZXZlbiBtb3JlIGFncmVlbWVudCAoY2FwcGVkIGF0IDE0LCBpdCBzZWVtcyBzb21ldGltZXMgb3VyIGN5Y2xlcyBnZXQgb3V0IG9mIHN5bmMgd2l0aFxyXG4gICAgICAgICAgICAvLyBhY3R1YWwgY3ljbGVzIGFuZCB3ZSBuZWVkIHRvIHJlc2V0IG91ciBjbG9jayBldmVuIGFmdGVyIHByZXZpb3VzbHkgZGV0ZXJtaW5pbmcgdGhlIGN5Y2xlIHdpdGggZ3JlYXQgY2VydGFpbnR5LilcclxuICAgICAgICAgICAgaW52ZXJzaW9uQWdyZWVtZW50VGhyZXNob2xkID0gTWF0aC5tYXgoMTQsIGludmVyc2lvbnNEZXRlY3RlZC5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEFjdCBvbiBhbnkgaW52ZXJzaW9ucyAoaWYgdHJ1c3RlZCksIGNvbXB1dGUgdGhlIHByb2JhYmlsaXR5LCBhbmQgcHJlcGFyZSB0aGUgc3RvY2sgc3VtbWFyeVxyXG4gICAgZm9yIChjb25zdCBzdGsgb2YgYWxsU3RvY2tzKSB7XHJcbiAgICAgICAgLy8gRG9uJ3QgXCJ0cnVzdFwiIChhY3Qgb24pIGEgZGV0ZWN0ZWQgaW52ZXJzaW9uIHVubGVzcyBpdCdzIG5lYXIgdGhlIHRpbWUgd2hlbiB3ZSdyZSBjYXBhYmxlIG9mIGRldGVjdGluZyBtYXJrZXQgY3ljbGUgc3RhcnQuIEF2b2lkcyBtb3N0IGZhbHNlLXBvc2l0aXZlcy5cclxuICAgICAgICBpZiAoc3RrLnBvc3NpYmxlSW52ZXJzaW9uRGV0ZWN0ZWQgJiYgKGhhczRzICYmIGRldGVjdGVkQ3ljbGVUaWNrID09IDAgfHxcclxuICAgICAgICAgICAgKCFoYXM0cyAmJiAoZGV0ZWN0ZWRDeWNsZVRpY2sgPj0gbmVhclRlcm1Gb3JlY2FzdFdpbmRvd0xlbmd0aCAvIDIpICYmIChkZXRlY3RlZEN5Y2xlVGljayA8PSBuZWFyVGVybUZvcmVjYXN0V2luZG93TGVuZ3RoICsgaW52ZXJzaW9uTGFnVG9sZXJhbmNlKSkpKVxyXG4gICAgICAgICAgICBzdGsubGFzdEludmVyc2lvbiA9IGRldGVjdGVkQ3ljbGVUaWNrOyAvLyBJZiB3ZSBcInRydXN0XCIgYSBwcm9iYWJpbGl0eSBpbnZlcnNpb24gaGFzIG9jY3VycmVkLCBwcm9iYWJpbGl0eSB3aWxsIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gb25seSBoaXN0b3J5IHNpbmNlIHRoZSBsYXN0IGludmVyc2lvbi5cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHN0ay5sYXN0SW52ZXJzaW9uKys7XHJcbiAgICAgICAgLy8gT25seSB0YWtlIHRoZSBzdG9jayBoaXN0b3J5IHNpbmNlIGFmdGVyIHRoZSBsYXN0IGludmVyc2lvbiB0byBjb21wdXRlIHRoZSBwcm9iYWJpbGl0eSBvZiB0aGUgc3RvY2suXHJcbiAgICAgICAgY29uc3QgcHJvYldpbmRvd0xlbmd0aCA9IE1hdGgubWluKGxvbmdUZXJtRm9yZWNhc3RXaW5kb3dMZW5ndGgsIHN0ay5sYXN0SW52ZXJzaW9uKTtcclxuICAgICAgICBzdGsubG9uZ1Rlcm1Gb3JlY2FzdCA9IGZvcmVjYXN0KHN0ay5wcmljZUhpc3Rvcnkuc2xpY2UoMCwgcHJvYldpbmRvd0xlbmd0aCkpO1xyXG4gICAgICAgIGlmICghaGFzNHMpIHtcclxuICAgICAgICAgICAgc3RrLnByb2IgPSBzdGsubG9uZ1Rlcm1Gb3JlY2FzdDtcclxuICAgICAgICAgICAgc3RrLnByb2JTdGREZXYgPSBNYXRoLnNxcnQoKHN0ay5wcm9iICogKDEgLSBzdGsucHJvYikpIC8gcHJvYldpbmRvd0xlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNpZ25hbFN0cmVuZ3RoID0gMSArIChzdGsuYnVsbGlzaCgpID8gKHN0ay5uZWFyVGVybUZvcmVjYXN0ID4gc3RrLnByb2IgPyAxIDogMCkgKyAoc3RrLnByb2IgPiAwLjggPyAxIDogMCkgOiAoc3RrLm5lYXJUZXJtRm9yZWNhc3QgPCBzdGsucHJvYiA/IDEgOiAwKSArIChzdGsucHJvYiA8IDAuMiA/IDEgOiAwKSk7XHJcbiAgICAgICAgaWYgKHByZXBTdW1tYXJ5KSB7IC8vIEV4YW1wbGU6IEFFUk8gICsrICAgUHJvYjogNTQlICh0NTE6IDU0JSwgdDEwOiA2NyUpIHRMYXN04oeEOjE5MCBWb2w6MC42NDAlIEVSOiAyLjc3OEJQIFNwcmVhZDoxLjc4NCUgdHRQcm9maXQ6IDY1IFBvczogMTQuN00gbG9uZyAgKGhlbGQgMTg5IHRpY2tzKVxyXG4gICAgICAgICAgICBzdGsuZGVidWdMb2cgPSBgJHtzdGsuc3ltLnBhZEVuZCg1LCAnwqAnKX0gJHsoc3RrLmJ1bGxpc2goKSA/ICcrJyA6ICctJykucmVwZWF0KHNpZ25hbFN0cmVuZ3RoKS5wYWRFbmQoMyl9IGAgK1xyXG4gICAgICAgICAgICAgICAgYFByb2I6JHsoc3RrLnByb2IgKiAxMDApLnRvRml4ZWQoMCkucGFkU3RhcnQoMyl9JSAodCR7cHJvYldpbmRvd0xlbmd0aC50b0ZpeGVkKDApLnBhZFN0YXJ0KDIpfTokeyhzdGsubG9uZ1Rlcm1Gb3JlY2FzdCAqIDEwMCkudG9GaXhlZCgwKS5wYWRTdGFydCgzKX0lLCBgICtcclxuICAgICAgICAgICAgICAgIGB0JHtNYXRoLm1pbihzdGsucHJpY2VIaXN0b3J5Lmxlbmd0aCwgbmVhclRlcm1Gb3JlY2FzdFdpbmRvd0xlbmd0aCkudG9GaXhlZCgwKS5wYWRTdGFydCgyKX06JHsoc3RrLm5lYXJUZXJtRm9yZWNhc3QgKiAxMDApLnRvRml4ZWQoMCkucGFkU3RhcnQoMyl9JSkgYCArXHJcbiAgICAgICAgICAgICAgICBgdExhc3Tih4Q6JHsoc3RrLmxhc3RJbnZlcnNpb24gKyAxKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDMpfSBWb2w6JHsoc3RrLnZvbCAqIDEwMCkudG9GaXhlZCgyKX0lIEVSOiR7Zm9ybWF0QlAoc3RrLmV4cGVjdGVkUmV0dXJuKCkpLnBhZFN0YXJ0KDgpfSBgICtcclxuICAgICAgICAgICAgICAgIGBTcHJlYWQ6JHsoc3RrLnNwcmVhZF9wY3QgKiAxMDApLnRvRml4ZWQoMil9JSB0dFByb2ZpdDoke3N0ay5ibGFja291dFdpbmRvdygpLnRvRml4ZWQoMCkucGFkU3RhcnQoMyl9YDtcclxuICAgICAgICAgICAgaWYgKHN0ay5vd25lZCgpKSBzdGsuZGVidWdMb2cgKz0gYCBQb3M6ICR7Zm9ybWF0TnVtYmVyU2hvcnQoc3RrLm93bmVkU2hhcmVzKCksIDMsIDEpfSAoJHtzdGsub3duZWRTaGFyZXMoKSA9PSBzdGsubWF4U2hhcmVzID8gJ21heCcgOlxyXG4gICAgICAgICAgICAgICAgKCgxMDAgKiBzdGsub3duZWRTaGFyZXMoKSAvIHN0ay5tYXhTaGFyZXMpLnRvRml4ZWQoMCkucGFkU3RhcnQoMikgKyAnJScpfSkgJHtzdGsuc2hhcmVzTG9uZyA+IDAgPyAnbG9uZyAnIDogJ3Nob3J0J30gKGhlbGQgJHtzdGsudGlja3NIZWxkfSB0aWNrcylgO1xyXG4gICAgICAgICAgICBpZiAoc3RrLnBvc3NpYmxlSW52ZXJzaW9uRGV0ZWN0ZWQpIHN0ay5kZWJ1Z0xvZyArPSAnIOKHhOKHhOKHhCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gUHJpbnQgYSBzdW1tYXJ5IG9mIHN0b2NrcyBhcyBvZiB0aGlzIG1vc3QgcmVjZW50IHRpY2sgKGlmIGVuYWJsZWQpXHJcbiAgICBpZiAocHJlcFN1bW1hcnkpIHtcclxuICAgICAgICBzdW1tYXJ5ICs9IGBNYXJrZXQgZGF5ICR7ZGV0ZWN0ZWRDeWNsZVRpY2sgKyAxfSR7bWFya2V0Q3ljbGVEZXRlY3RlZCA/ICcnIDogJz8nfSBvZiAke21hcmtldEN5Y2xlTGVuZ3RofSAoJHttYXJrZXRDeWNsZURldGVjdGVkID8gKDEwMCAqIGludmVyc2lvbkFncmVlbWVudFRocmVzaG9sZCAvIDE5KS50b1ByZWNpc2lvbigyKSA6ICcwJ30lIGNlcnRhaW4pIGAgK1xyXG4gICAgICAgICAgICBgQ3VycmVudCBTdG9jayBTdW1tYXJ5IGFuZCBQcmUtNFMgRm9yZWNhc3RzIChieSBiZXN0IHBheW9mZi10aW1lKTpcXG5gICsgYWxsU3RvY2tzLnNvcnQocHVyY2hhc2VPcmRlcikubWFwKHMgPT4gcy5kZWJ1Z0xvZykuam9pbihcIlxcblwiKVxyXG4gICAgICAgIGlmIChzaG93TWFya2V0U3VtbWFyeSkgYXdhaXQgdXBkYXRlRm9yZWNhc3RGaWxlKG5zLCBzdW1tYXJ5KTsgZWxzZSBsb2cobnMsIHN1bW1hcnkpO1xyXG4gICAgfVxyXG4gICAgLy8gV3JpdGUgb3V0IGEgZmlsZSBvZiBzdG9jayBwcm9iYWJpbGl0aWVzIHNvIHRoYXQgb3RoZXIgc2NyaXB0cyBjYW4gbWFrZSB1c2Ugb2YgdGhpcyAoZS5nLiBoYWNrIG9yY2hlc3RyYXRvciBjYW4gbWFuaXB1bGF0ZSB0aGUgc3RvY2sgbWFya2V0KVxyXG4gICAgYXdhaXQgbnMud3JpdGUoJy9UZW1wL3N0b2NrLXByb2JhYmlsaXRpZXMudHh0JywgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmZyb21FbnRyaWVzKFxyXG4gICAgICAgIGFsbFN0b2Nrcy5tYXAoc3RrID0+IFtzdGsuc3ltLCB7cHJvYjogc3RrLnByb2IsIHNoYXJlc0xvbmc6IHN0ay5zaGFyZXNMb25nLCBzaGFyZXNTaG9ydDogc3RrLnNoYXJlc1Nob3J0fV0pKSksIFwid1wiKTtcclxufVxyXG5cclxuLy8gSGVscGVycyB0byBkaXNwbGF5IHRoZSBzdG9jayBtYXJrZXQgc3VtbWFyeSBpbiBhIHNlcGFyYXRlIHdpbmRvdy5cclxubGV0IHN1bW1hcnlGaWxlID0gJy9UZW1wL3N0b2NrbWFya2V0LXN1bW1hcnkudHh0JztcclxubGV0IHVwZGF0ZUZvcmVjYXN0RmlsZSA9IGFzeW5jIChucywgc3VtbWFyeSkgPT4gYXdhaXQgbnMud3JpdGUoc3VtbWFyeUZpbGUsIHN1bW1hcnksICd3Jyk7XHJcbmxldCBsYXVuY2hTdW1tYXJ5VGFpbCA9IGFzeW5jIG5zID0+IHtcclxuICAgIGxldCBzdW1tYXJ5VGFpbFNjcmlwdCA9IHN1bW1hcnlGaWxlLnJlcGxhY2UoJy50eHQnLCAnLXRhaWwuanMnKTtcclxuICAgIGlmIChhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucywgYG5zLnNjcmlwdFJ1bm5pbmcoJyR7c3VtbWFyeVRhaWxTY3JpcHR9JywgbnMuZ2V0SG9zdG5hbWUoKSlgLCAnL1RlbXAvc3RvY2ttYXJrZXQtc3VtbWFyeS1pcy1ydW5uaW5nLnR4dCcpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vYXdhaXQgZ2V0TnNEYXRhVGhyb3VnaEZpbGUobnMsIGBucy5zY3JpcHRLaWxsKCcke3N1bW1hcnlUYWlsU2NyaXB0fScsIG5zLmdldEhvc3RuYW1lKCkpYCwgc3VtbWFyeVRhaWxTY3JpcHQucmVwbGFjZSgnLmpzJywgJy1raWxsLmpzJykpOyAvLyBPbmx5IG5lZWRlZCBpZiB3ZSdyZSBjaGFuZ2luZyB0aGUgc2NyaXB0IGJlbG93XHJcbiAgICBhd2FpdCBydW5Db21tYW5kKG5zLCBgbnMuZGlzYWJsZUxvZygnc2xlZXAnKTsgbnMudGFpbCgpOyBsZXQgbGFzdFJlYWQgPSAnJztcclxuICAgICAgICB3aGlsZSAodHJ1ZSkgeyBcclxuICAgICAgICAgICAgbGV0IHJlYWQgPSBucy5yZWFkKCcke3N1bW1hcnlGaWxlfScpO1xyXG4gICAgICAgICAgICBpZiAobGFzdFJlYWQgIT0gcmVhZCkgbnMucHJpbnQobGFzdFJlYWQgPSByZWFkKTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7IFxyXG4gICAgICAgIH1gLCBzdW1tYXJ5VGFpbFNjcmlwdCk7XHJcbn1cclxuXHJcbi8vIFJhbS1kb2RnaW5nIGhlbHBlcnMgdGhhdCBzcGF3biB0ZW1wb3Jhcnkgc2NyaXB0cyB0byBidXkvc2VsbCByYXRoZXIgdGhhbiBwYXkgMi41R0IgcmFtIHBlciB2YXJpYW50XHJcbmxldCBidXlTdG9ja1dyYXBwZXIgPSBhc3luYyAobnMsIHN5bSwgbnVtU2hhcmVzKSA9PiBhd2FpdCB0cmFuc2FjdFN0b2NrKG5zLCBzeW0sIG51bVNoYXJlcywgJ2J1eVN0b2NrJyk7IC8vIG5zLnN0b2NrLmJ1eVN0b2NrKHN5bSwgbnVtU2hhcmVzKTtcclxubGV0IGJ1eVNob3J0V3JhcHBlciA9IGFzeW5jIChucywgc3ltLCBudW1TaGFyZXMpID0+IGF3YWl0IHRyYW5zYWN0U3RvY2sobnMsIHN5bSwgbnVtU2hhcmVzLCAnYnV5U2hvcnQnKTsgLy8gbnMuc3RvY2suYnV5U2hvcnQoc3ltLCBudW1TaGFyZXMpO1xyXG5sZXQgc2VsbFN0b2NrV3JhcHBlciA9IGFzeW5jIChucywgc3ltLCBudW1TaGFyZXMpID0+IGF3YWl0IHRyYW5zYWN0U3RvY2sobnMsIHN5bSwgbnVtU2hhcmVzLCAnc2VsbFN0b2NrJyk7IC8vIG5zLnN0b2NrLnNlbGxTdG9jayhzeW0sIG51bVNoYXJlcyk7XHJcbmxldCBzZWxsU2hvcnRXcmFwcGVyID0gYXN5bmMgKG5zLCBzeW0sIG51bVNoYXJlcykgPT4gYXdhaXQgdHJhbnNhY3RTdG9jayhucywgc3ltLCBudW1TaGFyZXMsICdzZWxsU2hvcnQnKTsgLy8gbnMuc3RvY2suc2VsbFNob3J0KHN5bSwgbnVtU2hhcmVzKTtcclxubGV0IHRyYW5zYWN0U3RvY2sgPSBhc3luYyAobnMsIHN5bSwgbnVtU2hhcmVzLCBhY3Rpb24pID0+XHJcbiAgICBhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucywgYG5zLnN0b2NrLiR7YWN0aW9ufShucy5hcmdzWzBdLCBucy5hcmdzWzFdKWAsIG51bGwsIFtzeW0sIG51bVNoYXJlc10pO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zXHJcbiAqIEF1dG9tYXRpY2FsbHkgYnV5cyBlaXRoZXIgYSBzaG9ydCBvciBsb25nIHBvc2l0aW9uIGRlcGVuZGluZyBvbiB0aGUgb3V0bG9vayBvZiB0aGUgc3RvY2suICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRvQnV5KG5zLCBzdGssIHNoYXJlc1RvQnV5KSB7XHJcbiAgICAvLyBXZSBpbmNsdWRlIC0yKmNvbW1pc3Npb24gaW4gdGhlIFwiaG9sZGluZ3MgdmFsdWVcIiBvZiBvdXIgc3RvY2ssIGJ1dCBpZiB3ZSBtYWtlIHJlcGVhdGVkIHB1cmNoYXNlcyBvZiB0aGUgc2FtZSBzdG9jaywgd2UgaGF2ZSB0byB0cmFja1xyXG4gICAgLy8gdGhlIGFkZGl0aW9uYWwgY29tbWlzc2lvbiBzb21ld2hlcmUuIFNvIG9ubHkgc3VidHJhY3QgaXQgZnJvbSBvdXIgcnVubmluZyBwcm9maXQgaWYgdGhpcyBpc24ndCBvdXIgZmlyc3QgcHVyY2hhc2Ugb2YgdGhpcyBzeW1ib2xcclxuICAgIGxldCBwcmljZSA9IDA7IC8vcHJpY2Ugd2Fzbid0IGRlZmluZWQgeWV0LlxyXG4gICAgaWYgKHN0ay5vd25lZCgpKVxyXG4gICAgICAgIHRvdGFsUHJvZml0IC09IGNvbW1pc3Npb247XHJcbiAgICBsZXQgbG9uZyA9IHN0ay5idWxsaXNoKCk7XHJcbiAgICBsZXQgZXhwZWN0ZWRQcmljZSA9IGxvbmcgPyBzdGsuYXNrX3ByaWNlIDogc3RrLmJpZF9wcmljZTsgLy8gRGVwZW5kcyBvbiB3aGV0aGVyIHdlIHdpbGwgYmUgYnV5aW5nIGEgbG9uZyBvciBzaG9ydCBwb3NpdGlvblxyXG4gICAgbG9nKG5zLCBgSU5GTzogJHtsb25nID8gJ0J1eWluZyAgJyA6ICdTaG9ydGluZyd9ICR7Zm9ybWF0TnVtYmVyU2hvcnQoc2hhcmVzVG9CdXksIDMsIDMpLnBhZFN0YXJ0KDUpfSAoYCArXHJcbiAgICAgICAgYCR7c3RrLm1heFNoYXJlcyA9PSBzaGFyZXNUb0J1eSArIHN0ay5vd25lZFNoYXJlcygpID8gJ0BtYXggc2hhcmVzJyA6IGAke2Zvcm1hdE51bWJlclNob3J0KHNoYXJlc1RvQnV5ICsgc3RrLm93bmVkU2hhcmVzKCksIDMsIDMpLnBhZFN0YXJ0KDUpfS8ke2Zvcm1hdE51bWJlclNob3J0KHN0ay5tYXhTaGFyZXMsIDMsIDMpLnBhZFN0YXJ0KDUpfWB9KSBgICtcclxuICAgICAgICBgJHtzdGsuc3ltLnBhZEVuZCg1KX0gQCAke2Zvcm1hdE1vbmV5KGV4cGVjdGVkUHJpY2UpLnBhZFN0YXJ0KDkpfSBmb3IgJHtmb3JtYXRNb25leShzaGFyZXNUb0J1eSAqIGV4cGVjdGVkUHJpY2UpLnBhZFN0YXJ0KDkpfSAoU3ByZWFkOiR7KHN0ay5zcHJlYWRfcGN0ICogMTAwKS50b0ZpeGVkKDIpfSUgYCArXHJcbiAgICAgICAgYEVSOiR7Zm9ybWF0QlAoc3RrLmV4cGVjdGVkUmV0dXJuKCkpLnBhZFN0YXJ0KDgpfSkgVGlja3MgdG8gUHJvZml0OiAke3N0ay50aW1lVG9Db3ZlclRoZVNwcmVhZCgpLnRvRml4ZWQoMil9YCwgbm9pc3ksICdpbmZvJyk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHByaWNlID0gbW9jayA/IGV4cGVjdGVkUHJpY2UgOiBOdW1iZXIoYXdhaXQgdHJhbnNhY3RTdG9jayhucywgc3RrLnN5bSwgc2hhcmVzVG9CdXksIGxvbmcgPyAnYnV5U3RvY2snIDogJ2J1eVNob3J0JykpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgaWYgKGxvbmcpIHRocm93IGVycjtcclxuICAgICAgICBkaXNhYmxlU2hvcnRzID0gdHJ1ZTtcclxuICAgICAgICBsb2cobnMsIGBXQVJOOiBGYWlsZWQgdG8gc2hvcnQgJHtzdGsuc3ltfSAoU2hvcnRzIG5vdCBhdmFpbGFibGU/KS4gRGlzYWJsaW5nIHNob3J0cy4uLmAsIHRydWUsICd3YXJuaW5nJyk7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvLyBUaGUgcmVzdCBvZiB0aGlzIHdvcmsgaXMgZm9yIHRyb3VibGVzaG9vdGluZyAvIG1vY2stbW9kZSBwdXJwb3Nlc1xyXG4gICAgaWYgKHByaWNlID09IDApIHtcclxuICAgICAgICBjb25zdCBwbGF5ZXJNb25leSA9IChhd2FpdCBnZXRQbGF5ZXJJbmZvKG5zKSkubW9uZXk7XHJcbiAgICAgICAgaWYgKHBsYXllck1vbmV5IDwgc2hhcmVzVG9CdXkgKiBleHBlY3RlZFByaWNlKVxyXG4gICAgICAgICAgICBsb2cobnMsIGBXQVJOOiBGYWlsZWQgdG8gJHtsb25nID8gJ2J1eScgOiAnc2hvcnQnfSAke3N0ay5zeW19IGJlY2F1c2UgbW9uZXkganVzdCByZWNlbnRseSBkcm9wcGVkIHRvICR7Zm9ybWF0TW9uZXkocGxheWVyTW9uZXkpfSBhbmQgd2UgY2FuIG5vIGxvbmdlciBhZmZvcmQgaXQuYCwgbm9pc3kpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgbG9nKG5zLCBgRVJST1I6IEZhaWxlZCB0byAke2xvbmcgPyAnYnV5JyA6ICdzaG9ydCd9ICR7c3RrLnN5bX0gQCAke2Zvcm1hdE1vbmV5KGV4cGVjdGVkUHJpY2UpfSAoMCB3YXMgcmV0dXJuZWQpIGRlc3BpdGUgaGF2aW5nICR7Zm9ybWF0TW9uZXkocGxheWVyTW9uZXkpfS5gLCB0cnVlLCAnZXJyb3InKTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0gZWxzZSBpZiAocHJpY2UgIT0gZXhwZWN0ZWRQcmljZSkge1xyXG4gICAgICAgIGxvZyhucywgYFdBUk5JTkc6ICR7bG9uZyA/ICdCb3VnaHQnIDogJ1Nob3J0ZWQnfSAke3N0ay5zeW19IEAgJHtmb3JtYXRNb25leShwcmljZSl9IGJ1dCBleHBlY3RlZCAke2Zvcm1hdE1vbmV5KGV4cGVjdGVkUHJpY2UpfSAoc3ByZWFkOiAke2Zvcm1hdE1vbmV5KHN0ay5zcHJlYWQpfSlgLCBmYWxzZSwgJ3dhcm5pbmcnKTtcclxuICAgICAgICBwcmljZSA9IGV4cGVjdGVkUHJpY2U7IC8vIEtub3duIEJpdGJ1cm5lciBidWcgZm9yIG5vdywgc2hvcnQgcmV0dXJucyBcInByaWNlXCIgaW5zdGVhZCBvZiBcImJpZF9wcmljZVwiLiBDb3JyZWN0IHRoaXMgc28gcnVubmluZyBwcm9maXQgY2FsY3MgYXJlIGNvcnJlY3QuXHJcbiAgICB9XHJcbiAgICBpZiAobW9jayAmJiBsb25nKSBzdGsuYm91Z2h0UHJpY2UgPSAoc3RrLmJvdWdodFByaWNlICogc3RrLnNoYXJlc0xvbmcgKyBwcmljZSAqIHNoYXJlc1RvQnV5KSAvIChzdGsuc2hhcmVzTG9uZyArIHNoYXJlc1RvQnV5KTtcclxuICAgIGlmIChtb2NrICYmICFsb25nKSBzdGsuYm91Z2h0UHJpY2VTaG9ydCA9IChzdGsuYm91Z2h0UHJpY2VTaG9ydCAqIHN0ay5zaGFyZXNTaG9ydCArIHByaWNlICogc2hhcmVzVG9CdXkpIC8gKHN0ay5zaGFyZXNTaG9ydCArIHNoYXJlc1RvQnV5KTtcclxuICAgIGlmIChsb25nKSBzdGsuc2hhcmVzTG9uZyArPSBzaGFyZXNUb0J1eTsgZWxzZSBzdGsuc2hhcmVzU2hvcnQgKz0gc2hhcmVzVG9CdXk7IC8vIE1haW50YWluZWQgZm9yIG1vY2sgbW9kZSwgb3RoZXJ3aXNlLCByZWR1bmRhbnQgKG92ZXJ3cml0dGVuIGF0IG5leHQgcmVmcmVzaClcclxuICAgIHJldHVybiBzaGFyZXNUb0J1eSAqIHByaWNlICsgY29tbWlzc2lvbjsgLy8gUmV0dXJuIHRoZSBhbW91bnQgc3BlbnQgb24gdGhlIHRyYW5zYWN0aW9uIHNvIGl0IGNhbiBiZSBzdWJ0cmFjdGVkIGZyb20gb3VyIGNhc2ggb24gaGFuZFxyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogU2VsbCBvdXIgY3VycmVudCBwb3NpdGlvbiBpbiB0aGlzIHN0b2NrLiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkb1NlbGxBbGwobnMsIHN0aykge1xyXG4gICAgbGV0IGxvbmcgPSBzdGsuc2hhcmVzTG9uZyA+IDA7XHJcbiAgICBpZiAobG9uZyAmJiBzdGsuc2hhcmVzU2hvcnQgPiAwKSAvLyBEZXRlY3QgYW55IGlzc3VlcyBoZXJlIC0gd2Ugc2hvdWxkIGFsd2F5cyBzZWxsIG9uZSBiZWZvcmUgYnV5aW5nIHRoZSBvdGhlci5cclxuICAgICAgICBsb2cobnMsIGBFUlJPUjogU29tZWhvdyBlbmRlZCB1cCBib3RoICR7c3RrLnNoYXJlc1Nob3J0fSBzaG9ydCBhbmQgJHtzdGsuc2hhcmVzTG9uZ30gbG9uZyBvbiAke3N0ay5zeW19YCwgdHJ1ZSwgJ2Vycm9yJyk7XHJcbiAgICBsZXQgZXhwZWN0ZWRQcmljZSA9IGxvbmcgPyBzdGsuYmlkX3ByaWNlIDogc3RrLmFza19wcmljZTsgLy8gRGVwZW5kcyBvbiB3aGV0aGVyIHdlIHdpbGwgYmUgc2VsbGluZyBhIGxvbmcgb3Igc2hvcnQgcG9zaXRpb25cclxuICAgIGxldCBzaGFyZXNTb2xkID0gbG9uZyA/IHN0ay5zaGFyZXNMb25nIDogc3RrLnNoYXJlc1Nob3J0O1xyXG4gICAgbGV0IHByaWNlID0gbW9jayA/IGV4cGVjdGVkUHJpY2UgOiBhd2FpdCB0cmFuc2FjdFN0b2NrKG5zLCBzdGsuc3ltLCBzaGFyZXNTb2xkLCBsb25nID8gJ3NlbGxTdG9jaycgOiAnc2VsbFNob3J0Jyk7XHJcbiAgICBjb25zdCBwcm9maXQgPSAobG9uZyA/IHN0ay5zaGFyZXNMb25nICogKHByaWNlIC0gc3RrLmJvdWdodFByaWNlKSA6IHN0ay5zaGFyZXNTaG9ydCAqIChzdGsuYm91Z2h0UHJpY2VTaG9ydCAtIHByaWNlKSkgLSAyICogY29tbWlzc2lvbjtcclxuICAgIGxvZyhucywgYCR7cHJvZml0ID4gMCA/ICdTVUNDRVNTJyA6ICdXQVJOSU5HJ306IFNvbGQgYWxsICR7Zm9ybWF0TnVtYmVyU2hvcnQoc2hhcmVzU29sZCwgMywgMykucGFkU3RhcnQoNSl9ICR7c3RrLnN5bS5wYWRFbmQoNSl9ICR7bG9uZyA/ICcgbG9uZycgOiAnc2hvcnQnfSBwb3NpdGlvbnMgYCArXHJcbiAgICAgICAgYEAgJHtmb3JtYXRNb25leShwcmljZSkucGFkU3RhcnQoOSl9IGZvciBhIGAgKyAocHJvZml0ID4gMCA/IGBQUk9GSVQgb2YgJHtmb3JtYXRNb25leShwcm9maXQpLnBhZFN0YXJ0KDkpfWAgOiBgIExPU1MgIG9mICR7Zm9ybWF0TW9uZXkoLXByb2ZpdCkucGFkU3RhcnQoOSl9YCkgKyBgIGFmdGVyICR7c3RrLnRpY2tzSGVsZH0gdGlja3NgLFxyXG4gICAgICAgIG5vaXN5LCBub2lzeSA/IChwcm9maXQgPiAwID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJykgOiB1bmRlZmluZWQpO1xyXG4gICAgaWYgKHByaWNlID09IDApIHtcclxuICAgICAgICBsb2cobnMsIGBFUlJPUjogRmFpbGVkIHRvIHNlbGwgJHtzaGFyZXNTb2xkfSAke3N0ay5zeW19ICR7bG9uZyA/ICdzaGFyZXMnIDogJ3Nob3J0cyd9IEAgJHtmb3JtYXRNb25leShleHBlY3RlZFByaWNlKX0gLSAwIHdhcyByZXR1cm5lZC5gLCB0cnVlLCAnZXJyb3InKTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0gZWxzZSBpZiAocHJpY2UgIT0gZXhwZWN0ZWRQcmljZSkge1xyXG4gICAgICAgIGxvZyhucywgYFdBUk5JTkc6IFNvbGQgJHtzdGsuc3ltfSAke2xvbmcgPyAnc2hhcmVzJyA6ICdzaG9ydHMnfSBAICR7Zm9ybWF0TW9uZXkocHJpY2UpfSBidXQgZXhwZWN0ZWQgJHtmb3JtYXRNb25leShleHBlY3RlZFByaWNlKX0gKHNwcmVhZDogJHtmb3JtYXRNb25leShzdGsuc3ByZWFkKX0pYCwgZmFsc2UsICd3YXJuaW5nJyk7XHJcbiAgICAgICAgcHJpY2UgPSBleHBlY3RlZFByaWNlOyAvLyBLbm93biBCaXRidXJuZXIgYnVnIGZvciBub3csIHNlbGxTb3J0IHJldHVybnMgXCJwcmljZVwiIGluc3RlYWQgb2YgXCJhc2tfcHJpY2VcIi4gQ29ycmVjdCB0aGlzIHNvIHJ1bm5pbmcgcHJvZml0IGNhbGNzIGFyZSBjb3JyZWN0LlxyXG4gICAgfVxyXG4gICAgaWYgKGxvbmcpIHN0ay5zaGFyZXNMb25nIC09IHNoYXJlc1NvbGQ7IGVsc2Ugc3RrLnNoYXJlc1Nob3J0IC09IHNoYXJlc1NvbGQ7IC8vIE1haW50YWluZWQgZm9yIG1vY2sgbW9kZSwgb3RoZXJ3aXNlLCByZWR1bmRhbnQgKG92ZXJ3cml0dGVuIGF0IG5leHQgcmVmcmVzaClcclxuICAgIHRvdGFsUHJvZml0ICs9IHByb2ZpdDtcclxuICAgIHJldHVybiBwcmljZSAqIHNoYXJlc1NvbGQgLSBjb21taXNzaW9uOyAvLyBSZXR1cm4gdGhlIGFtb3VudCBvZiBtb25leSByZWNpZXZlZCBmcm9tIHRoZSB0cmFuc2FjdGlvblxyXG59XHJcblxyXG5sZXQgZm9ybWF0QlAgPSBmcmFjdGlvbiA9PiBmb3JtYXROdW1iZXJTaG9ydChmcmFjdGlvbiAqIDEwMCAqIDEwMCwgMywgMikgKyBcIuKAr0JQXCI7XHJcblxyXG4vKiogTG9nIC8gdHByaW50IC8gdG9hc3QgaGVscGVyLlxyXG4gKiBAcGFyYW0ge05TfSBucyAqL1xyXG5sZXQgbG9nID0gKG5zLCBtZXNzYWdlLCB0cHJpbnQgPSBmYWxzZSwgdG9hc3RTdHlsZSA9IFwiXCIpID0+IHtcclxuICAgIGlmIChtZXNzYWdlID09IGxhc3RMb2cpIHJldHVybjtcclxuICAgIG5zLnByaW50KG1lc3NhZ2UpO1xyXG4gICAgaWYgKHRwcmludCkgbnMudHByaW50KG1lc3NhZ2UpO1xyXG4gICAgaWYgKHRvYXN0U3R5bGUpIG5zLnRvYXN0KG1lc3NhZ2UsIHRvYXN0U3R5bGUpO1xyXG4gICAgcmV0dXJuIGxhc3RMb2cgPSBtZXNzYWdlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb1N0YXR1c1VwZGF0ZShucywgc3RvY2tzLCBteVN0b2NrcywgaHVkRWxlbWVudCA9IG51bGwpIHtcclxuICAgIGxldCBtYXhSZXR1cm5CUCA9IDEwMDAwICogTWF0aC5tYXgoLi4ubXlTdG9ja3MubWFwKHMgPT4gcy5hYnNSZXR1cm4oKSkpOyAvLyBUaGUgbGFyZ2VzdCByZXR1cm4gKGluIGJhc2lzIHBvaW50cykgaW4gb3VyIHBvcnRmb2xpb1xyXG4gICAgbGV0IG1pblJldHVybkJQID0gMTAwMDAgKiBNYXRoLm1pbiguLi5teVN0b2Nrcy5tYXAocyA9PiBzLmFic1JldHVybigpKSk7IC8vIFRoZSBzbWFsbGVzdCByZXR1cm4gKGluIGJhc2lzIHBvaW50cykgaW4gb3VyIHBvcnRmb2xpb1xyXG4gICAgbGV0IGVzdF9ob2xkaW5nc19jb3N0ID0gbXlTdG9ja3MucmVkdWNlKChzdW0sIHN0aykgPT4gc3VtICsgKHN0ay5vd25lZCgpID8gY29tbWlzc2lvbiA6IDApICtcclxuICAgICAgICBzdGsuc2hhcmVzTG9uZyAqIHN0ay5ib3VnaHRQcmljZSArIHN0ay5zaGFyZXNTaG9ydCAqIHN0ay5ib3VnaHRQcmljZVNob3J0LCAwKTtcclxuICAgIGxldCBsaXF1aWRhdGlvbl92YWx1ZSA9IG15U3RvY2tzLnJlZHVjZSgoc3VtLCBzdGspID0+IHN1bSAtIChzdGsub3duZWQoKSA/IGNvbW1pc3Npb24gOiAwKSArIHN0ay5wb3NpdGlvblZhbHVlKCksIDApO1xyXG4gICAgbGV0IHN0YXR1cyA9IGBMb25nICR7bXlTdG9ja3MuZmlsdGVyKHMgPT4gcy5zaGFyZXNMb25nID4gMCkubGVuZ3RofSwgU2hvcnQgJHtteVN0b2Nrcy5maWx0ZXIocyA9PiBzLnNoYXJlc1Nob3J0ID4gMCkubGVuZ3RofSBvZiAke3N0b2Nrcy5sZW5ndGh9IHN0b2NrcyBgICtcclxuICAgICAgICAobXlTdG9ja3MubGVuZ3RoID09IDAgPyAnJyA6IGAoRVIgJHttaW5SZXR1cm5CUC50b0ZpeGVkKDEpfS0ke21heFJldHVybkJQLnRvRml4ZWQoMSl9IEJQKSBgKSArXHJcbiAgICAgICAgYFByb2ZpdDogJHtmb3JtYXRNb25leSh0b3RhbFByb2ZpdCwgMyl9IEhvbGRpbmdzOiAke2Zvcm1hdE1vbmV5KGxpcXVpZGF0aW9uX3ZhbHVlLCAzKX0gKENvc3Q6ICR7Zm9ybWF0TW9uZXkoZXN0X2hvbGRpbmdzX2Nvc3QsIDMpfSkgYCArXHJcbiAgICAgICAgYE5ldDogJHtmb3JtYXRNb25leSh0b3RhbFByb2ZpdCArIGxpcXVpZGF0aW9uX3ZhbHVlIC0gZXN0X2hvbGRpbmdzX2Nvc3QsIDMpfWBcclxuICAgIGxvZyhucywgc3RhdHVzKTtcclxuICAgIGlmIChodWRFbGVtZW50KSBodWRFbGVtZW50LmlubmVyVGV4dCA9IGZvcm1hdE1vbmV5KGxpcXVpZGF0aW9uX3ZhbHVlLCA2LCAzKTtcclxufVxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5hc3luYyBmdW5jdGlvbiBsaXF1aWRhdGUobnMpIHtcclxuICAgIGFsbFN0b2NrU3ltYm9scyA/Pz0gYXdhaXQgZ2V0U3RvY2tTeW1ib2xzKG5zKTtcclxuICAgIGlmIChhbGxTdG9ja1N5bWJvbHMgPT0gbnVsbCkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGxpcXVpZGF0ZSwgbm8gQVBJIEFjY2Vzc1xyXG4gICAgbGV0IHRvdGFsU3RvY2tzID0gMCwgdG90YWxTaGFyZXNMb25nID0gMCwgdG90YWxTaGFyZXNTaG9ydCA9IDAsIHRvdGFsUmV2ZW51ZSA9IDA7XHJcbiAgICBjb25zdCBkaWN0UG9zaXRpb25zID0gbW9jayA/IG51bGwgOiBhd2FpdCBnZXRTdG9ja0luZm9EaWN0KG5zLCAnZ2V0UG9zaXRpb24nKTtcclxuICAgIGZvciAoY29uc3Qgc3ltIG9mIGFsbFN0b2NrU3ltYm9scykge1xyXG4gICAgICAgIHZhciBbc2hhcmVzTG9uZywgLCBzaGFyZXNTaG9ydCwgYXZnU2hvcnRDb3N0XSA9IGRpY3RQb3NpdGlvbnNbc3ltXTtcclxuICAgICAgICBpZiAoc2hhcmVzTG9uZyArIHNoYXJlc1Nob3J0ID09IDApIGNvbnRpbnVlO1xyXG4gICAgICAgIHRvdGFsU3RvY2tzKyssIHRvdGFsU2hhcmVzTG9uZyArPSBzaGFyZXNMb25nLCB0b3RhbFNoYXJlc1Nob3J0ICs9IHNoYXJlc1Nob3J0O1xyXG4gICAgICAgIGlmIChzaGFyZXNMb25nID4gMCkgdG90YWxSZXZlbnVlICs9IChhd2FpdCBzZWxsU3RvY2tXcmFwcGVyKG5zLCBzeW0sIHNoYXJlc0xvbmcpKSAqIHNoYXJlc0xvbmcgLSBjb21taXNzaW9uO1xyXG4gICAgICAgIGlmIChzaGFyZXNTaG9ydCA+IDApIHRvdGFsUmV2ZW51ZSArPSAoMiAqIGF2Z1Nob3J0Q29zdCAtIChhd2FpdCBzZWxsU2hvcnRXcmFwcGVyKG5zLCBzeW0sIHNoYXJlc1Nob3J0KSkpICogc2hhcmVzU2hvcnQgLSBjb21taXNzaW9uO1xyXG4gICAgfVxyXG4gICAgbG9nKG5zLCBgU29sZCAke3RvdGFsU2hhcmVzTG9uZy50b0xvY2FsZVN0cmluZygnZW4nKX0gbG9uZyBzaGFyZXMgYW5kICR7dG90YWxTaGFyZXNTaG9ydC50b0xvY2FsZVN0cmluZygnZW4nKX0gc2hvcnQgc2hhcmVzIGAgK1xyXG4gICAgICAgIGBpbiAke3RvdGFsU3RvY2tzfSBzdG9ja3MgZm9yICR7Zm9ybWF0TW9uZXkodG90YWxSZXZlbnVlLCAzKX1gLCB0cnVlLCAnc3VjY2VzcycpO1xyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbi8qKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyU3RhdHMgKiovXHJcbmFzeW5jIGZ1bmN0aW9uIHRyeUdldDRTQXBpKG5zLCBwbGF5ZXJTdGF0cywgYml0bm9kZU11bHRzLCBidWRnZXQpIHtcclxuICAgIGlmIChhd2FpdCBjaGVja0FjY2VzcyhucywgJ2hhczRTRGF0YVRJWEFQSScpKSByZXR1cm4gZmFsc2U7IC8vIE9ubHkgcmV0dXJuIHRydWUgaWYgd2UganVzdCBib3VnaHQgaXRcclxuICAgIGNvbnN0IGNvc3Q0c0RhdGEgPSAxRTkgKiBiaXRub2RlTXVsdHMuRm91clNpZ21hTWFya2V0RGF0YUNvc3Q7XHJcbiAgICBjb25zdCBjb3N0NHNBcGkgPSAyNUU5ICogYml0bm9kZU11bHRzLkZvdXJTaWdtYU1hcmtldERhdGFBcGlDb3N0O1xyXG4gICAgY29uc3QgaGFzNFMgPSBhd2FpdCBjaGVja0FjY2VzcyhucywgJ2hhczRTRGF0YScpO1xyXG4gICAgY29uc3QgdG90YWxDb3N0ID0gKGhhczRTID8gMCA6IGNvc3Q0c0RhdGEpICsgY29zdDRzQXBpO1xyXG4gICAgLy8gTGlxdWlkYXRlIHNoYXJlcyBpZiBpdCB3b3VsZCBhbGxvdyB1cyB0byBhZmZvcmQgNFMgQVBJIGRhdGFcclxuICAgIGlmICh0b3RhbENvc3QgPiBidWRnZXQpIC8qIE5lZWQgdG8gcmVzZXJ2ZSBzb21lIG1vbmV5IHRvIGludmVzdCAqL1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChwbGF5ZXJTdGF0cy5tb25leSA8IHRvdGFsQ29zdClcclxuICAgICAgICBhd2FpdCBsaXF1aWRhdGUobnMpO1xyXG4gICAgaWYgKCFoYXM0Uykge1xyXG4gICAgICAgIGlmIChhd2FpdCB0cnlCdXkobnMsICdwdXJjaGFzZTRTTWFya2V0RGF0YScpKVxyXG4gICAgICAgICAgICBsb2cobnMsIGBTVUNDRVNTOiBQdXJjaGFzZWQgNFNNYXJrZXREYXRhIGZvciAke2Zvcm1hdE1vbmV5KGNvc3Q0c0RhdGEpfSBgICtcclxuICAgICAgICAgICAgICAgIGAoQXQgJHtmb3JtYXREdXJhdGlvbihnZXRUaW1lSW5CaXRub2RlKCkpfSBpbnRvIEJpdE5vZGUpYCwgdHJ1ZSwgJ3N1Y2Nlc3MnKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGxvZyhucywgJ0VSUk9SIGF0dGVtcHRpbmcgdG8gcHVyY2hhc2UgNFNNYXJrZXREYXRhIScsIGZhbHNlLCAnZXJyb3InKTtcclxuICAgIH1cclxuICAgIGlmIChhd2FpdCB0cnlCdXkobnMsICdwdXJjaGFzZTRTTWFya2V0RGF0YVRpeEFwaScpKSB7XHJcbiAgICAgICAgbG9nKG5zLCBgU1VDQ0VTUzogUHVyY2hhc2VkIDRTTWFya2V0RGF0YVRpeEFwaSBmb3IgJHtmb3JtYXRNb25leShjb3N0NHNBcGkpfSBgICtcclxuICAgICAgICAgICAgYChBdCAke2Zvcm1hdER1cmF0aW9uKGdldFRpbWVJbkJpdG5vZGUoKSl9IGludG8gQml0Tm9kZSlgLCB0cnVlLCAnc3VjY2VzcycpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsb2cobnMsICdFUlJPUiBhdHRlbXB0aW5nIHRvIHB1cmNoYXNlIDRTTWFya2V0RGF0YVRpeEFwaSEnLCBmYWxzZSwgJ2Vycm9yJyk7XHJcbiAgICAgICAgaWYgKCEoNSBpbiBkaWN0U291cmNlRmlsZXMpKSB7IC8vIElmIHdlIGRvIG5vdCBoYXZlIGFjY2VzcyB0byBiaXRub2RlIG11bHRpcGxpZXJzLCBhc3N1bWUgdGhlIGNvc3QgaXMgZG91YmxlIGFuZCB0cnkgYWdhaW4gbGF0ZXJcclxuICAgICAgICAgICAgbG9nKG5zLCAnSU5GTzogQml0bm9kZSBtdWx0cyBhcmUgbm90IGF2YWlsYWJsZSAoU0Y1KSAtIGFzc3VtaW5nIGV2ZXJ5dGhpbmcgaXMgdHdpY2UgYXMgZXhwZW5zaXZlIGluIHRoZSBjdXJyZW50IGJpdG5vZGUuJyk7XHJcbiAgICAgICAgICAgIGJpdG5vZGVNdWx0cy5Gb3VyU2lnbWFNYXJrZXREYXRhQ29zdCAqPSAyO1xyXG4gICAgICAgICAgICBiaXRub2RlTXVsdHMuRm91clNpZ21hTWFya2V0RGF0YUFwaUNvc3QgKj0gMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBuc1xyXG4gKiBAcGFyYW0ge1wiaGFzV1NFQWNjb3VudFwifFwiaGFzVElYQVBJQWNjZXNzXCJ8XCJoYXM0U0RhdGFcInxcImhhczRTRGF0YVRJWEFQSVwifSBzdG9ja0ZuXHJcbiAqIEhlbHBlciB0byBjaGVjayBmb3Igb25lIG9mIHRoZSBzdG9jayBhY2Nlc3MgZnVuY3Rpb25zICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQWNjZXNzKG5zLCBzdG9ja0ZuKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0TnNEYXRhVGhyb3VnaEZpbGUobnMsIGBucy5zdG9jay4ke3N0b2NrRm59KClgKVxyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogQHBhcmFtIHtcInB1cmNoYXNlV3NlQWNjb3VudFwifFwicHVyY2hhc2VUaXhBcGlcInxcInB1cmNoYXNlNFNNYXJrZXREYXRhXCJ8XCJwdXJjaGFzZTRTTWFya2V0RGF0YVRpeEFwaVwifSBzdG9ja0ZuXHJcbiAqIEhlbHBlciB0byB0cnkgYW5kIGJ1eSBhIHN0b2NrIGFjY2Vzcy4gWWVzLCB0aGUgY29kZSBpcyB0aGUgc2FtZSBhcyBhYm92ZSwgYnV0IEkgd2FudGVkIHRvIGJlIGV4cGxpY2l0LiAqL1xyXG5hc3luYyBmdW5jdGlvbiB0cnlCdXkobnMsIHN0b2NrRm4pIHtcclxuICAgIHJldHVybiBhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucywgYG5zLnN0b2NrLiR7c3RvY2tGbn0oKWApXHJcbn1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBuc1xyXG4gKiBAcGFyYW0ge251bWJlcn0gYnVkZ2V0IC0gVGhlIGFtb3VudCB3ZSBhcmUgd2lsbGluZyB0byBzcGVuZCBvbiBXU0UgYW5kIEFQSSBhY2Nlc3NcclxuICogVHJpZXMgdG8gcHVyY2hhc2UgYWNjZXNzIHRvIHRoZSBzdG9jayBtYXJrZXQgKiovXHJcbmFzeW5jIGZ1bmN0aW9uIHRyeUdldFN0b2NrTWFya2V0QWNjZXNzKG5zLCBidWRnZXQpIHtcclxuICAgIGlmIChhd2FpdCBjaGVja0FjY2VzcyhucywgJ2hhc1RJWEFQSUFjY2VzcycpKSByZXR1cm4gdHJ1ZTsgLy8gQWxyZWFkeSBoYXZlIGFjY2Vzc1xyXG4gICAgY29uc3QgY29zdFdzZUFjY291bnQgPSAyMDBFNjtcclxuICAgIGNvbnN0IGNvc3RUaXhBcGkgPSA1RTk7XHJcbiAgICBjb25zdCBoYXNXU0UgPSBhd2FpdCBjaGVja0FjY2VzcyhucywgJ2hhc1dTRUFjY291bnQnKTtcclxuICAgIGNvbnN0IHRvdGFsQ29zdCA9IChoYXNXU0UgPyAwIDogY29zdFdzZUFjY291bnQpICsgY29zdFRpeEFwaTtcclxuICAgIGlmICh0b3RhbENvc3QgPiBidWRnZXQpIHJldHVybiBmYWxzZTtcclxuICAgIGlmICghaGFzV1NFKSB7XHJcbiAgICAgICAgaWYgKGF3YWl0IHRyeUJ1eShucywgJ3B1cmNoYXNlV3NlQWNjb3VudCcpKVxyXG4gICAgICAgICAgICBsb2cobnMsIGBTVUNDRVNTOiBQdXJjaGFzZWQgYSBXU0UgKHN0b2NrbWFya2V0KSBhY2NvdW50IGZvciAke2Zvcm1hdE1vbmV5KGNvc3RXc2VBY2NvdW50KX0gYCArXHJcbiAgICAgICAgICAgICAgICBgKEF0ICR7Zm9ybWF0RHVyYXRpb24oZ2V0VGltZUluQml0bm9kZSgpKX0gaW50byBCaXROb2RlKWAsIHRydWUsICdzdWNjZXNzJyk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBsb2cobnMsICdFUlJPUiBhdHRlbXB0aW5nIHRvIHB1cmNoYXNlIFdTRSBhY2NvdW50IScsIGZhbHNlLCAnZXJyb3InKTtcclxuICAgIH1cclxuICAgIGlmIChhd2FpdCB0cnlCdXkobnMsICdwdXJjaGFzZVRpeEFwaScpKSB7XHJcbiAgICAgICAgbG9nKG5zLCBgU1VDQ0VTUzogUHVyY2hhc2VkIFRpeCAoc3RvY2ttYXJrZXQpIEFwaSBhY2Nlc3MgZm9yICR7Zm9ybWF0TW9uZXkoY29zdFRpeEFwaSl9IGAgK1xyXG4gICAgICAgICAgICBgKEF0ICR7Zm9ybWF0RHVyYXRpb24oZ2V0VGltZUluQml0bm9kZSgpKX0gaW50byBCaXROb2RlKWAsIHRydWUsICdzdWNjZXNzJyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2VcclxuICAgICAgICBsb2cobnMsICdFUlJPUiBhdHRlbXB0aW5nIHRvIHB1cmNoYXNlIFRpeCBBcGkhJywgZmFsc2UsICdlcnJvcicpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0aWFsaXplSHVkKCkge1xyXG4gICAgY29uc3QgZCA9IGV2YWwoXCJkb2N1bWVudFwiKTtcclxuICAgIGxldCBodG1sRGlzcGxheSA9IGQuZ2V0RWxlbWVudEJ5SWQoXCJzdG9jay1kaXNwbGF5LTFcIik7XHJcbiAgICBpZiAoaHRtbERpc3BsYXkgIT09IG51bGwpIHJldHVybiBodG1sRGlzcGxheTtcclxuICAgIC8vIEdldCB0aGUgY3VzdG9tIGRpc3BsYXkgZWxlbWVudHMgaW4gSFVELlxyXG4gICAgbGV0IGN1c3RvbUVsZW1lbnRzID0gZC5nZXRFbGVtZW50QnlJZChcIm92ZXJ2aWV3LWV4dHJhLWhvb2stMFwiKS5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAvLyBNYWtlIGEgY2xvbmUgb2YgdGhlIGhvb2sgZm9yIGV4dHJhIGh1ZCBlbGVtZW50cywgYW5kIG1vdmUgaXQgdXAgdW5kZXIgbW9uZXlcclxuICAgIGxldCBzdG9ja1ZhbHVlVHJhY2tlciA9IGN1c3RvbUVsZW1lbnRzLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIC8vIFJlbW92ZSBhbnkgbmVzdGVkIGVsZW1lbnRzIGNyZWF0ZWQgYnkgc3RhdHMuanNcclxuICAgIHN0b2NrVmFsdWVUcmFja2VyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwID4gcFwiKS5mb3JFYWNoKGVsID0+IGVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWwpKTtcclxuICAgIC8vIENoYW5nZSBpZHMgc2luY2UgZHVwbGljYXRlIGlkJ3MgYXJlIGludmFsaWRcclxuICAgIHN0b2NrVmFsdWVUcmFja2VyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwXCIpLmZvckVhY2goKGVsLCBpKSA9PiBlbC5pZCA9IFwic3RvY2stZGlzcGxheS1cIiArIGkpO1xyXG4gICAgLy8gR2V0IG91dCBvdXRwdXQgZWxlbWVudFxyXG4gICAgaHRtbERpc3BsYXkgPSBzdG9ja1ZhbHVlVHJhY2tlci5xdWVyeVNlbGVjdG9yKFwiI3N0b2NrLWRpc3BsYXktMVwiKTtcclxuICAgIC8vIERpc3BsYXkgbGFiZWwgYW5kIGRlZmF1bHQgdmFsdWVcclxuICAgIHN0b2NrVmFsdWVUcmFja2VyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwXCIpWzBdLmlubmVyVGV4dCA9IFwiU3RvY2tcIjtcclxuICAgIGh0bWxEaXNwbGF5LmlubmVyVGV4dCA9IFwiJDAuMDAwIFwiXHJcbiAgICAvLyBJbnNlcnQgb3VyIGVsZW1lbnQgcmlnaHQgYWZ0ZXIgTW9uZXlcclxuICAgIGN1c3RvbUVsZW1lbnRzLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHN0b2NrVmFsdWVUcmFja2VyLCBjdXN0b21FbGVtZW50cy5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0pO1xyXG4gICAgcmV0dXJuIGh0bWxEaXNwbGF5O1xyXG59Il19\",\"filename\":\"trade/trade.js\",\"server\":\"home\"}}],[\"util/text.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport function tprintColored(txt, color) {\\n    let terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    let rowElement = document.createElement(\\\"tr\\\");\\n    let cellElement = document.createElement(\\\"td\\\");\\n    rowElement.classList.add(\\\"posted\\\");\\n    cellElement.classList.add(\\\"terminal-line\\\");\\n    cellElement.style.color = color;\\n    cellElement.innerText = txt;\\n    rowElement.appendChild(cellElement);\\n    terminalInput.before(rowElement);\\n}\\nexport async function main(ns) {\\n    tprintColored(\\\"Red Text!\\\", \\\"red\\\");\\n    tprintColored(\\\"Blue Text!\\\", \\\"blue\\\");\\n    tprintColored(\\\"Use Hex Codes!\\\", \\\"#3087E3\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3RleHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUs7SUFDcEMsSUFBSSxhQUFhLEdBQUssUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hFLElBQUksVUFBVSxHQUFRLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsSUFBSSxXQUFXLEdBQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuRCxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMzQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDaEMsV0FBVyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7SUFFNUIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLGFBQWEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsYUFBYSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNwQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRwcmludENvbG9yZWQodHh0LCBjb2xvcikge1xyXG4gICAgbGV0IHRlcm1pbmFsSW5wdXQgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVybWluYWwtaW5wdXRcIik7XHJcbiAgICBsZXQgcm93RWxlbWVudCAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgbGV0IGNlbGxFbGVtZW50ICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuXHJcbiAgICByb3dFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwb3N0ZWRcIik7XHJcbiAgICBjZWxsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGVybWluYWwtbGluZVwiKTtcclxuICAgIGNlbGxFbGVtZW50LnN0eWxlLmNvbG9yID0gY29sb3I7XHJcbiAgICBjZWxsRWxlbWVudC5pbm5lclRleHQgPSB0eHQ7XHJcblxyXG4gICAgcm93RWxlbWVudC5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XHJcbiAgICB0ZXJtaW5hbElucHV0LmJlZm9yZShyb3dFbGVtZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIHRwcmludENvbG9yZWQoXCJSZWQgVGV4dCFcIiwgXCJyZWRcIik7XHJcbiAgICB0cHJpbnRDb2xvcmVkKFwiQmx1ZSBUZXh0IVwiLCBcImJsdWVcIik7XHJcbiAgICB0cHJpbnRDb2xvcmVkKFwiVXNlIEhleCBDb2RlcyFcIiwgXCIjMzA4N0UzXCIpO1xyXG59Il19\",\"filename\":\"util/text.js\",\"server\":\"home\"}}],[\"wormy/advanced/auto-exec.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const wormx = 'wormy/advanced/wormx.js';\\n    const d_jack = 'wormy/advanced/deploy-jack.js';\\n    ns.exec(wormx, 'home', 1);\\n    ns.tprint('AUTOX STARTED');\\n    await ns.sleep(1000);\\n    ns.exec(d_jack, 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1leGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL2F1dG8tZXhlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLEtBQUssR0FBRyx5QkFBeUIsQ0FBQTtJQUN2QyxNQUFNLE1BQU0sR0FBRywrQkFBK0IsQ0FBQTtJQUU5QyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUMxQixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEIsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgICBjb25zdCB3b3JteCA9ICd3b3JteS9hZHZhbmNlZC93b3JteC5qcydcclxuICAgIGNvbnN0IGRfamFjayA9ICd3b3JteS9hZHZhbmNlZC9kZXBsb3ktamFjay5qcydcclxuXHJcbiAgICBucy5leGVjKHdvcm14LCAnaG9tZScsIDEpXHJcbiAgICBucy50cHJpbnQoJ0FVVE9YIFNUQVJURUQnKVxyXG4gICAgYXdhaXQgbnMuc2xlZXAoMTAwMClcclxuICAgIG5zLmV4ZWMoZF9qYWNrLCAnaG9tZScsIDEpXHJcbn0iXX0=\",\"filename\":\"wormy/advanced/auto-exec.js\",\"server\":\"home\"}}],[\"trade/helper.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++)\\n        num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed))\\n        return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) {\\n    return `${Math.round(num).toLocaleString('en')} GB`;\\n}\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) {\\n    return datetime.toISOString();\\n}\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000)\\n        return `${duration.toFixed(0)}ms`;\\n    if (!isFinite(duration))\\n        return 'forever (Infinity)';\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0);\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) {\\n    return s.split(\\\"\\\").reduce(function (a, b) {\\n        a = ((a << 5) - a) + b.charCodeAt(0);\\n        return a & a;\\n    }, 0);\\n}\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) {\\n    ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log));\\n}\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = ''; // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) {\\n    return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run;\\n}\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) {\\n        return ns.exec(scriptPath, host, ...args);\\n    };\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) {\\n    return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning;\\n}\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) {\\n        return ns.ps(host).some(process => process.pid === pid);\\n    };\\n}\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose)\\n        disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\"))\\n        fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`;\\n}\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose)\\n        disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js';\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\r\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\r\\n            return Object.keys(player).reduce((pCopy, key) => {\\r\\n                if (!excludeProperties.includes(key))\\r\\n                   pCopy[key] = player[key];\\r\\n                return pCopy;\\r\\n            }, {});\\r\\n        })()`;\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose)\\n        log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying.\\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")), () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n        `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n        (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n            lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                    `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`), maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose)\\n        log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose)\\n        disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0)\\n        return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('trade/helper.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\"))\\n            continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args))\\n        throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose)\\n        disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'trade/helper.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0, () => `The temp script was not run (likely due to insufficient RAM).` +\\n        `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n        `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose)\\n        disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose)\\n        disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0)\\n            ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\", maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail();\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`), tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'));\\n            if (fatal)\\n                throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle)\\n        ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n/** @param {NS} ns\\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n/** @param {NS} ns\\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, '/Temp/owned-source-files.txt');\\n    }\\n    catch {\\n        dictSourceFiles = {};\\n    } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        }\\n        catch { /* We are expected to be fault-tolerant in low-ram conditions */\\n        }\\n    }\\n    return dictSourceFiles;\\n}\\n/** @param {NS} ns\\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try {\\n        canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile));\\n    }\\n    catch {\\n    }\\n    if (!canGetBitNodeMultipliers)\\n        return null;\\n    try {\\n        return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt');\\n    }\\n    catch {\\n    }\\n    return null;\\n}\\n/** @param {NS} ns\\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)', '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns, `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`, '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null)\\n        return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns, `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`, `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null)\\n        return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n        // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n        // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n        - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n/** @param {NS} ns\\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print)\\n        throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema\\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides))\\n                parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        }\\n        catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a => `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`);\\n        return finalOptions;\\n    }\\n    catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {};\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0)\\n                continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\"))\\n                break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2)\\n                continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2)\\n                continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n            `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n            (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\"))\\n        return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYWRlL2hlbHBlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7SUFLSTtBQUNKLE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBRyxFQUFFLHFCQUFxQixHQUFHLENBQUMsRUFBRSxnQkFBZ0IsR0FBRyxDQUFDO0lBQzVFLElBQUksV0FBVyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xGLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUVELE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTVGOzs7OztJQUtJO0FBQ0osTUFBTSxVQUFVLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxxQkFBcUIsR0FBRyxDQUFDLEVBQUUsZ0JBQWdCLEdBQUcsQ0FBQztJQUNsRixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxtRUFBbUU7UUFDL0csT0FBTyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdB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Q0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUmV0dXJuIGEgZm9ybWF0dGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb25ldGFyeSBhbW91bnQgdXNpbmcgc2NhbGUgc3ltYm9scyAoZS5nLiAkNi41ME0pXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gLSBUaGUgbnVtYmVyIHRvIGZvcm1hdFxyXG4gKiBAcGFyYW0ge251bWJlcj19IG1heFNpZ25pZmljYW50RmlndXJlcyAtIChkZWZhdWx0OiA2KSBUaGUgbWF4aW11bSBzaWduaWZpY2FudCBmaWd1cmVzIHlvdSB3aXNoIHRvIHNlZSAoZS5nLiAxMjMsIDEyLjMgYW5kIDEuMjMgYWxsIGhhdmUgMyBzaWduaWZpY2FudCBmaWd1cmVzKVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG1heERlY2ltYWxQbGFjZXMgLSAoZGVmYXVsdDogMykgVGhlIG1heGltdW0gZGVjaW1hbCBwbGFjZXMgeW91IHdpc2ggdG8gc2VlLCByZWdhcmRsZXNzIG9mIHNpZ25pZmljYW50IGZpZ3VyZXMuIChlLmcuIDEyLjMsIDEuMiwgMC4xIGFsbCBoYXZlIDEgZGVjaW1hbClcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TW9uZXkobnVtLCBtYXhTaWduaWZpY2FudEZpZ3VyZXMgPSA2LCBtYXhEZWNpbWFsUGxhY2VzID0gMykge1xyXG4gICAgbGV0IG51bWJlclNob3J0ID0gZm9ybWF0TnVtYmVyU2hvcnQobnVtLCBtYXhTaWduaWZpY2FudEZpZ3VyZXMsIG1heERlY2ltYWxQbGFjZXMpO1xyXG4gICAgcmV0dXJuIG51bSA+PSAwID8gXCIkXCIgKyBudW1iZXJTaG9ydCA6IG51bWJlclNob3J0LnJlcGxhY2UoXCItXCIsIFwiLSRcIik7XHJcbn1cclxuXHJcbmNvbnN0IHN5bWJvbHMgPSBbXCJcIiwgXCJrXCIsIFwibVwiLCBcImJcIiwgXCJ0XCIsIFwicVwiLCBcIlFcIiwgXCJzXCIsIFwiU1wiLCBcIm9cIiwgXCJuXCIsIFwiZTMzXCIsIFwiZTM2XCIsIFwiZTM5XCJdO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhIGZvcm1hdHRlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9uZXRhcnkgYW1vdW50IHVzaW5nIHNjYWxlIHN5bXBvbHMgKGUuZy4gNi41ME0pXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gLSBUaGUgbnVtYmVyIHRvIGZvcm1hdFxyXG4gKiBAcGFyYW0ge251bWJlcj19IG1heFNpZ25pZmljYW50RmlndXJlcyAtIChkZWZhdWx0OiA2KSBUaGUgbWF4aW11bSBzaWduaWZpY2FudCBmaWd1cmVzIHlvdSB3aXNoIHRvIHNlZSAoZS5nLiAxMjMsIDEyLjMgYW5kIDEuMjMgYWxsIGhhdmUgMyBzaWduaWZpY2FudCBmaWd1cmVzKVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG1heERlY2ltYWxQbGFjZXMgLSAoZGVmYXVsdDogMykgVGhlIG1heGltdW0gZGVjaW1hbCBwbGFjZXMgeW91IHdpc2ggdG8gc2VlLCByZWdhcmRsZXNzIG9mIHNpZ25pZmljYW50IGZpZ3VyZXMuIChlLmcuIDEyLjMsIDEuMiwgMC4xIGFsbCBoYXZlIDEgZGVjaW1hbClcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TnVtYmVyU2hvcnQobnVtLCBtYXhTaWduaWZpY2FudEZpZ3VyZXMgPSA2LCBtYXhEZWNpbWFsUGxhY2VzID0gMykge1xyXG4gICAgaWYgKE1hdGguYWJzKG51bSkgPiAxMCAqKiAoMyAqIHN5bWJvbHMubGVuZ3RoKSkgLy8gSWYgd2UndmUgZXhjZWVkZWQgb3VyIG1heCBzeW1ib2wsIHN3aXRjaCB0byBleHBvbmVudGlhbCBub3RhdGlvblxyXG4gICAgICAgIHJldHVybiBudW0udG9FeHBvbmVudGlhbChNYXRoLm1pbihtYXhEZWNpbWFsUGxhY2VzLCBtYXhTaWduaWZpY2FudEZpZ3VyZXMgLSAxKSk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgc2lnbiA9IE1hdGguc2lnbihudW0pLCBudW0gPSBNYXRoLmFicyhudW0pOyBudW0gPj0gMTAwMCAmJiBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykgbnVtIC89IDEwMDA7XHJcbiAgICAvLyBUT0RPOiBBIG51bWJlciBsaWtlIDkuOTk5IG9uY2Ugcm91bmRlZCB0byBzaG93IDMgc2lnIGZpZ3MsIHdpbGwgYmVjb21lIDEwLjAwLCB3aGljaCBpcyBub3cgNCBzaWcgZmlncy5cclxuICAgIHJldHVybiAoKHNpZ24gPCAwKSA/IFwiLVwiIDogXCJcIikgKyBudW0udG9GaXhlZChNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhEZWNpbWFsUGxhY2VzLCBtYXhTaWduaWZpY2FudEZpZ3VyZXMgLSBNYXRoLmZsb29yKDEgKyBNYXRoLmxvZzEwKG51bSkpKSkpICsgc3ltYm9sc1tpXTtcclxufVxyXG5cclxuLyoqIENvbnZlcnQgYSBzaG9ydGVuZWQgbnVtYmVyIGJhY2sgaW50byBhIHZhbHVlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNob3J0TnVtYmVyKHRleHQgPSBcIjBcIikge1xyXG4gICAgbGV0IHBhcnNlZCA9IE51bWJlcih0ZXh0KTtcclxuICAgIGlmICghaXNOYU4ocGFyc2VkKSkgcmV0dXJuIHBhcnNlZDtcclxuICAgIGZvciAoY29uc3Qgc3ltIG9mIHN5bWJvbHMuc2xpY2UoMSkpXHJcbiAgICAgICAgaWYgKHRleHQudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChzeW0pKVxyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlRmxvYXQodGV4dC5zbGljZSgwLCB0ZXh0Lmxlbmd0aCAtIHN5bS5sZW5ndGgpKSAqIE1hdGgucG93KDEwLCAzICogc3ltYm9scy5pbmRleE9mKHN5bSkpO1xyXG4gICAgcmV0dXJuIE51bWJlci5OYU47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYSBudW1iZXIgZm9ybWF0dGVkIHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc2lnbmlmaWNhdG50IGZpZ3VyZXMgb3IgZGVjaW1hbCBwbGFjZXMsIHdoaWNoZXZlciBpcyBtb3JlIGxpbWl0aW5nLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIC0gVGhlIG51bWJlciB0byBmb3JtYXRcclxuICogQHBhcmFtIHtudW1iZXI9fSBtaW5TaWduaWZpY2FudEZpZ3VyZXMgLSAoZGVmYXVsdDogNikgVGhlIG1pbmltdW0gc2lnbmlmaWNhbnQgZmlndXJlcyB5b3Ugd2lzaCB0byBzZWUgKGUuZy4gMTIzLCAxMi4zIGFuZCAxLjIzIGFsbCBoYXZlIDMgc2lnbmlmaWNhbnQgZmlndXJlcylcclxuICogQHBhcmFtIHtudW1iZXI9fSBtaW5EZWNpbWFsUGxhY2VzIC0gKGRlZmF1bHQ6IDMpIFRoZSBtaW5pbXVtIGRlY2ltYWwgcGxhY2VzIHlvdSB3aXNoIHRvIHNlZSwgcmVnYXJkbGVzcyBvZiBzaWduaWZpY2FudCBmaWd1cmVzLiAoZS5nLiAxMi4zLCAxLjIsIDAuMSBhbGwgaGF2ZSAxIGRlY2ltYWwpXHJcbiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIG1pblNpZ25pZmljYW50RmlndXJlcyA9IDMsIG1pbkRlY2ltYWxQbGFjZXMgPSAxKSB7XHJcbiAgICByZXR1cm4gbnVtID09IDAuMCA/IG51bSA6IG51bS50b0ZpeGVkKE1hdGgubWF4KG1pbkRlY2ltYWxQbGFjZXMsIE1hdGgubWF4KDAsIG1pblNpZ25pZmljYW50RmlndXJlcyAtIE1hdGguY2VpbChNYXRoLmxvZzEwKG51bSkpKSkpO1xyXG59XHJcblxyXG4vKiogRm9ybWF0cyBzb21lIFJBTSBhbW91bnQgYXMgYSByb3VuZCBudW1iZXIgb2YgR0Igd2l0aCB0aG91c2FuZHMgc2VwYXJhdG9ycyBlLmcuIGAxLDAyOCBHQmAgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJhbShudW0pIHtcclxuICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKG51bSkudG9Mb2NhbGVTdHJpbmcoJ2VuJyl9IEdCYDtcclxufVxyXG5cclxuLyoqIFJldHVybiBhIGRhdGF0aW1lIGluIElTTyBmb3JtYXQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lKGRhdGV0aW1lKSB7XHJcbiAgICByZXR1cm4gZGF0ZXRpbWUudG9JU09TdHJpbmcoKTtcclxufVxyXG5cclxuLyoqIEZvcm1hdCBhIGR1cmF0aW9uIChpbiBtaWxsaXNlY29uZHMpIGFzIGUuZy4gJzFoIDIxbSA2cycgZm9yIGJpZyBkdXJhdGlvbnMgb3IgZS5nICcxMi41cycgLyAnMjNtcycgZm9yIHNtYWxsIGR1cmF0aW9ucyAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RHVyYXRpb24oZHVyYXRpb24pIHtcclxuICAgIGlmIChkdXJhdGlvbiA8IDEwMDApIHJldHVybiBgJHtkdXJhdGlvbi50b0ZpeGVkKDApfW1zYFxyXG4gICAgaWYgKCFpc0Zpbml0ZShkdXJhdGlvbikpIHJldHVybiAnZm9yZXZlciAoSW5maW5pdHkpJ1xyXG4gICAgY29uc3QgcG9ydGlvbnMgPSBbXTtcclxuICAgIGNvbnN0IG1zSW5Ib3VyID0gMTAwMCAqIDYwICogNjA7XHJcbiAgICBjb25zdCBob3VycyA9IE1hdGgudHJ1bmMoZHVyYXRpb24gLyBtc0luSG91cik7XHJcbiAgICBpZiAoaG91cnMgPiAwKSB7XHJcbiAgICAgICAgcG9ydGlvbnMucHVzaChob3VycyArICdoJyk7XHJcbiAgICAgICAgZHVyYXRpb24gLT0gKGhvdXJzICogbXNJbkhvdXIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbXNJbk1pbnV0ZSA9IDEwMDAgKiA2MDtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLnRydW5jKGR1cmF0aW9uIC8gbXNJbk1pbnV0ZSk7XHJcbiAgICBpZiAobWludXRlcyA+IDApIHtcclxuICAgICAgICBwb3J0aW9ucy5wdXNoKG1pbnV0ZXMgKyAnbScpO1xyXG4gICAgICAgIGR1cmF0aW9uIC09IChtaW51dGVzICogbXNJbk1pbnV0ZSk7XHJcbiAgICB9XHJcbiAgICBsZXQgc2Vjb25kcyA9IChkdXJhdGlvbiAvIDEwMDAuMClcclxuICAgIC8vIEluY2x1ZGUgbWlsbGlzZWNvbmQgcHJlY2lzaW9uIGlmIHdlJ3JlIG9uIHRoZSBvcmRlciBvZiBzZWNvbmRzXHJcbiAgICBzZWNvbmRzID0gKGhvdXJzID09IDAgJiYgbWludXRlcyA9PSAwKSA/IHNlY29uZHMudG9QcmVjaXNpb24oMykgOiBzZWNvbmRzLnRvRml4ZWQoMCk7XHJcbiAgICBpZiAoc2Vjb25kcyA+IDApIHtcclxuICAgICAgICBwb3J0aW9ucy5wdXNoKHNlY29uZHMgKyAncycpO1xyXG4gICAgICAgIGR1cmF0aW9uIC09IChtaW51dGVzICogMTAwMCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG9ydGlvbnMuam9pbignICcpO1xyXG59XHJcblxyXG4vKiogR2VuZXJhdGUgYSBoYXNoQ29kZSBmb3IgYSBzdHJpbmcgdGhhdCBpcyBwcmV0dHkgdW5pcXVlIG1vc3Qgb2YgdGhlIHRpbWUgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hDb2RlKHMpIHtcclxuICAgIHJldHVybiBzLnNwbGl0KFwiXCIpLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGEgPSAoKGEgPDwgNSkgLSBhKSArIGIuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICByZXR1cm4gYSAmIGFcclxuICAgIH0sIDApO1xyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlTG9ncyhucywgbGlzdE9mTG9ncykge1xyXG4gICAgWydkaXNhYmxlTG9nJ10uY29uY2F0KC4uLmxpc3RPZkxvZ3MpLmZvckVhY2gobG9nID0+IGNoZWNrTnNJbnN0YW5jZShucywgJ1wiZGlzYWJsZUxvZ3NcIicpLmRpc2FibGVMb2cobG9nKSk7XHJcbn1cclxuXHJcbi8qKiBKb2lucyBhbGwgYXJndW1lbnRzIGFzIGNvbXBvbmVudHMgaW4gYSBwYXRoLCBlLmcuIHBhdGhKb2luKFwiZm9vXCIsIFwiYmFyXCIsIFwiL2JhelwiKSA9IFwiZm9vL2Jhci9iYXpcIiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhKb2luKC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiBhcmdzLmZpbHRlcihzID0+ICEhcykuam9pbignLycpLnJlcGxhY2UoL1xcL1xcLysvZywgJy8nKTtcclxufVxyXG5cclxuLyoqIEdldHMgdGhlIHBhdGggZm9yIHRoZSBnaXZlbiBsb2NhbCBmaWxlLCB0YWtpbmcgaW50byBhY2NvdW50IG9wdGlvbmFsIHN1YmZvbGRlciByZWxvY2F0aW9uIHZpYSBnaXQtcHVsbC5qcyAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVQYXRoKGZpbGUpIHtcclxuICAgIGNvbnN0IHN1YmZvbGRlciA9ICcnOyAgLy8gZ2l0LXB1bGwuanMgb3B0aW9uYWxseSBtb2RpZmllcyB0aGlzIHdoZW4gZG93bmxvYWRpbmdcclxuICAgIHJldHVybiBwYXRoSm9pbihzdWJmb2xkZXIsIGZpbGUpO1xyXG59XHJcblxyXG4vLyBGVU5DVElPTlMgVEhBVCBQUk9WSURFIEFMVEVSTkFUSVZFIElNUExFTUVOVEFUSU9OUyBUTyBFWFBFTlNJVkUgTlMgRlVOQ1RJT05TXHJcbi8vIFZBUklBVElPTlMgT04gTlMuUlVOXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogIFVzZSB3aGVyZSBhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIHRvIHJ1biBhIHNjcmlwdCBhbmQgeW91IGhhdmUgYWxyZWFkeSByZWZlcmVuY2VkIG5zLnJ1biBpbiB5b3VyIHNjcmlwdCAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZuUnVuVmlhTnNSdW4obnMpIHtcclxuICAgIHJldHVybiBjaGVja05zSW5zdGFuY2UobnMsICdcImdldEZuUnVuVmlhTnNSdW5cIicpLnJ1bjtcclxufVxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zXHJcbiAqICBVc2Ugd2hlcmUgYSBmdW5jdGlvbiBpcyByZXF1aXJlZCB0byBydW4gYSBzY3JpcHQgYW5kIHlvdSBoYXZlIGFscmVhZHkgcmVmZXJlbmNlZCBucy5leGVjIGluIHlvdXIgc2NyaXB0ICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm5SdW5WaWFOc0V4ZWMobnMsIGhvc3QgPSBcImhvbWVcIikge1xyXG4gICAgY2hlY2tOc0luc3RhbmNlKG5zLCAnXCJnZXRGblJ1blZpYU5zRXhlY1wiJyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNjcmlwdFBhdGgsIC4uLmFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbnMuZXhlYyhzY3JpcHRQYXRoLCBob3N0LCAuLi5hcmdzKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gVkFSSUFUSU9OUyBPTiBOUy5JU1JVTk5JTkdcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBuc1xyXG4gKiAgVXNlIHdoZXJlIGEgZnVuY3Rpb24gaXMgcmVxdWlyZWQgdG8gcnVuIGEgc2NyaXB0IGFuZCB5b3UgaGF2ZSBhbHJlYWR5IHJlZmVyZW5jZWQgbnMucnVuIGluIHlvdXIgc2NyaXB0ICAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm5Jc0FsaXZlVmlhTnNJc1J1bm5pbmcobnMpIHtcclxuICAgIHJldHVybiBjaGVja05zSW5zdGFuY2UobnMsICdcImdldEZuSXNBbGl2ZVZpYU5zSXNSdW5uaW5nXCInKS5pc1J1bm5pbmc7XHJcbn1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBuc1xyXG4gKiAgVXNlIHdoZXJlIGEgZnVuY3Rpb24gaXMgcmVxdWlyZWQgdG8gcnVuIGEgc2NyaXB0IGFuZCB5b3UgaGF2ZSBhbHJlYWR5IHJlZmVyZW5jZWQgbnMucHMgaW4geW91ciBzY3JpcHQgICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGbklzQWxpdmVWaWFOc1BzKG5zKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcImdldEZuSXNBbGl2ZVZpYU5zUHNcIicpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwaWQsIGhvc3QpIHtcclxuICAgICAgICByZXR1cm4gbnMucHMoaG9zdCkuc29tZShwcm9jZXNzID0+IHByb2Nlc3MucGlkID09PSBwaWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0cmlldmUgdGhlIHJlc3VsdCBvZiBhbiBucyBjb21tYW5kIGJ5IGV4ZWN1dGluZyBpdCBpbiBhIHRlbXBvcmFyeSAuanMgc2NyaXB0LCB3cml0aW5nIHRoZSByZXN1bHQgdG8gYSBmaWxlLCB0aGVuIHNodXRpbmcgaXQgZG93blxyXG4gKiBJbXBvcnRpbmcgaW5jdXJzIGEgbWF4aW11bSBvZiAxLjEgR0IgUkFNICgwIEdCIGZvciBucy5yZWFkLCAxIEdCIGZvciBucy5ydW4sIDAuMSBHQiBmb3IgbnMuaXNSdW5uaW5nKS5cclxuICogSGFzIHRoZSBjYXBhY2l0eSB0byByZXRyeSBpZiB0aGVyZSBpcyBhIGZhaWx1cmUgKGUuZy4gZHVlIHRvIGxhY2sgb2YgUkFNIGF2YWlsYWJsZSkuIE5vdCByZWNvbW1lbmRlZCBmb3IgcGVyZm9ybWFuY2UtY3JpdGljYWwgY29kZS5cclxuICogQHBhcmFtIHtOU30gbnMgLSBUaGUgbmVzdGNyaXB0IGluc3RhbmNlIHBhc3NlZCB0byB5b3VyIHNjcmlwdCdzIG1haW4gZW50cnkgcG9pbnRcclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmQgLSBUaGUgbnMgY29tbWFuZCB0aGF0IHNob3VsZCBiZSBpbnZva2VkIHRvIGdldCB0aGUgZGVzaXJlZCBkYXRhIChlLmcuIFwibnMuZ2V0U2VydmVyKCdob21lJylcIiApXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gZk5hbWUgLSAoZGVmYXVsdCBcIi9UZW1wL3tjb21tYW5kLW5hbWV9LnR4dFwiKSBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byB3aGljaCBkYXRhIHdpbGwgYmUgd3JpdHRlbiB0byBkaXNrIGJ5IGEgdGVtcG9yYXJ5IHByb2Nlc3NcclxuICogQHBhcmFtIHthcmdzPX0gYXJncyAtIGFyZ3MgdG8gYmUgcGFzc2VkIGluIGFzIGFyZ3VtZW50cyB0byBjb21tYW5kIGJlaW5nIHJ1biBhcyBhIG5ldyBzY3JpcHQuXHJcbiAqIEBwYXJhbSB7Ym9vbD19IHZlcmJvc2UgLSAoZGVmYXVsdCBmYWxzZSkgSWYgc2V0IHRvIHRydWUsIHBpZCBhbmQgcmVzdWx0IG9mIGNvbW1hbmQgYXJlIGxvZ2dlZC5cclxuICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TnNEYXRhVGhyb3VnaEZpbGUobnMsIGNvbW1hbmQsIGZOYW1lID0gbnVsbCwgYXJncyA9IFtdLCB2ZXJib3NlID0gZmFsc2UsIG1heFJldHJpZXMgPSA1LCByZXRyeURlbGF5TXMgPSA1MCkge1xyXG4gICAgY2hlY2tOc0luc3RhbmNlKG5zLCAnXCJnZXROc0RhdGFUaHJvdWdoRmlsZVwiJyk7XHJcbiAgICBpZiAoIXZlcmJvc2UpIGRpc2FibGVMb2dzKG5zLCBbJ3J1bicsICdpc1J1bm5pbmcnXSk7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0TnNEYXRhVGhyb3VnaEZpbGVfQ3VzdG9tKG5zLCBucy5ydW4sIGNvbW1hbmQsIGZOYW1lLCBhcmdzLCB2ZXJib3NlLCBtYXhSZXRyaWVzLCByZXRyeURlbGF5TXMpO1xyXG59XHJcblxyXG4vKiogQ29udmVydCBhIGNvbW1hbmQgbmFtZSBsaWtlIFwibnMubmFtZXNwYWNlLnNvbWVGdW5jdGlvbihhcmdzLCBhcmdzKVwiIGludG9cclxuICogYSBkZWZhdWx0IGZpbGUgcGF0aCBmb3IgcnVubmluZyB0aGF0IGNvbW1hbmQgXCIvVGVtcC9uYW1lc3BhY2Utc29tZUZ1bmN0aW9uLnR4dFwiICovXHJcbmZ1bmN0aW9uIGdldERlZmF1bHRDb21tYW5kRmlsZU5hbWUoY29tbWFuZCwgZXh0ID0gJy50eHQnKSB7XHJcbiAgICAvLyBJZiBwcmVmaXhlZCB3aXRoIFwibnMuXCIsIHN0cmlwIHRoYXQgb3V0XHJcbiAgICBsZXQgZm5hbWUgPSBjb21tYW5kO1xyXG4gICAgaWYgKGZuYW1lLnN0YXJ0c1dpdGgoXCJucy5cIikpIGZuYW1lID0gZm5hbWUuc2xpY2UoMyk7XHJcbiAgICAvLyBSZW1vdmUgYW55dGhpbmcgYmV0d2VlbiBwYXJlbnRoZXNlc1xyXG4gICAgZm5hbWUgPSBmbmFtZS5yZXBsYWNlKC8gKlxcKFteKV0qXFwpICovZywgXCJcIik7XHJcbiAgICAvLyBSZXBsYWNlIGFueSBkZXJlZmVyZW5jaW5nIChkb3RzKSB3aXRoIGRhc2hlc1xyXG4gICAgZm5hbWUgPSBmbmFtZS5yZXBsYWNlKFwiLlwiLCBcIi1cIik7XHJcbiAgICByZXR1cm4gYC9UZW1wLyR7Zm5hbWV9JHtleHR9YFxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWR2YW5jZWQgdmVyc2lvbiBvZiBnZXROc0RhdGFUaHJvdWdoRmlsZSB0aGF0IGxldHMgeW91IHBhc3MgeW91ciBvd24gXCJmblJ1blwiIGltcGxlbWVudGF0aW9uIHRvIHJlZHVjZSBSQU0gcmVxdWlyZW1lbnRzXHJcbiAqIEltcG9ydGluZyBpbmN1cnMgbm8gUkFNIChub3cgdGhhdCBucy5yZWFkIGlzIGZyZWUpIHBsdXMgd2hhdGV2ZXIgZm5SdW4geW91IHByb3ZpZGUgaXRcclxuICogSGFzIHRoZSBjYXBhY2l0eSB0byByZXRyeSBpZiB0aGVyZSBpcyBhIGZhaWx1cmUgKGUuZy4gZHVlIHRvIGxhY2sgb2YgUkFNIGF2YWlsYWJsZSkuIE5vdCByZWNvbW1lbmRlZCBmb3IgcGVyZm9ybWFuY2UtY3JpdGljYWwgY29kZS5cclxuICogQHBhcmFtIHtOU30gbnMgLSBUaGUgbmVzdGNyaXB0IGluc3RhbmNlIHBhc3NlZCB0byB5b3VyIHNjcmlwdCdzIG1haW4gZW50cnkgcG9pbnRcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5SdW4gLSBBIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbiB1c2VkIHRvIHN0YXJ0IHRoZSBuZXcgc3JpcHQsIGUuZy4gYG5zLnJ1bmAgb3IgYChmLC4uLmFyZ3MpID0+IG5zLmV4ZWMoZiwgXCJob21lXCIsIC4uLmFyZ3MpYFxyXG4gKiBAcGFyYW0ge2FyZ3M9fSBhcmdzIC0gYXJncyB0byBiZSBwYXNzZWQgaW4gYXMgYXJndW1lbnRzIHRvIGNvbW1hbmQgYmVpbmcgcnVuIGFzIGEgbmV3IHNjcmlwdC5cclxuICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TnNEYXRhVGhyb3VnaEZpbGVfQ3VzdG9tKG5zLCBmblJ1biwgY29tbWFuZCwgZk5hbWUgPSBudWxsLCBhcmdzID0gW10sIHZlcmJvc2UgPSBmYWxzZSwgbWF4UmV0cmllcyA9IDUsIHJldHJ5RGVsYXlNcyA9IDUwKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcImdldE5zRGF0YVRocm91Z2hGaWxlX0N1c3RvbVwiJyk7XHJcbiAgICBpZiAoIXZlcmJvc2UpIGRpc2FibGVMb2dzKG5zLCBbJ3JlYWQnXSk7XHJcbiAgICBmTmFtZSA9IGZOYW1lIHx8IGdldERlZmF1bHRDb21tYW5kRmlsZU5hbWUoY29tbWFuZCk7XHJcbiAgICBjb25zdCBmTmFtZUNvbW1hbmQgPSBmTmFtZSArICcuanMnXHJcbiAgICAvLyBQcmUtd3JpdGUgY29udGVudHMgdG8gdGhlIGZpbGUgdGhhdCB3aWxsIGFsbG93IHVzIHRvIGRldGVjdCBpZiBvdXIgdGVtcCBzY3JpcHQgbmV2ZXIgZ290IHJ1blxyXG4gICAgY29uc3QgaW5pdGlhbENvbnRlbnRzID0gXCI8SW5zdWZmaWNpZW50IFJBTT5cIjtcclxuICAgIG5zLndyaXRlKGZOYW1lLCBpbml0aWFsQ29udGVudHMsICd3Jyk7XHJcbiAgICAvLyBUT0RPOiBXb3JrYXJvdW5kIGZvciB2Mi4zLjAgZGVwcmVjYXRpb24uIFJlbW92ZSB3aGVuIHRoZSB3YXJuaW5nIGlzIGdvbmUuXHJcbiAgICAvLyBBdm9pZCBzZXJpYWxpemluZyBucy5nZXRQbGF5ZXIoKSBwcm9wZXJ0aWVzIHRoYXQgZ2VuZXJhdGUgd2FybmluZ3NcclxuICAgIGlmIChjb21tYW5kID09PSBcIm5zLmdldFBsYXllcigpXCIpXHJcbiAgICAgICAgY29tbWFuZCA9IGAoICgpPT4geyBsZXQgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVQcm9wZXJ0aWVzID0gWydwbGF5dGltZVNpbmNlTGFzdEF1ZycsICdwbGF5dGltZVNpbmNlTGFzdEJpdG5vZGUnLCAnYml0Tm9kZU4nXTtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHBsYXllcikucmVkdWNlKChwQ29weSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWV4Y2x1ZGVQcm9wZXJ0aWVzLmluY2x1ZGVzKGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICBwQ29weVtrZXldID0gcGxheWVyW2tleV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcENvcHk7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICB9KSgpYDtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGEgY29tbWFuZCB0aGF0IHdpbGwgd3JpdGUgb3V0IGEgbmV3IGZpbGUgY29udGFpbmluZyB0aGUgcmVzdWx0cyBvZiB0aGUgY29tbWFuZFxyXG4gICAgLy8gdW5sZXNzIGl0IGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHNhbWUgY29udGVudHMgKHNhdmVzIHRpbWUvcmFtIHRvIGNoZWNrIGZpcnN0KVxyXG4gICAgLy8gSWYgYW4gZXJyb3Igb2NjdXJzLCBpdCB3aWxsIHdyaXRlIGFuIGVtcHR5IGZpbGUgdG8gYXZvaWQgb2xkIHJlc3VsdHMgYmVpbmcgbWlzcmVhZC5cclxuICAgIGNvbnN0IGNvbW1hbmRUb0ZpbGUgPSBgbGV0IHI7dHJ5e3I9SlNPTi5zdHJpbmdpZnkoXFxuYCArXHJcbiAgICAgICAgYCAgICAke2NvbW1hbmR9XFxuYCArXHJcbiAgICAgICAgYCk7fWNhdGNoKGUpe3I9XCJFUlJPUjogXCIrKHR5cGVvZiBlPT0nc3RyaW5nJz9lOmUubWVzc2FnZXx8SlNPTi5zdHJpbmdpZnkoZSkpO31cXG5gICtcclxuICAgICAgICBgY29uc3QgZj1cIiR7Zk5hbWV9XCI7IGlmKG5zLnJlYWQoZikhPT1yKSBucy53cml0ZShmLHIsJ3cnKWA7XHJcbiAgICAvLyBSdW4gdGhlIGNvbW1hbmQgd2l0aCBhdXRvLXJldHJpZXMgaWYgaXQgZmFpbHNcclxuICAgIGNvbnN0IHBpZCA9IGF3YWl0IHJ1bkNvbW1hbmRfQ3VzdG9tKG5zLCBmblJ1biwgY29tbWFuZFRvRmlsZSwgZk5hbWVDb21tYW5kLCBhcmdzLCB2ZXJib3NlLCBtYXhSZXRyaWVzLCByZXRyeURlbGF5TXMpO1xyXG4gICAgLy8gV2FpdCBmb3IgdGhlIHByb2Nlc3MgdG8gY29tcGxldGUuIE5vdGUsIGFzIGxvbmcgYXMgdGhlIGFib3ZlIHJldHVybmVkIGEgcGlkLCB3ZSBkb24ndCBhY3R1YWxseSBoYXZlIHRvIGNoZWNrIGl0LCBqdXN0IHRoZSBmaWxlIGNvbnRlbnRzXHJcbiAgICBjb25zdCBmbklzQWxpdmUgPSAoaWdub3JlZF9waWQpID0+IG5zLnJlYWQoZk5hbWUpID09PSBpbml0aWFsQ29udGVudHM7XHJcbiAgICBhd2FpdCB3YWl0Rm9yUHJvY2Vzc1RvQ29tcGxldGVfQ3VzdG9tKG5zLCBmbklzQWxpdmUsIHBpZCwgdmVyYm9zZSk7XHJcbiAgICBpZiAodmVyYm9zZSkgbG9nKG5zLCBgUHJvY2VzcyAke3BpZH0gaXMgZG9uZS4gUmVhZGluZyB0aGUgY29udGVudHMgb2YgJHtmTmFtZX0uLi5gKTtcclxuICAgIC8vIFJlYWQgdGhlIGZpbGUsIHdpdGggYXV0by1yZXRyaWVzIGlmIGl0IGZhaWxzIC8vIFRPRE86IFVuc3VyZSByZWFkaW5nIGEgZmlsZSBjYW4gZmFpbCBvciBuZWVkcyByZXRyeWluZy5cclxuICAgIGxldCBsYXN0UmVhZDtcclxuICAgIGNvbnN0IGZpbGVEYXRhID0gYXdhaXQgYXV0b1JldHJ5KG5zLCAoKSA9PiBucy5yZWFkKGZOYW1lKSxcclxuICAgICAgICBmID0+IChsYXN0UmVhZCA9IGYpICE9PSB1bmRlZmluZWQgJiYgZiAhPT0gXCJcIiAmJiBmICE9PSBpbml0aWFsQ29udGVudHMgJiYgISh0eXBlb2YgZiA9PSBcInN0cmluZ1wiICYmIGYuc3RhcnRzV2l0aChcIkVSUk9SOiBcIikpLFxyXG4gICAgICAgICgpID0+IGBcXG5ucy5yZWFkKCcke2ZOYW1lfScpIHJldHVybmVkIGEgYmFkIHJlc3VsdDogXCIke2xhc3RSZWFkfVwiLmAgK1xyXG4gICAgICAgICAgICBgXFxuICBTY3JpcHQ6ICAke2ZOYW1lQ29tbWFuZH1cXG4gIEFyZ3M6ICAgICR7SlNPTi5zdHJpbmdpZnkoYXJncyl9XFxuICBDb21tYW5kOiAke2NvbW1hbmR9YCArXHJcbiAgICAgICAgICAgIChsYXN0UmVhZCA9PSB1bmRlZmluZWQgPyAnXFxuVGhlIGRldmVsb3BlciBoYXMgbm8gaWRlYSBob3cgdGhpcyBjb3VsZCBoYXZlIGhhcHBlbmVkLiBQbGVhc2UgcG9zdCBhIHNjcmVlbnNob3Qgb2YgdGhpcyBlcnJvciBvbiBkaXNjb3JkLicgOlxyXG4gICAgICAgICAgICAgICAgbGFzdFJlYWQgPT0gaW5pdGlhbENvbnRlbnRzID8gYFxcblRoZSBzY3JpcHQgdGhhdCByYW4gdGhpcyB3aWxsIGxpa2VseSByZWNvdmVyIGFuZCB0cnkgYWdhaW4gbGF0ZXIgb25jZSB5b3UgaGF2ZSBtb3JlIGZyZWUgcmFtLmAgOlxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZWFkID09IFwiXCIgPyBgXFxuVGhlIGZpbGUgYXBwZWFycyB0byBoYXZlIGJlZW4gZGVsZXRlZCBiZWZvcmUgYSByZXN1bHQgY291bGQgYmUgcmV0cmlldmVkLiBQZXJoYXBzIHRoZXJlIGlzIGEgY29uZmxpY3Rpbmcgc2NyaXB0LmAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXFxuVGhlIHNjcmlwdCB3YXMgbGlrZWx5IHBhc3NlZCBpbnZhbGlkIGFyZ3VtZW50cy4gUGxlYXNlIHBvc3QgYSBzY3JlZW5zaG90IG9mIHRoaXMgZXJyb3Igb24gZGlzY29yZC5gKSxcclxuICAgICAgICBtYXhSZXRyaWVzLCByZXRyeURlbGF5TXMsIHVuZGVmaW5lZCwgdmVyYm9zZSwgdmVyYm9zZSk7XHJcbiAgICBpZiAodmVyYm9zZSkgbG9nKG5zLCBgUmVhZCB0aGUgZm9sbG93aW5nIGRhdGEgZm9yIGNvbW1hbmQgJHtjb21tYW5kfTpcXG4ke2ZpbGVEYXRhfWApO1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZmlsZURhdGEpOyAvLyBEZXNlcmlhbGl6ZSBpdCBiYWNrIGludG8gYW4gb2JqZWN0L2FycmF5IGFuZCByZXR1cm5cclxufVxyXG5cclxuLyoqIEV2YWx1YXRlIGFuIGFyYml0cmFyeSBucyBjb21tYW5kIGJ5IHdyaXRpbmcgaXQgdG8gYSBuZXcgc2NyaXB0IGFuZCB0aGVuIHJ1bm5pbmcgb3IgZXhlY3V0aW5nIGl0LlxyXG4gKiBAcGFyYW0ge05TfSBucyAtIFRoZSBuZXN0Y3JpcHQgaW5zdGFuY2UgcGFzc2VkIHRvIHlvdXIgc2NyaXB0J3MgbWFpbiBlbnRyeSBwb2ludFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZCAtIFRoZSBucyBjb21tYW5kIHRoYXQgc2hvdWxkIGJlIGludm9rZWQgdG8gZ2V0IHRoZSBkZXNpcmVkIGRhdGEgKGUuZy4gXCJucy5nZXRTZXJ2ZXIoJ2hvbWUnKVwiIClcclxuICogQHBhcmFtIHtzdHJpbmc9fSBmaWxlTmFtZSAtIChkZWZhdWx0IFwiL1RlbXAve2NvbW1hbmQtbmFtZX0udHh0XCIpIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIHdoaWNoIGRhdGEgd2lsbCBiZSB3cml0dGVuIHRvIGRpc2sgYnkgYSB0ZW1wb3JhcnkgcHJvY2Vzc1xyXG4gKiBAcGFyYW0ge2FyZ3M9fSBhcmdzIC0gYXJncyB0byBiZSBwYXNzZWQgaW4gYXMgYXJndW1lbnRzIHRvIGNvbW1hbmQgYmVpbmcgcnVuIGFzIGEgbmV3IHNjcmlwdC5cclxuICogQHBhcmFtIHtib29sPX0gdmVyYm9zZSAtIChkZWZhdWx0IGZhbHNlKSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGV2YWx1YXRpb24gcmVzdWx0IG9mIHRoZSBjb21tYW5kIGlzIHByaW50ZWQgdG8gdGhlIHRlcm1pbmFsXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuQ29tbWFuZChucywgY29tbWFuZCwgZmlsZU5hbWUsIGFyZ3MgPSBbXSwgdmVyYm9zZSA9IGZhbHNlLCBtYXhSZXRyaWVzID0gNSwgcmV0cnlEZWxheU1zID0gNTApIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wicnVuQ29tbWFuZFwiJyk7XHJcbiAgICBpZiAoIXZlcmJvc2UpIGRpc2FibGVMb2dzKG5zLCBbJ3J1biddKTtcclxuICAgIHJldHVybiBhd2FpdCBydW5Db21tYW5kX0N1c3RvbShucywgbnMucnVuLCBjb21tYW5kLCBmaWxlTmFtZSwgYXJncywgdmVyYm9zZSwgbWF4UmV0cmllcywgcmV0cnlEZWxheU1zKTtcclxufVxyXG5cclxuY29uc3QgX2NhY2hlZEV4cG9ydHMgPSBbXTtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAtIFRoZSBuZXN0Y3JpcHQgaW5zdGFuY2UgcGFzc2VkIHRvIHlvdXIgc2NyaXB0J3MgbWFpbiBlbnRyeSBwb2ludFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IFRoZSBzZXQgb2YgYWxsIGZ1bmNpdG9uIG5hbWVzIGV4cG9ydGVkIGJ5IHRoaXMgZmlsZS4gKi9cclxuZnVuY3Rpb24gZ2V0RXhwb3J0cyhucykge1xyXG4gICAgaWYgKF9jYWNoZWRFeHBvcnRzLmxlbmd0aCA+IDApIHJldHVybiBfY2FjaGVkRXhwb3J0cztcclxuICAgIGNvbnN0IHNjcmlwdEhlbHBlcnNSb3dzID0gbnMucmVhZChnZXRGaWxlUGF0aCgndHJhZGUvaGVscGVyLmpzJykpLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgZm9yIChjb25zdCByb3cgb2Ygc2NyaXB0SGVscGVyc1Jvd3MpIHtcclxuICAgICAgICBpZiAoIXJvdy5zdGFydHNXaXRoKFwiZXhwb3J0XCIpKSBjb250aW51ZTtcclxuICAgICAgICBjb25zdCBmdW5jTmFtZVN0YXJ0ID0gcm93LmluZGV4T2YoXCJmdW5jdGlvblwiKSArIFwiZnVuY3Rpb25cIi5sZW5ndGggKyAxO1xyXG4gICAgICAgIGNvbnN0IGZ1bmNOYW1lRW5kID0gcm93LmluZGV4T2YoXCIoXCIsIGZ1bmNOYW1lU3RhcnQpO1xyXG4gICAgICAgIF9jYWNoZWRFeHBvcnRzLnB1c2gocm93LnN1YnN0cmluZyhmdW5jTmFtZVN0YXJ0LCBmdW5jTmFtZUVuZCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9jYWNoZWRFeHBvcnRzO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gYWR2YW5jZWQgdmVyc2lvbiBvZiBydW5Db21tYW5kIHRoYXQgbGV0cyB5b3UgcGFzcyB5b3VyIG93biBcImlzQWxpdmVcIiB0ZXN0IHRvIHJlZHVjZSBSQU0gcmVxdWlyZW1lbnRzIChlLmcuIHRvIGF2b2lkIHJlZmVyZW5jaW5nIG5zLmlzUnVubmluZylcclxuICogSW1wb3J0aW5nIGluY3VycyAwIEdCIFJBTSAoYXNzdW1pbmcgZm5SdW4sIGZuV3JpdGUgYXJlIGltcGxlbWVudGVkIHVzaW5nIGFub3RoZXIgbnMgZnVuY3Rpb24geW91IGFscmVhZHkgcmVmZXJlbmNlIGVsc2V3aGVyZSBsaWtlIG5zLmV4ZWMpXHJcbiAqIEBwYXJhbSB7TlN9IG5zIC0gVGhlIG5lc3RjcmlwdCBpbnN0YW5jZSBwYXNzZWQgdG8geW91ciBzY3JpcHQncyBtYWluIGVudHJ5IHBvaW50XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuUnVuIC0gQSBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb24gdXNlZCB0byBzdGFydCB0aGUgbmV3IHNyaXB0LCBlLmcuIGBucy5ydW5gIG9yIGAoZiwuLi5hcmdzKSA9PiBucy5leGVjKGYsIFwiaG9tZVwiLCAuLi5hcmdzKWBcclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmQgLSBUaGUgbnMgY29tbWFuZCB0aGF0IHNob3VsZCBiZSBpbnZva2VkIHRvIGdldCB0aGUgZGVzaXJlZCBkYXRhIChlLmcuIFwibnMuZ2V0U2VydmVyKCdob21lJylcIiApXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gZmlsZU5hbWUgLSAoZGVmYXVsdCBcIi9UZW1wL3tjb21tYW5kaGFzaH0tZGF0YS50eHRcIikgVGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gd2hpY2ggZGF0YSB3aWxsIGJlIHdyaXR0ZW4gdG8gZGlzayBieSBhIHRlbXBvcmFyeSBwcm9jZXNzXHJcbiAqIEBwYXJhbSB7YXJncz19IGFyZ3MgLSBhcmdzIHRvIGJlIHBhc3NlZCBpbiBhcyBhcmd1bWVudHMgdG8gY29tbWFuZCBiZWluZyBydW4gYXMgYSBuZXcgc2NyaXB0LlxyXG4gKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Db21tYW5kX0N1c3RvbShucywgZm5SdW4sIGNvbW1hbmQsIGZpbGVOYW1lLCBhcmdzID0gW10sIHZlcmJvc2UgPSBmYWxzZSwgbWF4UmV0cmllcyA9IDUsIHJldHJ5RGVsYXlNcyA9IDUwKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcInJ1bkNvbW1hbmRfQ3VzdG9tXCInKTtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcmdzKSkgdGhyb3cgbmV3IEVycm9yKGBhcmdzIHNwZWNpZmllZCB3ZXJlIGEgJHt0eXBlb2YgYXJnc30sIGJ1dCBhbiBhcnJheSBpcyByZXF1aXJlZC5gKTtcclxuICAgIGlmICghdmVyYm9zZSkgZGlzYWJsZUxvZ3MobnMsIFsnc2xlZXAnXSk7XHJcbiAgICAvLyBBdXRvLWltcG9ydCBhbnkgaGVscGVycyB0aGF0IHRoZSB0ZW1wIHNjcmlwdCBhdHRlbXB0cyB0byB1c2VcclxuICAgIGNvbnN0IHJlcXVpcmVkID0gZ2V0RXhwb3J0cyhucykuZmlsdGVyKGUgPT4gY29tbWFuZC5pbmNsdWRlcyhgJHtlfShgKSk7XHJcbiAgICBsZXQgc2NyaXB0ID0gKHJlcXVpcmVkLmxlbmd0aCA+IDAgPyBgaW1wb3J0IHsgJHtyZXF1aXJlZC5qb2luKFwiLCBcIil9IH0gZnJvbSAndHJhZGUvaGVscGVyLmpzJ1xcbmAgOiAnJykgK1xyXG4gICAgICAgIGBleHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykgeyAke2NvbW1hbmR9IH1gO1xyXG4gICAgZmlsZU5hbWUgPSBmaWxlTmFtZSB8fCBnZXREZWZhdWx0Q29tbWFuZEZpbGVOYW1lKGNvbW1hbmQsICcuanMnKTtcclxuICAgIGlmICh2ZXJib3NlKVxyXG4gICAgICAgIGxvZyhucywgYElORk86IFVzaW5nIGEgdGVtcG9yYXJ5IHNjcmlwdCAoJHtmaWxlTmFtZX0pIHRvIGV4ZWN1dGUgdGhlIGNvbW1hbmQ6YCArXHJcbiAgICAgICAgICAgIGBcXG4gICR7Y29tbWFuZH1cXG5XaXRoIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOiAgICAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xyXG4gICAgLy8gSXQncyBwb3NzaWJsZSBmb3IgdGhlIGZpbGUgdG8gYmUgZGVsZXRlZCB3aGlsZSB3ZSdyZSB0cnlpbmcgdG8gZXhlY3V0ZSBpdCwgc28gZXZlbiB3cmFwIHdyaXRpbmcgdGhlIGZpbGUgaW4gYSByZXRyeVxyXG4gICAgcmV0dXJuIGF3YWl0IGF1dG9SZXRyeShucywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBUbyBpbXByb3ZlIHBlcmZvcm1hbmNlLCBkb24ndCByZS13cml0ZSB0aGUgdGVtcCBzY3JpcHQgaWYgaXQncyBhbHJlYWR5IGluIHBsYWNlIHdpdGggdGhlIGNvcnJlY3QgY29udGVudHMuXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENvbnRlbnRzID0gbnMucmVhZChmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChvbGRDb250ZW50cyAhPSBzY3JpcHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvbGRDb250ZW50cykgLy8gQ3JlYXRlIHNvbWUgbm9pc2UgaWYgdGVtcCBzY3JpcHRzIGFyZSBiZWluZyBjcmVhdGVkIHdpdGggdGhlIHNhbWUgbmFtZSBidXQgZGlmZmVyZW50IGNvbnRlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgbnMudHByaW50KGBXQVJOSU5HOiBIYWQgdG8gb3ZlcndyaXRlIHRlbXAgc2NyaXB0ICR7ZmlsZU5hbWV9XFxuT2xkIENvbnRlbnRzOlxcbiR7b2xkQ29udGVudHN9XFxuTmV3IENvbnRlbnRzOlxcbiR7c2NyaXB0fWAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXFxuVGhpcyB3YXJuaW5nIGlzIGdlbmVyYXRlZCBhcyBwYXJ0IG9mIGFuIGVmZm9ydCB0byBzd2l0Y2ggb3ZlciB0byB1c2luZyBvbmx5ICdpbW11dGFibGUnIHRlbXAgc2NyaXB0cy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBQbGVhc2UgcGFzdGUgYSBzY3JlZW5zaG90IGluIERpc2NvcmQgYXQgaHR0cHM6Ly9kaXNjb3JkLmNvbS9jaGFubmVscy80MTUyMDc1MDgzMDM1NDQzMjEvOTM1NjY3NTMxMTExMzQyMjAwYCk7XHJcbiAgICAgICAgICAgICAgICBucy53cml0ZShmaWxlTmFtZSwgc2NyaXB0LCBcIndcIik7XHJcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgc2NyaXB0IHRvIGFwcGVhciBhbmQgYmUgcmVhZGFibGUgKGdhbWUgY2FuIGJlIGZpbmlja3kgb24gYWN0dWFsbHkgY29tcGxldGluZyB0aGUgd3JpdGUpXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBhdXRvUmV0cnkobnMsICgpID0+IG5zLnJlYWQoZmlsZU5hbWUpLCBjID0+IGMgPT0gc2NyaXB0LCAoKSA9PiBgVGVtcG9yYXJ5IHNjcmlwdCAke2ZpbGVOYW1lfSBpcyBub3QgYXZhaWxhYmxlLCBgICtcclxuICAgICAgICAgICAgICAgICAgICBgZGVzcGl0ZSBoYXZpbmcgd3JpdHRlbiBpdC4gKERpZCBhIGNvbXBldGluZyBwcm9jZXNzIGRlbGV0ZSBvciBvdmVyd3JpdGUgaXQ/KWAsIG1heFJldHJpZXMsIHJldHJ5RGVsYXlNcywgdW5kZWZpbmVkLCB2ZXJib3NlLCB2ZXJib3NlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBSdW4gdGhlIHNjcmlwdCwgbm93IHRoYXQgd2UncmUgc3VyZSBpdCBpcyBpbiBwbGFjZVxyXG4gICAgICAgICAgICByZXR1cm4gZm5SdW4oZmlsZU5hbWUsIDEgLyogQWx3YXlzIDEgdGhyZWFkICovLCAuLi5hcmdzKTtcclxuICAgICAgICB9LCBwaWQgPT4gcGlkICE9PSAwLFxyXG4gICAgICAgICgpID0+IGBUaGUgdGVtcCBzY3JpcHQgd2FzIG5vdCBydW4gKGxpa2VseSBkdWUgdG8gaW5zdWZmaWNpZW50IFJBTSkuYCArXHJcbiAgICAgICAgICAgIGBcXG4gIFNjcmlwdDogICR7ZmlsZU5hbWV9XFxuICBBcmdzOiAgICAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfVxcbiAgQ29tbWFuZDogJHtjb21tYW5kfWAgK1xyXG4gICAgICAgICAgICBgXFxuVGhlIHNjcmlwdCB0aGF0IHJhbiB0aGlzIHdpbGwgbGlrZWx5IHJlY292ZXIgYW5kIHRyeSBhZ2FpbiBsYXRlciBvbmNlIHlvdSBoYXZlIG1vcmUgZnJlZSByYW0uYCxcclxuICAgICAgICBtYXhSZXRyaWVzLCByZXRyeURlbGF5TXMsIHVuZGVmaW5lZCwgdmVyYm9zZSwgdmVyYm9zZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXYWl0IGZvciBhIHByb2Nlc3MgaWQgdG8gY29tcGxldGUgcnVubmluZ1xyXG4gKiBJbXBvcnRpbmcgaW5jdXJzIGEgbWF4aW11bSBvZiAwLjEgR0IgUkFNIChmb3IgbnMuaXNSdW5uaW5nKVxyXG4gKiBAcGFyYW0ge05TfSBucyAtIFRoZSBuZXN0Y3JpcHQgaW5zdGFuY2UgcGFzc2VkIHRvIHlvdXIgc2NyaXB0J3MgbWFpbiBlbnRyeSBwb2ludFxyXG4gKiBAcGFyYW0ge2ludH0gcGlkIC0gVGhlIHByb2Nlc3MgaWQgdG8gbW9uaXRvclxyXG4gKiBAcGFyYW0ge2Jvb2w9fSB2ZXJib3NlIC0gKGRlZmF1bHQgZmFsc2UpIElmIHNldCB0byB0cnVlLCBwaWQgYW5kIHJlc3VsdCBvZiBjb21tYW5kIGFyZSBsb2dnZWQuXHJcbiAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JQcm9jZXNzVG9Db21wbGV0ZShucywgcGlkLCB2ZXJib3NlKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcIndhaXRGb3JQcm9jZXNzVG9Db21wbGV0ZVwiJyk7XHJcbiAgICBpZiAoIXZlcmJvc2UpIGRpc2FibGVMb2dzKG5zLCBbJ2lzUnVubmluZyddKTtcclxuICAgIHJldHVybiBhd2FpdCB3YWl0Rm9yUHJvY2Vzc1RvQ29tcGxldGVfQ3VzdG9tKG5zLCBucy5pc1J1bm5pbmcsIHBpZCwgdmVyYm9zZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhZHZhbmNlZCB2ZXJzaW9uIG9mIHdhaXRGb3JQcm9jZXNzVG9Db21wbGV0ZSB0aGF0IGxldHMgeW91IHBhc3MgeW91ciBvd24gXCJpc0FsaXZlXCIgdGVzdCB0byByZWR1Y2UgUkFNIHJlcXVpcmVtZW50cyAoZS5nLiB0byBhdm9pZCByZWZlcmVuY2luZyBucy5pc1J1bm5pbmcpXHJcbiAqIEltcG9ydGluZyBpbmN1cnMgMCBHQiBSQU0gKGFzc3VtaW5nIGZuSXNBbGl2ZSBpcyBpbXBsZW1lbnRlZCB1c2luZyBhbm90aGVyIG5zIGZ1bmN0aW9uIHlvdSBhbHJlYWR5IHJlZmVyZW5jZSBlbHNld2hlcmUgbGlrZSBucy5wcylcclxuICogQHBhcmFtIHtOU30gbnMgLSBUaGUgbmVzdGNyaXB0IGluc3RhbmNlIHBhc3NlZCB0byB5b3VyIHNjcmlwdCdzIG1haW4gZW50cnkgcG9pbnRcclxuICogQHBhcmFtIHsocGlkOiBudW1iZXIpID0+IFByb21pc2U8Ym9vbGVhbj59IGZuSXNBbGl2ZSAtIEEgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9uIHVzZWQgdG8gc3RhcnQgdGhlIG5ldyBzcmlwdCwgZS5nLiBgbnMuaXNSdW5uaW5nYCBvciBgcGlkID0+IG5zLnBzKFwiaG9tZVwiKS5zb21lKHByb2Nlc3MgPT4gcHJvY2Vzcy5waWQgPT09IHBpZClgXHJcbiAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JQcm9jZXNzVG9Db21wbGV0ZV9DdXN0b20obnMsIGZuSXNBbGl2ZSwgcGlkLCB2ZXJib3NlKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcIndhaXRGb3JQcm9jZXNzVG9Db21wbGV0ZV9DdXN0b21cIicpO1xyXG4gICAgaWYgKCF2ZXJib3NlKSBkaXNhYmxlTG9ncyhucywgWydzbGVlcCddKTtcclxuICAgIC8vIFdhaXQgZm9yIHRoZSBQSUQgdG8gc3RvcCBydW5uaW5nIChjaGVhcGVyIHRoYW4gZS5nLiBkZWxldGluZyAocm0pIGEgcG9zc2libHkgcHJlLWV4aXN0aW5nIGZpbGUgYW5kIHdhaXRpbmcgZm9yIGl0IHRvIGJlIHJlY3JlYXRlZClcclxuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XHJcbiAgICBsZXQgc2xlZXBNcyA9IDE7XHJcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgcmV0cmllcyA9IDA7IHJldHJpZXMgPCAxMDAwOyByZXRyaWVzKyspIHtcclxuICAgICAgICBpZiAoIShhd2FpdCBmbklzQWxpdmUocGlkKSkpIHtcclxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrOyAvLyBTY3JpcHQgaXMgZG9uZSBydW5uaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2ZXJib3NlICYmIHJldHJpZXMgJSAxMDAgPT09IDApIG5zLnByaW50KGBXYWl0aW5nIGZvciBwaWQgJHtwaWR9IHRvIGNvbXBsZXRlLi4uICgke2Zvcm1hdER1cmF0aW9uKERhdGUubm93KCkgLSBzdGFydCl9KWApO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKHNsZWVwTXMpO1xyXG4gICAgICAgIHNsZWVwTXMgPSBNYXRoLm1pbihzbGVlcE1zICogMiwgMjAwKTtcclxuICAgIH1cclxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBwcm9jZXNzIGhhcyBzaHV0IGRvd24gYW5kIHdlIGhhdmVuJ3QganVzdCBzdG9wcGVkIHJldHJ5aW5nXHJcbiAgICBpZiAoIWRvbmUpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYHJ1bi1jb21tYW5kIHBpZCAke3BpZH0gaXMgcnVubmluZyBtdWNoIGxvbmdlciB0aGFuIGV4cGVjdGVkLiBNYXggcmV0cmllcyBleGNlZWRlZC5gO1xyXG4gICAgICAgIG5zLnByaW50KGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gRXJyb3IgaW5zdGFuY2UsIHJldHVybnMgaXQgYXMgaXMsIG90aGVyd2lzZSwgcmV0dXJucyBhIG5ldyBFcnJvciBpbnN0YW5jZS4gKi9cclxuZnVuY3Rpb24gYXNFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcih0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gZXJyb3IgOiBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xyXG59XHJcblxyXG4vKiogSGVscGVyIHRvIHJldHJ5IHNvbWV0aGluZyB0aGF0IGZhaWxlZCB0ZW1wb3JhcmlseSAoY2FuIGhhcHBlbiB3aGVuIGUuZy4gd2UgdGVtcG9yYXJpbHkgZG9uJ3QgaGF2ZSBlbm91Z2ggUkFNIHRvIHJ1bilcclxuICogQHBhcmFtIHtOU30gbnMgLSBUaGUgbmVzdGNyaXB0IGluc3RhbmNlIHBhc3NlZCB0byB5b3VyIHNjcmlwdCdzIG1haW4gZW50cnkgcG9pbnQgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF1dG9SZXRyeShucywgZm5GdW5jdGlvblRoYXRNYXlGYWlsLCBmblN1Y2Nlc3NDb25kaXRpb24sIGVycm9yQ29udGV4dCA9IFwiU3VjY2VzcyBjb25kaXRpb24gbm90IG1ldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFJldHJpZXMgPSA1LCBpbml0aWFsUmV0cnlEZWxheU1zID0gNTAsIGJhY2tvZmZSYXRlID0gMywgdmVyYm9zZSA9IGZhbHNlLCB0cHJpbnRGYXRhbEVycm9ycyA9IHRydWUpIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wiYXV0b1JldHJ5XCInKTtcclxuICAgIGxldCByZXRyeURlbGF5TXMgPSBpbml0aWFsUmV0cnlEZWxheU1zLCBhdHRlbXB0cyA9IDA7XHJcbiAgICB3aGlsZSAoYXR0ZW1wdHMrKyA8PSBtYXhSZXRyaWVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm5GdW5jdGlvblRoYXRNYXlGYWlsKClcclxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0eXBlb2YgZXJyb3JDb250ZXh0ID09PSAnc3RyaW5nJyA/IGVycm9yQ29udGV4dCA6IGVycm9yQ29udGV4dCgpO1xyXG4gICAgICAgICAgICBpZiAoIWZuU3VjY2Vzc0NvbmRpdGlvbihyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgYXNFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc3QgZmF0YWwgPSBhdHRlbXB0cyA+PSBtYXhSZXRyaWVzO1xyXG4gICAgICAgICAgICBsb2cobnMsIGAke2ZhdGFsID8gJ0ZBSUwnIDogJ0lORk8nfTogQXR0ZW1wdCAke2F0dGVtcHRzfSBvZiAke21heFJldHJpZXN9IGZhaWxlZGAgK1xyXG4gICAgICAgICAgICAgICAgKGZhdGFsID8gYDogJHt0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gZXJyb3IgOiBlcnJvci5tZXNzYWdlIHx8IEpTT04uc3RyaW5naWZ5KGVycm9yKX1gIDogYC4gVHJ5aW5nIGFnYWluIGluICR7cmV0cnlEZWxheU1zfW1zLi4uYCksXHJcbiAgICAgICAgICAgICAgICB0cHJpbnRGYXRhbEVycm9ycyAmJiBmYXRhbCwgIXZlcmJvc2UgPyB1bmRlZmluZWQgOiAoZmF0YWwgPyAnZXJyb3InIDogJ2luZm8nKSlcclxuICAgICAgICAgICAgaWYgKGZhdGFsKSB0aHJvdyBhc0Vycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAocmV0cnlEZWxheU1zKTtcclxuICAgICAgICAgICAgcmV0cnlEZWxheU1zICo9IGJhY2tvZmZSYXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEhlbHBlciB0byBsb2cgYSBtZXNzYWdlLCBhbmQgb3B0aW9uYWxseSBhbHNvIHRwcmludCBpdCBhbmQgdG9hc3QgaXRcclxuICogQHBhcmFtIHtOU30gbnMgLSBUaGUgbmVzdGNyaXB0IGluc3RhbmNlIHBhc3NlZCB0byB5b3VyIHNjcmlwdCdzIG1haW4gZW50cnkgcG9pbnQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZyhucywgbWVzc2FnZSA9IFwiXCIsIGFsc29QcmludFRvVGVybWluYWwgPSBmYWxzZSwgdG9hc3RTdHlsZSA9IFwiXCIsIG1heFRvYXN0TGVuZ3RoID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wibG9nXCInKTtcclxuICAgIG5zLnByaW50KG1lc3NhZ2UpO1xyXG4gICAgaWYgKHRvYXN0U3R5bGUpIG5zLnRvYXN0KG1lc3NhZ2UubGVuZ3RoIDw9IG1heFRvYXN0TGVuZ3RoID8gbWVzc2FnZSA6IG1lc3NhZ2Uuc3Vic3RyaW5nKDAsIG1heFRvYXN0TGVuZ3RoIC0gMykgKyBcIi4uLlwiLCB0b2FzdFN0eWxlKTtcclxuICAgIGlmIChhbHNvUHJpbnRUb1Rlcm1pbmFsKSB7XHJcbiAgICAgICAgbnMudHByaW50KG1lc3NhZ2UpO1xyXG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSB3YXkgd3JpdGUgdGhpbmdzIGxvZ2dlZCB0byB0aGUgdGVybWluYWwgdG8gYSBcInBlcm1hbmVudFwiIHRlcm1pbmFsIGxvZyBmaWxlLCBwcmVmZXJhYmx5IHdpdGhvdXQgdGhpcyBiZWNvbWluZyBhbiBhc3luYyBmdW5jdGlvbi5cclxuICAgICAgICAvLyAgICAgICBQZXJoYXBzIHdlIGNvcHkgbG9ncyB0byBhIHBvcnQgc28gdGhhdCBhIHNlcGFyYXRlIHNjcmlwdCBjYW4gb3B0aW9uYWxseSBwb3AgYW5kIGFwcGVuZCB0aGVtIHRvIGEgZmlsZS5cclxuICAgICAgICAvL25zLndyaXRlKFwibG9nLnRlcm1pbmFsLnR4dFwiLCBtZXNzYWdlICsgJ1xcbicsICdhJyk7IC8vIE5vdGU6IHdlIHNob3VsZCBnZXQgYXdheSB3aXRoIG5vdCBhd2FpdGluZyB0aGlzIHByb21pc2Ugc2luY2UgaXQncyBub3QgYSBzY3JpcHQgZmlsZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1lc3NhZ2U7XHJcbn1cclxuXHJcbi8qKiBIZWxwZXIgdG8gZ2V0IGEgbGlzdCBvZiBhbGwgaG9zdG5hbWVzIG9uIHRoZSBuZXR3b3JrXHJcbiAqIEBwYXJhbSB7TlN9IG5zIC0gVGhlIG5lc3RjcmlwdCBpbnN0YW5jZSBwYXNzZWQgdG8geW91ciBzY3JpcHQncyBtYWluIGVudHJ5IHBvaW50ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FuQWxsU2VydmVycyhucykge1xyXG4gICAgY2hlY2tOc0luc3RhbmNlKG5zLCAnXCJzY2FuQWxsU2VydmVyc1wiJyk7XHJcbiAgICBsZXQgZGlzY292ZXJlZEhvc3RzID0gW107IC8vIEhvc3RzIChhLmsuYS4gc2VydmVycykgd2UgaGF2ZSBzY2FubmVkXHJcbiAgICBsZXQgaG9zdHNUb1NjYW4gPSBbXCJob21lXCJdOyAvLyBIb3N0cyB3ZSBrbm93IGFib3V0LCBidXQgaGF2ZSBubyB5ZXQgc2Nhbm5lZFxyXG4gICAgbGV0IGluZmluaXRlTG9vcFByb3RlY3Rpb24gPSA5OTk5OyAvLyBJbiBjYXNlIHlvdSBtZXNzIHdpdGggdGhpcyBjb2RlLCB0aGlzIHNob3VsZCBzYXZlIHlvdSBmcm9tIGdldHRpbmcgc3R1Y2tcclxuICAgIHdoaWxlIChob3N0c1RvU2Nhbi5sZW5ndGggPiAwICYmIGluZmluaXRlTG9vcFByb3RlY3Rpb24tLSA+IDApIHsgLy8gTG9vcCB1bnRpbCB0aGUgbGlzdCBvZiBob3N0cyB0byBzY2FuIGlzIGVtcHR5XHJcbiAgICAgICAgbGV0IGhvc3ROYW1lID0gaG9zdHNUb1NjYW4ucG9wKCk7IC8vIEdldCB0aGUgbmV4dCBob3N0IHRvIGJlIHNjYW5uZWRcclxuICAgICAgICBkaXNjb3ZlcmVkSG9zdHMucHVzaChob3N0TmFtZSk7IC8vIE1hcmsgdGhpcyBob3N0IGFzIFwic2Nhbm5lZFwiXHJcbiAgICAgICAgZm9yIChjb25zdCBjb25uZWN0ZWRIb3N0IG9mIG5zLnNjYW4oaG9zdE5hbWUpKSAvLyBcInNjYW5cIiAobGlzdCBhbGwgaG9zdHMgY29ubmVjdGVkIHRvIHRoaXMgb25lKVxyXG4gICAgICAgICAgICBpZiAoIWRpc2NvdmVyZWRIb3N0cy5pbmNsdWRlcyhjb25uZWN0ZWRIb3N0KSAmJiAhaG9zdHNUb1NjYW4uaW5jbHVkZXMoY29ubmVjdGVkSG9zdCkpIC8vIElmIHdlIGhhdmVuJ3QgZm91bmQgdGhpcyBob3N0XHJcbiAgICAgICAgICAgICAgICBob3N0c1RvU2Nhbi5wdXNoKGNvbm5lY3RlZEhvc3QpOyAvLyBBZGQgaXQgdG8gdGhlIHF1ZXVlIG9mIGhvc3RzIHRvIGJlIHNjYW5uZWRcclxuICAgIH1cclxuICAgIHJldHVybiBkaXNjb3ZlcmVkSG9zdHM7IC8vIFRoZSBsaXN0IG9mIHNjYW5uZWQgaG9zdHMgc2hvdWxkIG5vdyBiZSB0aGUgc2V0IG9mIGFsbCBob3N0cyBpbiB0aGUgZ2FtZSFcclxufVxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zXHJcbiAqIEdldCBhIGRpY3Rpb25hcnkgb2YgYWN0aXZlIHNvdXJjZSBmaWxlcywgdGFraW5nIGludG8gYWNjb3VudCB0aGUgY3VycmVudCBhY3RpdmUgYml0bm9kZSBhcyB3ZWxsIChvcHRpb25hbGx5IGRpc2FibGVkKS4gKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBY3RpdmVTb3VyY2VGaWxlcyhucywgaW5jbHVkZUxldmVsc0Zyb21DdXJyZW50Qml0bm9kZSA9IHRydWUpIHtcclxuICAgIHJldHVybiBhd2FpdCBnZXRBY3RpdmVTb3VyY2VGaWxlc19DdXN0b20obnMsIGdldE5zRGF0YVRocm91Z2hGaWxlLCBpbmNsdWRlTGV2ZWxzRnJvbUN1cnJlbnRCaXRub2RlKTtcclxufVxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zXHJcbiAqIEBwYXJhbSB7KG5zOiBOUywgY29tbWFuZDogc3RyaW5nLCBmTmFtZT86IHN0cmluZywgYXJncz86IGFueSwgdmVyYm9zZT86IGFueSwgbWF4UmV0cmllcz86IG51bWJlciwgcmV0cnlEZWxheU1zPzogbnVtYmVyKSA9PiBQcm9taXNlPGFueT59IGZuR2V0TnNEYXRhVGhyb3VnaEZpbGVcclxuICogZ2V0QWN0aXZlU291cmNlRmlsZXMgSGVscGVyIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIHBhc3MgaW4gdGhlaXIgY2hvc2VuIGltcGxlbWVudGF0aW9uIG9mIGdldE5zRGF0YVRocm91Z2hGaWxlIHRvIG1pbmltaXplIFJBTSB1c2FnZSAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2ZVNvdXJjZUZpbGVzX0N1c3RvbShucywgZm5HZXROc0RhdGFUaHJvdWdoRmlsZSwgaW5jbHVkZUxldmVsc0Zyb21DdXJyZW50Qml0bm9kZSA9IHRydWUpIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wiZ2V0QWN0aXZlU291cmNlRmlsZXNcIicpO1xyXG4gICAgLy8gRmluZCBvdXQgd2hhdCBzb3VyY2UgZmlsZXMgdGhlIHVzZXIgaGFzIHVubG9ja2VkXHJcbiAgICBsZXQgZGljdFNvdXJjZUZpbGVzO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBkaWN0U291cmNlRmlsZXMgPSBhd2FpdCBmbkdldE5zRGF0YVRocm91Z2hGaWxlKG5zLFxyXG4gICAgICAgICAgICBgT2JqZWN0LmZyb21FbnRyaWVzKG5zLnNpbmd1bGFyaXR5LmdldE93bmVkU291cmNlRmlsZXMoKS5tYXAoc2YgPT4gW3NmLm4sIHNmLmx2bF0pKWAsXHJcbiAgICAgICAgICAgICcvVGVtcC9vd25lZC1zb3VyY2UtZmlsZXMudHh0Jyk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgICBkaWN0U291cmNlRmlsZXMgPSB7fTtcclxuICAgIH0gLy8gSWYgdGhpcyBmYWlscyAoZS5nLiBsb3cgUkFNKSwgcmV0dXJuIGFuIGVtcHR5IGRpY3Rpb25hcnlcclxuICAgIC8vIElmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBpbiBhIGdpdmVuIGJpdG5vZGUsIHRoZXkgd2lsbCBoYXZlIGl0cyBmZWF0dXJlcyB1bmxvY2tlZFxyXG4gICAgaWYgKGluY2x1ZGVMZXZlbHNGcm9tQ3VycmVudEJpdG5vZGUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IChhd2FpdCBmbkdldE5zRGF0YVRocm91Z2hGaWxlKG5zLCAnbnMuZ2V0UmVzZXRJbmZvKCknLCAnL1RlbXAvcmVzZXQtaW5mby50eHQnKSkuY3VycmVudE5vZGU7XHJcbiAgICAgICAgICAgIGRpY3RTb3VyY2VGaWxlc1tjdXJyZW50Tm9kZV0gPSBNYXRoLm1heCgzLCBkaWN0U291cmNlRmlsZXNbY3VycmVudE5vZGVdIHx8IDApO1xyXG4gICAgICAgIH0gY2F0Y2ggeyAvKiBXZSBhcmUgZXhwZWN0ZWQgdG8gYmUgZmF1bHQtdG9sZXJhbnQgaW4gbG93LXJhbSBjb25kaXRpb25zICovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRpY3RTb3VyY2VGaWxlcztcclxufVxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zXHJcbiAqIFJldHVybiBiaXRub2RlIG11bHRpcGxlcnMsIG9yIG51bGwgaWYgdGhleSBjYW5ub3QgYmUgYWNjZXNzZWQuICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHJ5R2V0Qml0Tm9kZU11bHRpcGxpZXJzKG5zKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdHJ5R2V0Qml0Tm9kZU11bHRpcGxpZXJzX0N1c3RvbShucywgZ2V0TnNEYXRhVGhyb3VnaEZpbGUpO1xyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogdHJ5R2V0Qml0Tm9kZU11bHRpcGxpZXJzIEhlbHBlciB0aGF0IGFsbG93cyB0aGUgdXNlciB0byBwYXNzIGluIHRoZWlyIGNob3NlbiBpbXBsZW1lbnRhdGlvbiBvZiBnZXROc0RhdGFUaHJvdWdoRmlsZSB0byBtaW5pbWl6ZSBSQU0gdXNhZ2UgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0cnlHZXRCaXROb2RlTXVsdGlwbGllcnNfQ3VzdG9tKG5zLCBmbkdldE5zRGF0YVRocm91Z2hGaWxlKSB7XHJcbiAgICBjaGVja05zSW5zdGFuY2UobnMsICdcInRyeUdldEJpdE5vZGVNdWx0aXBsaWVyc1wiJyk7XHJcbiAgICBsZXQgY2FuR2V0Qml0Tm9kZU11bHRpcGxpZXJzID0gZmFsc2U7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNhbkdldEJpdE5vZGVNdWx0aXBsaWVycyA9IDUgaW4gKGF3YWl0IGdldEFjdGl2ZVNvdXJjZUZpbGVzX0N1c3RvbShucywgZm5HZXROc0RhdGFUaHJvdWdoRmlsZSkpO1xyXG4gICAgfSBjYXRjaCB7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNhbkdldEJpdE5vZGVNdWx0aXBsaWVycykgcmV0dXJuIG51bGw7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBmbkdldE5zRGF0YVRocm91Z2hGaWxlKG5zLCAnbnMuZ2V0Qml0Tm9kZU11bHRpcGxpZXJzKCknLCAnL1RlbXAvYml0bm9kZS1tdWx0aXBsaWVycy50eHQnKTtcclxuICAgIH0gY2F0Y2gge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBuc1xyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIG9mIHRoZSBjdXJyZW50IHNjcmlwdCBydW5uaW5nIG9uIHRoZSBzcGVjaWZpZWQgaG9zdC4gKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbnN0YW5jZUNvdW50KG5zLCBvbkhvc3QgPSBcImhvbWVcIiwgd2FybiA9IHRydWUsIHRhaWxPdGhlckluc3RhbmNlcyA9IHRydWUpIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wiYWxyZWFkeVJ1bm5pbmdcIicpO1xyXG4gICAgY29uc3Qgc2NyaXB0TmFtZSA9IG5zLmdldFNjcmlwdE5hbWUoKTtcclxuICAgIGNvbnN0IG90aGVycyA9IGF3YWl0IGdldE5zRGF0YVRocm91Z2hGaWxlKG5zLCAnbnMucHMobnMuYXJnc1swXSkuZmlsdGVyKHAgPT4gcC5maWxlbmFtZSA9PSBucy5hcmdzWzFdKS5tYXAocCA9PiBwLnBpZCknLFxyXG4gICAgICAgICcvVGVtcC9wcy1vdGhlci1pbnN0YW5jZXMudHh0JywgW29uSG9zdCwgc2NyaXB0TmFtZV0pO1xyXG4gICAgaWYgKG90aGVycy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgIGlmICh3YXJuKVxyXG4gICAgICAgICAgICBsb2cobnMsIGBXQVJOSU5HOiBZb3UgY2Fubm90IHN0YXJ0IG11bHRpcGxlIHZlcnNpb25zIG9mIHRoaXMgc2NyaXB0ICgke3NjcmlwdE5hbWV9KS4gUGxlYXNlIHNodXQgZG93biB0aGUgb3RoZXIgaW5zdGFuY2UgZmlyc3QuYCArXHJcbiAgICAgICAgICAgICAgICAodGFpbE90aGVySW5zdGFuY2VzID8gJyAoVG8gaGVscCB3aXRoIHRoaXMsIGEgdGFpbCB3aW5kb3cgZm9yIHRoZSBvdGhlciBpbnN0YW5jZSB3aWxsIGJlIG9wZW5lZCknIDogJycpLCB0cnVlLCAnd2FybmluZycpO1xyXG4gICAgICAgIGlmICh0YWlsT3RoZXJJbnN0YW5jZXMpIC8vIFRhaWwgYWxsIGJ1dCB0aGUgbGFzdCBwaWQsIHNpbmNlIGl0IHdpbGwgYmVsb25nIHRvIHRoZSBjdXJyZW50IGluc3RhbmNlICh3aGljaCB3aWxsIGJlIHNodXQgZG93bilcclxuICAgICAgICAgICAgb3RoZXJzLnNsaWNlKDAsIG90aGVycy5sZW5ndGggLSAxKS5mb3JFYWNoKHBpZCA9PiBucy50YWlsKHBpZCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG90aGVycy5sZW5ndGg7XHJcbn1cclxuXHJcbmxldCBjYWNoZWRTdG9ja1N5bWJvbHMgPSBudWxsOyAvLyBDYWNoZSBvZiBzdG9jayBzeW1ib2xzIHNpbmNlIHRoZXNlIG5ldmVyIGNoYW5nZVxyXG5cclxuLyoqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYWxsIHN0b2NrIHN5bWJvbHMsIG9yIG51bGwgaWYgeW91IGRvIG5vdCBoYXZlIFRJWCBhcGkgYWNjZXNzLlxyXG4gKiBDYWNoZXMgc3ltYm9scyB0aGUgZmlyc3QgdGltZSB0aGV5IGFyZSBzdWNjZXNzZnVsbHkgcmVxdWVzdGVkLCBzaW5jZSBzeW1ib2xzIG5ldmVyIGNoYW5nZS5cclxuICogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0b2NrU3ltYm9scyhucykge1xyXG4gICAgY2FjaGVkU3RvY2tTeW1ib2xzID8/PSBhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucyxcclxuICAgICAgICBgKCgpID0+IHsgdHJ5IHsgcmV0dXJuIG5zLnN0b2NrLmdldFN5bWJvbHMoKTsgfSBjYXRjaCB7IHJldHVybiBudWxsOyB9IH0pKClgLFxyXG4gICAgICAgICcvVGVtcC9zdG9jay1zeW1ib2xzLnR4dCcpO1xyXG4gICAgcmV0dXJuIGNhY2hlZFN0b2NrU3ltYm9scztcclxufVxyXG5cclxuLyoqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIHRvdGFsIHZhbHVlIG9mIHN0b2NrcyB1c2luZyBhcyBsaXR0bGUgUkFNIGFzIHBvc3NpYmxlLlxyXG4gKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RvY2tzVmFsdWUobnMpIHtcclxuICAgIGxldCBzdG9ja1N5bWJvbHMgPSBhd2FpdCBnZXRTdG9ja1N5bWJvbHMobnMpO1xyXG4gICAgaWYgKHN0b2NrU3ltYm9scyA9PSBudWxsKSByZXR1cm4gMDsgLy8gTm8gVElYIEFQSSBBY2Nlc3NcclxuICAgIGNvbnN0IHN0b2NrR2V0QWxsID0gYXN5bmMgKGZuKSA9PiBhd2FpdCBnZXROc0RhdGFUaHJvdWdoRmlsZShucyxcclxuICAgICAgICBgKCgpID0+IHsgdHJ5IHsgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhucy5hcmdzLm1hcChzeW0gPT4gW3N5bSwgbnMuc3RvY2suJHtmbn0oc3ltKV0pKTsgfSBjYXRjaCB7IHJldHVybiBudWxsOyB9IH0pKClgLFxyXG4gICAgICAgIGAvVGVtcC9zdG9jay0ke2ZufS1hbGwudHh0YCwgc3RvY2tTeW1ib2xzKTtcclxuICAgIGNvbnN0IGFza1ByaWNlcyA9IGF3YWl0IHN0b2NrR2V0QWxsKCdnZXRBc2tQcmljZScpO1xyXG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgQnVnICMzMDQ6IElmIHdlIGxvc3QgVElYIGFjY2Vzcywgb3VyIGNhY2hlIG9mIHN0b2NrIHN5bWJvbHMgd2lsbCBzdGlsbCBiZSB2YWxpZCwgYnV0IHdlIHdvbid0IGJlIGFibGUgdG8gZ2V0IHByaWNlcy5cclxuICAgIGlmIChhc2tQcmljZXMgPT0gbnVsbCkgcmV0dXJuIDA7IC8vIE5vIFRJWCBBUEkgQWNjZXNzXHJcbiAgICBjb25zdCBiaWRQcmljZXMgPSBhd2FpdCBzdG9ja0dldEFsbCgnZ2V0QmlkUHJpY2UnKTtcclxuICAgIGNvbnN0IHBvc2l0aW9ucyA9IGF3YWl0IHN0b2NrR2V0QWxsKCdnZXRQb3NpdGlvbicpO1xyXG4gICAgcmV0dXJuIHN0b2NrU3ltYm9scy5tYXAoc3ltID0+ICh7c3ltLCBwb3M6IHBvc2l0aW9uc1tzeW1dLCBhc2s6IGFza1ByaWNlc1tzeW1dLCBiaWQ6IGJpZFByaWNlc1tzeW1dfSkpXHJcbiAgICAgICAgLnJlZHVjZSgodG90YWwsIHN0aykgPT4gdG90YWwgKyAoc3RrLnBvc1swXSAqIHN0ay5iaWQpIC8qIExvbmcgVmFsdWUgKi8gKyBzdGsucG9zWzJdICogKHN0ay5wb3NbM10gKiAyIC0gc3RrLmFzaykgLyogU2hvcnQgVmFsdWUgKi9cclxuICAgICAgICAgICAgLy8gU3VidHJhY3QgY29tbWlzc2lvbiBvbmx5IGlmIHdlIGhhdmUgb25lIG9yIG1vcmUgc2hhcmVzICh0aGlzIGlzIG1vbmV5IHdlIHdvbid0IGdldCB3aGVuIHdlIHNlbGwgb3VyIHBvc2l0aW9uKVxyXG4gICAgICAgICAgICAvLyBJZiBmb3Igc29tZSBjcmF6eSByZWFzb24gd2UgaGF2ZSBzaGFyZXMgYm90aCBpbiB0aGUgc2hvcnQgYW5kIGxvbmcgcG9zaXRpb24sIHdlJ2xsIGhhdmUgdG8gcGF5IHRoZSBjb21taXNzaW9uIHR3aWNlICh0d28gc2VwYXJhdGUgc2FsZXMpXHJcbiAgICAgICAgICAgIC0gMTAwMDAwICogKE1hdGguc2lnbihzdGsucG9zWzBdKSArIE1hdGguc2lnbihzdGsucG9zWzJdKSksIDApO1xyXG59XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnNcclxuICogUmV0dXJucyBhIGhlbHBmdWwgZXJyb3IgbWVzc2FnZSBpZiB3ZSBmb3Jnb3QgdG8gcGFzcyB0aGUgbnMgaW5zdGFuY2UgdG8gYSBmdW5jdGlvbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOc0luc3RhbmNlKG5zLCBmbk5hbWUgPSBcInRoaXMgZnVuY3Rpb25cIikge1xyXG4gICAgaWYgKG5zID09PSB1bmRlZmluZWQgfHwgIW5zLnByaW50KSB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmaXJzdCBhcmd1bWVudCB0byAke2ZuTmFtZX0gc2hvdWxkIGJlIGEgJ25zJyBpbnN0YW5jZS5gKTtcclxuICAgIHJldHVybiBucztcclxufVxyXG5cclxuLyoqIEEgaGVscGVyIHRvIHBhcnNlIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzIHdpdGggYSBidW5jaCBvZiBleHRyYSBmZWF0dXJlcywgc3VjaCBhc1xyXG4gKiAtIExvYWRpbmcgYSBwZXJzaXN0ZW50IGRlZmF1bHRzIG92ZXJyaWRlIGZyb20gYSBsb2NhbCBjb25maWcgZmlsZSBuYW1lZCBhZnRlciB0aGUgc2NyaXB0LlxyXG4gKiAtIFJlbmRlcmluZyBcIi0taGVscFwiIG91dHB1dCB3aXRob3V0IGFsbCBzY3JpcHRzIGhhdmluZyB0byBleHBsaWNpdGx5IHNwZWNpZnkgaXRcclxuICogQHBhcmFtIHtOU30gbnNcclxuICogQHBhcmFtIHtbc3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgc3RyaW5nW11dW119IGFyZ3NTY2hlbWEgLSBTcGVjaWZpY2F0aW9uIG9mIHBvc3NpYmxlIGNvbW1hbmQgbGluZSBhcmdzLiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ3VyYXRpb24obnMsIGFyZ3NTY2hlbWEpIHtcclxuICAgIGNoZWNrTnNJbnN0YW5jZShucywgJ1wiZ2V0Q29uZmlnXCInKTtcclxuICAgIGNvbnN0IHNjcmlwdE5hbWUgPSBucy5nZXRTY3JpcHROYW1lKCk7XHJcbiAgICAvLyBJZiB0aGUgdXNlciBoYXMgYSBsb2NhbCBjb25maWcgZmlsZSwgb3ZlcnJpZGUgdGhlIGRlZmF1bHRzIGluIHRoZSBhcmdzU2NoZW1hXHJcbiAgICBjb25zdCBjb25mTmFtZSA9IGAke3NjcmlwdE5hbWV9LmNvbmZpZy50eHRgO1xyXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gbnMucmVhZChjb25mTmFtZSk7XHJcbiAgICBjb25zdCBvdmVycmlkZGVuU2NoZW1hID0gb3ZlcnJpZGVzID8gWy4uLmFyZ3NTY2hlbWFdIDogYXJnc1NjaGVtYTsgLy8gQ2xvbmUgdGhlIG9yaWdpbmFsIGFyZ3Mgc2NoZW1hXHJcbiAgICBpZiAob3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZE92ZXJyaWRlcyA9IEpTT04ucGFyc2Uob3ZlcnJpZGVzKTsgLy8gRXhwZWN0IGEgcGFyc2FibGUgZGljdCBvciBhcnJheSBvZiAyLWVsZW1lbnQgYXJyYXlzIGxpa2UgYXJncyBzY2hlbWFcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkT3ZlcnJpZGVzKSkgcGFyc2VkT3ZlcnJpZGVzID0gT2JqZWN0LmZyb21FbnRyaWVzKHBhcnNlZE92ZXJyaWRlcyk7XHJcbiAgICAgICAgICAgIGxvZyhucywgYElORk86IEFwcGx5aW5nICR7T2JqZWN0LmtleXMocGFyc2VkT3ZlcnJpZGVzKS5sZW5ndGh9IG92ZXJyaWRpbmcgZGVmYXVsdCBhcmd1bWVudHMgZnJvbSBcIiR7Y29uZk5hbWV9XCIuLi5gKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyc2VkT3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVycmlkZSA9IHBhcnNlZE92ZXJyaWRlc1trZXldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IG92ZXJyaWRkZW5TY2hlbWEuZmluZEluZGV4KG8gPT4gb1swXSA9PSBrZXkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaEluZGV4ID09PSAtMSA/IG51bGwgOiBvdmVycmlkZGVuU2NoZW1hW21hdGNoSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBrZXkgXCIke2tleX1cIiBkb2VzIG5vdCBtYXRjaCBvZiB0aGlzIHNjcmlwdCdzIG9wdGlvbnM6IGAgKyBKU09OLnN0cmluZ2lmeShhcmdzU2NoZW1hLm1hcChhID0+IGFbMF0pKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvdmVycmlkZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGtleSBcIiR7a2V5fVwiIGFwcGVhcmVkIGluIHRoZSBjb25maWcgd2l0aCBubyB2YWx1ZS4gU29tZSB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkLiBUcnkgbnVsbD9gKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoICYmIEpTT04uc3RyaW5naWZ5KG1hdGNoWzFdKSAhPSBKU09OLnN0cmluZ2lmeShvdmVycmlkZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChtYXRjaFsxXSkgIT09IHR5cGVvZiAob3ZlcnJpZGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cobnMsIGBXQVJOSU5HOiBUaGUgXCIke2NvbmZOYW1lfVwiIG92ZXJyaWRpbmcgXCIke2tleX1cIiB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeShvdmVycmlkZSl9IGhhcyBhIGRpZmZlcmVudCB0eXBlICgke3R5cGVvZiBvdmVycmlkZX0pIHRoYW4gdGhlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGN1cnJlbnQgZGVmYXVsdCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KG1hdGNoWzFdKX0gKCR7dHlwZW9mIG1hdGNoWzFdfSkuIFRoZSByZXN1bHRpbmcgYmVoYXZpb3VyIG1heSBiZSB1bnByZWRpY3RhYmxlLmAsIGZhbHNlLCAnd2FybmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKG5zLCBgSU5GTzogT3ZlcnJpZGluZyBcIiR7a2V5fVwiIHZhbHVlOiAke0pTT04uc3RyaW5naWZ5KG1hdGNoWzFdKX0gIC0+ICAke0pTT04uc3RyaW5naWZ5KG92ZXJyaWRlKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZGVuU2NoZW1hW21hdGNoSW5kZXhdID0gey4uLm1hdGNofTsgLy8gQ2xvbmUgdGhlIChwcmV2aW91c2x5IHNoYWxsb3ctY29waWVkKSBvYmplY3QgYXQgdGhpcyBwb3NpdGlvbiBvZiB0aGUgbmV3IGFyZ3NTY2hlbWFcclxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZGVuU2NoZW1hW21hdGNoSW5kZXhdWzFdID0gb3ZlcnJpZGU7IC8vIFVwZGF0ZSB0aGUgdmFsdWUgb2YgdGhlIGNsb25lLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGxvZyhucywgYEVSUk9SOiBUaGVyZSdzIHNvbWV0aGluZyB3cm9uZyB3aXRoIHlvdXIgY29uZmlnIGZpbGUgXCIke2NvbmZOYW1lfVwiLCBpdCBjYW5ub3QgYmUgbG9hZGVkLmAgK1xyXG4gICAgICAgICAgICAgICAgYFxcblRoZSBlcnJvciBlbmNvdW50ZXJlZCB3YXM6ICR7KHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2UgfHwgSlNPTi5zdHJpbmdpZnkoZXJyKSl9YCArXHJcbiAgICAgICAgICAgICAgICBgXFxuWW91ciBjb25maWcgZmlsZSBzaG91bGQgZWl0aGVyIGJlIGEgZGljdGlvbmFyeSBlLmcuOiB7IFwic3RyaW5nLW9wdFwiOiBcInZhbHVlXCIsIFwibnVtLW9wdFwiOiAxMjMsIFwiYXJyYXktb3B0XCI6IFtcIm9uZVwiLCBcInR3b1wiXSB9YCArXHJcbiAgICAgICAgICAgICAgICBgXFxub3IgYW4gYXJyYXkgb2YgZGljdCBlbnRyaWVzICgyLWVsZW1lbnQgYXJyYXlzKSBlLmcuOiBbIFtcInN0cmluZy1vcHRcIiwgXCJ2YWx1ZVwiXSwgW1wibnVtLW9wdFwiLCAxMjNdLCBbXCJhcnJheS1vcHRcIiwgW1wib25lXCIsIFwidHdvXCJdXSBdYCArXHJcbiAgICAgICAgICAgICAgICBgXFxuXCIke2NvbmZOYW1lfVwiIGNvbnRhaW5zOlxcbiR7b3ZlcnJpZGVzfWAsIHRydWUsICdlcnJvcicsIDgwKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gUmV0dXJuIHRoZSByZXN1bHQgb2YgdXNpbmcgdGhlIGluLWdhbWUgYXJncyBwYXJzZXIgdG8gY29tYmluZSB0aGUgZGVmYXVsdHMgd2l0aCB0aGUgY29tbWFuZCBsaW5lIGFyZ3MgcHJvdmlkZWRcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZmluYWxPcHRpb25zID0gbnMuZmxhZ3Mob3ZlcnJpZGRlblNjaGVtYSk7XHJcbiAgICAgICAgbG9nKG5zLCBgSU5GTzogUnVubmluZyAke3NjcmlwdE5hbWV9IHdpdGggdGhlIGZvbGxvd2luZyBzZXR0aW5nczpgICsgT2JqZWN0LmtleXMoZmluYWxPcHRpb25zKS5maWx0ZXIoYSA9PiBhICE9IFwiX1wiKS5tYXAoYSA9PlxyXG4gICAgICAgICAgICAgICAgYFxcbiAgJHthLmxlbmd0aCA9PSAxID8gXCItXCIgOiBcIi0tXCJ9JHthfSA9ICR7ZmluYWxPcHRpb25zW2FdID09PSBudWxsID8gXCJudWxsXCIgOiBKU09OLnN0cmluZ2lmeShmaW5hbE9wdGlvbnNbYV0pfWApLmpvaW4oXCJcIikgK1xyXG4gICAgICAgICAgICBgXFxucnVuICR7c2NyaXB0TmFtZX0gLS1oZWxwICB0byBnZXQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBvcHRpb25zLmApXHJcbiAgICAgICAgcmV0dXJuIGZpbmFsT3B0aW9ucztcclxuICAgIH0gY2F0Y2ggKGVycikgeyAvLyBEZXRlY3QgaWYgdGhlIHVzZXIgcGFzc2VkIGludmFsaWQgYXJndW1lbnRzLCBhbmQgcmV0dXJuIGhlbHAgdGV4dFxyXG4gICAgICAgIGNvbnN0IGVycm9yID0gbnMuYXJncy5pbmNsdWRlcyhcImhlbHBcIikgfHwgbnMuYXJncy5pbmNsdWRlcyhcIi0taGVscFwiKSA/IG51bGwgOiAvLyBEZXRlY3QgaWYgdGhlIHVzZXIgZXhwbGljdGx5IGFza2VkIGZvciBoZWxwIGFuZCBzdXBwcmVzcyB0aGUgZXJyb3JcclxuICAgICAgICAgICAgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2UgfHwgSlNPTi5zdHJpbmdpZnkoZXJyKSk7XHJcbiAgICAgICAgLy8gVHJ5IHRvIHBhcnNlIGRvY3VtZW50YXRpb24gYWJvdXQgZWFjaCBhcmd1bWVudCBmcm9tIHRoZSBzb3VyY2UgY29kZSdzIGNvbW1lbnRzXHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gbnMucmVhZChzY3JpcHROYW1lKS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICBsZXQgYXJnc1JvdyA9IDEgKyBzb3VyY2UuZmluZEluZGV4KHJvdyA9PiByb3cuaW5jbHVkZXMoXCJhcmdzU2NoZW1hID1cIikpO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbkRlc2NyaXB0aW9ucyA9IHt9XHJcbiAgICAgICAgd2hpbGUgKGFyZ3NSb3cgJiYgYXJnc1JvdyA8IHNvdXJjZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dEFyZ1JvdyA9IHNvdXJjZVthcmdzUm93KytdLnRyaW0oKTtcclxuICAgICAgICAgICAgaWYgKG5leHRBcmdSb3cubGVuZ3RoID09IDApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAobmV4dEFyZ1Jvd1swXSA9PSBcIl1cIiB8fCBuZXh0QXJnUm93LmluY2x1ZGVzKFwiO1wiKSkgYnJlYWs7IC8vIFdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgYXJncyBzY2hlbWFcclxuICAgICAgICAgICAgY29uc3QgY29tbWVudFNwbGl0ID0gbmV4dEFyZ1Jvdy5zcGxpdChcIi8vXCIpLm1hcChlID0+IGUudHJpbSgpKTtcclxuICAgICAgICAgICAgaWYgKGNvbW1lbnRTcGxpdC5sZW5ndGggIT0gMikgY29udGludWU7IC8vIFRoaXMgcm93IGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGluIHRoZSBmb3JtYXQ6IFtvcHRpb24uLi5dLCAvLyBDb21tZW50XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvblNwbGl0ID0gY29tbWVudFNwbGl0WzBdLnNwbGl0KFwiJ1wiKTsgLy8gRXhwZWN0IHNvbWV0aGluZyBsaWtlOiBbJ25hbWUnLCBzb21lRGVmYXVsdF0uIEFsbCB3ZSBuZWVkIGlzIHRoZSBuYW1lXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25TcGxpdC5sZW5ndGggPCAyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb25zW29wdGlvblNwbGl0WzFdXSA9IGNvbW1lbnRTcGxpdFsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nKG5zLCAoZXJyb3IgPyBgRVJST1I6IFRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBzY3JpcHQgYXJndW1lbnRzIHByb3ZpZGVkOiAke2Vycm9yfVxcbmAgOiAnSU5GTzogJykgK1xyXG4gICAgICAgICAgICBgJHtzY3JpcHROYW1lfSBwb3NzaWJsZSBhcmd1bWVudHM6YCArIGFyZ3NTY2hlbWEubWFwKGEgPT4gYFxcbiAgJHthWzBdLmxlbmd0aCA9PSAxID8gXCIgLVwiIDogXCItLVwifSR7YVswXS5wYWRFbmQoMzApfSBgICtcclxuICAgICAgICAgICAgICAgIGBEZWZhdWx0OiAkeyhhWzFdID09PSBudWxsID8gXCJudWxsXCIgOiBKU09OLnN0cmluZ2lmeShhWzFdKSkucGFkRW5kKDEwKX1gICtcclxuICAgICAgICAgICAgICAgIChhWzBdIGluIG9wdGlvbkRlc2NyaXB0aW9ucyA/IGAgLy8gJHtvcHRpb25EZXNjcmlwdGlvbnNbYVswXV19YCA6ICcnKSkuam9pbihcIlwiKSArICdcXG4nICtcclxuICAgICAgICAgICAgYFxcblRpcDogQWxsIGFyZ3VtZW50IG5hbWVzLCBhbmQgc29tZSB2YWx1ZXMgc3VwcG9ydCBhdXRvLWNvbXBsZXRlLiBIaXQgdGhlIDx0YWI+IGtleSB0byBhdXRvY29tcGxldGUgb3Igc2VlIHBvc3NpYmxlIG9wdGlvbnMuYCArXHJcbiAgICAgICAgICAgIGBcXG5UaXA6IEFycmF5IGFyZ3VtZW50cyBhcmUgcG9wdWxhdGVkIGJ5IHNwZWNpZnlpbmcgdGhlIGFyZ3VtZW50IG11bHRpcGxlIHRpbWVzLCBlLmcuOmAgK1xyXG4gICAgICAgICAgICBgXFxuICAgICAgIHJ1biAke3NjcmlwdE5hbWV9IC0tYXJyYXlBcmcgZmlyc3QgLS1hcnJheUFyZyBzZWNvbmQgLS1hcnJheUFyZyB0aGlyZCAgdG8gcnVuIHRoZSBzY3JpcHQgd2l0aCBhcnJheUFyZz1bZmlyc3QsIHNlY29uZCwgdGhpcmRdYCArXHJcbiAgICAgICAgICAgICghb3ZlcnJpZGVzID8gYFxcblRpcDogWW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYnkgY3JlYXRpbmcgYSBjb25maWcgZmlsZSBuYW1lZCBcIiR7Y29uZk5hbWV9XCIgY29udGFpbmluZyBlLmcuOiB7IFwiYXJnLW5hbWVcIjogXCJwcmVmZXJyZWRWYWx1ZVwiIH1gXHJcbiAgICAgICAgICAgICAgICA6IG92ZXJyaWRlcyAmJiAhZXJyb3IgPyBgXFxuTm90ZTogVGhlIGRlZmF1bHQgdmFsdWVzIGFyZSBiZWluZyBtb2RpZmllZCBieSBvdmVycmlkZXMgaW4geW91ciBsb2NhbCBcIiR7Y29uZk5hbWV9XCI6XFxuJHtvdmVycmlkZXN9YFxyXG4gICAgICAgICAgICAgICAgICAgIDogYFxcblRoaXMgZXJyb3IgbWF5IGhhdmUgYmVlbiBjYXVzZWQgYnkgeW91ciBsb2NhbCBvdmVycmlkaW5nIFwiJHtjb25mTmFtZX1cIiAoZXNwZWNpYWxseSBpZiB5b3UgY2hhbmdlZCB0aGUgdHlwZXMgb2YgYW55IG9wdGlvbnMpOlxcbiR7b3ZlcnJpZGVzfWApLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gQ2FsbGVyIHNob3VsZCBoYW5kbGUgbnVsbCBhbmQgc2h1dCBkb3duIGVsZWdhbnRseS5cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEluIG9yZGVyIHRvIHBhc3MgaW4gYXJncyB0byBwYXNzIGFsb25nIHRvIHRoZSBzdGFydHVwL2NvbXBsZXRpb24gc2NyaXB0LCB0aGV5IG1heSBoYXZlIHRvIGJlIHF1b3RlZCwgd2hlbiBnaXZlbiBhc1xyXG4gKiBwYXJhbWV0ZXJzIHRvIHRoaXMgc2NyaXB0LCBidXQgdGhvc2UgcXVvdGVzIHdpbGwgaGF2ZSB0byBiZSBzdHJpcHBlZCB3aGVuIHBhc3NpbmcgdGhlc2UgYWxvbmcgdG8gYSBzdWJzZXF1ZW50IHNjcmlwdCBhcyByYXcgc3RyaW5ncy5cclxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJncyAtIFRoZSB0aGUgYXJyYXktYXJndW1lbnQgcGFzc2VkIHRvIHRoZSBzY3JpcHQuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gVGhlIHRoZSBhcnJheS1hcmd1bWVudCB1bmVzY2FwZWQgKG9yIGRlc2VyaWFsaXplZCBpZiBhIHNpbmdsZSBhcmd1bWVudCBzdGFydGluZyB3aXRoICdbJyB3YXMgc3VwcGxpZWRdKS4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVuRXNjYXBlQXJyYXlBcmdzKGFyZ3MpIHtcclxuICAgIC8vIEZvciBjb252ZW5pZW5jZSwgYWxzbyBzdXBwb3J0IGFyZ3MgYXMgYSBzaW5nbGUgc3RyaW5naWZpZWQgYXJyYXlcclxuICAgIGlmIChhcmdzLmxlbmd0aCA9PSAxICYmIGFyZ3NbMF0uc3RhcnRzV2l0aChcIltcIikpIHJldHVybiBKU09OLnBhcnNlKGFyZ3NbMF0pO1xyXG4gICAgLy8gT3RoZXJ3aXNlLCBhcmdzIHdyYXBwZWQgaW4gcXVvdGVzIHNob3VsZCBoYXZlIHRob3NlIHF1b3RlcyByZW1vdmVkLlxyXG4gICAgY29uc3QgZXNjYXBlQ2hhcnMgPSBbJ1wiJywgXCInXCIsIFwiYFwiXTtcclxuICAgIHJldHVybiBhcmdzLm1hcChhcmcgPT4gZXNjYXBlQ2hhcnMuc29tZShjID0+IGFyZy5zdGFydHNXaXRoKGMpICYmIGFyZy5lbmRzV2l0aChjKSkgPyBhcmcuc2xpY2UoMSwgLTEpIDogYXJnKTtcclxufSJdfQ==\",\"filename\":\"trade/helper.js\",\"server\":\"home\"}}],[\"Temp/stock-hasTIXAPIAccess.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.hasTIXAPIAccess()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-hasTIXAPIAccess.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-hasTIXAPIAccess.txt.js\",\"server\":\"home\"}}],[\"Temp/ps-other-instances.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/ps-other-instances.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/ps-other-instances.txt.js\",\"server\":\"home\"}}],[\"Temp/getPlayer.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getPlayer.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getPlayer.txt.js\",\"server\":\"home\"}}],[\"Temp/getResetInfo.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getResetInfo()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getResetInfo.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getResetInfo.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-hasWSEAccount.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.hasWSEAccount()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-hasWSEAccount.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-hasWSEAccount.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-purchaseWseAccount.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.purchaseWseAccount()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-purchaseWseAccount.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-purchaseWseAccount.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-purchaseTixApi.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.purchaseTixApi()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-purchaseTixApi.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-purchaseTixApi.txt.js\",\"server\":\"home\"}}],[\"Temp/owned-source-files.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/owned-source-files.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/owned-source-files.txt.js\",\"server\":\"home\"}}],[\"Temp/reset-info.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getResetInfo()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/reset-info.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/reset-info.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-symbols.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    (() => { try { return ns.stock.getSymbols(); } catch { return null; } })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-symbols.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-symbols.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getMaxShares.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getMaxShares(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getMaxShares.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getMaxShares.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-has4SDataTIXAPI.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.has4SDataTIXAPI()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-has4SDataTIXAPI.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-has4SDataTIXAPI.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getAskPrice.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getAskPrice(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getAskPrice.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getAskPrice.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getBidPrice.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getBidPrice(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getBidPrice.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getBidPrice.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getPosition.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getPosition(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getPosition.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getPosition.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-has4SData.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.has4SData()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-has4SData.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-has4SData.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-buyStock.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.buyStock(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-buyStock.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-buyStock.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-sellStock.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.sellStock(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-sellStock.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-sellStock.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-purchase4SMarketDataTixApi.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.purchase4SMarketDataTixApi()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-purchase4SMarketDataTixApi.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-purchase4SMarketDataTixApi.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getVolatility.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getVolatility(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getVolatility.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getVolatility.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getForecast.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getForecast(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getForecast.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getForecast.txt.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"Temp/stock-hasTIXAPIAccess.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-hasTIXAPIAccess.txt\",\"text\":\"true\"}}],[\"Temp/ps-other-instances.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/ps-other-instances.txt\",\"text\":\"[1]\"}}],[\"Temp/getPlayer.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getPlayer.txt\",\"text\":\"{\\\"hp\\\":{\\\"current\\\":10,\\\"max\\\":10},\\\"skills\\\":{\\\"hacking\\\":581,\\\"strength\\\":1,\\\"defense\\\":1,\\\"dexterity\\\":1,\\\"agility\\\":1,\\\"charisma\\\":1,\\\"intelligence\\\":0},\\\"exp\\\":{\\\"hacking\\\":11307032.214568645,\\\"strength\\\":0,\\\"defense\\\":0,\\\"dexterity\\\":0,\\\"agility\\\":0,\\\"charisma\\\":0,\\\"intelligence\\\":0},\\\"mults\\\":{\\\"hacking_chance\\\":1.5730422820448497,\\\"hacking_speed\\\":1.5442611299828681,\\\"hacking_money\\\":1.4267957206756008,\\\"hacking_grow\\\":1.4267957206756008,\\\"hacking\\\":1.817807661131028,\\\"hacking_exp\\\":2.368926769984208,\\\"strength\\\":1.4267957206756008,\\\"strength_exp\\\":1.804896586654635,\\\"defense\\\":1.4267957206756008,\\\"defense_exp\\\":1.804896586654635,\\\"dexterity\\\":1.4267957206756008,\\\"dexterity_exp\\\":1.804896586654635,\\\"agility\\\":1.4267957206756008,\\\"agility_exp\\\":1.804896586654635,\\\"charisma\\\":1.4267957206756008,\\\"charisma_exp\\\":1.804896586654635,\\\"hacknet_node_money\\\":1.4267957206756008,\\\"hacknet_node_purchase_cost\\\":0.7008704788702975,\\\"hacknet_node_ram_cost\\\":0.7008704788702975,\\\"hacknet_node_core_cost\\\":0.7008704788702975,\\\"hacknet_node_level_cost\\\":0.7008704788702975,\\\"company_rep\\\":1.804896586654635,\\\"faction_rep\\\":1.804896586654635,\\\"work_money\\\":1.569475292743161,\\\"crime_success\\\":1.4267957206756008,\\\"crime_money\\\":1.4267957206756008,\\\"bladeburner_max_stamina\\\":1,\\\"bladeburner_stamina_gain\\\":1,\\\"bladeburner_analysis\\\":1,\\\"bladeburner_success_chance\\\":1},\\\"city\\\":\\\"Sector-12\\\",\\\"numPeopleKilled\\\":0,\\\"money\\\":15402164710.085054,\\\"location\\\":\\\"Alpha Enterprises\\\",\\\"totalPlaytime\\\":17728158000,\\\"jobs\\\":{},\\\"factions\\\":[\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"New Tokyo\\\",\\\"Tian Di Hui\\\",\\\"CyberSec\\\"],\\\"entropy\\\":0}\"}}],[\"Temp/getResetInfo.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getResetInfo.txt\",\"text\":\"{\\\"lastAugReset\\\":1703956650994,\\\"lastNodeReset\\\":1703874402904,\\\"currentNode\\\":1,\\\"ownedAugs\\\":{},\\\"ownedSF\\\":{}}\"}}],[\"Temp/stock-hasWSEAccount.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-hasWSEAccount.txt\",\"text\":\"false\"}}],[\"Temp/stock-purchaseWseAccount.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-purchaseWseAccount.txt\",\"text\":\"true\"}}],[\"Temp/stock-purchaseTixApi.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-purchaseTixApi.txt\",\"text\":\"true\"}}],[\"Temp/owned-source-files.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/owned-source-files.txt\",\"text\":\"{\\\"1\\\":2}\"}}],[\"Temp/reset-info.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/reset-info.txt\",\"text\":\"{\\\"lastAugReset\\\":1703956650994,\\\"lastNodeReset\\\":1703874402904,\\\"currentNode\\\":1,\\\"ownedAugs\\\":{},\\\"ownedSF\\\":{}}\"}}],[\"Temp/stock-symbols.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-symbols.txt\",\"text\":\"[\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"]\"}}],[\"Temp/stock-getMaxShares.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getMaxShares.txt\",\"text\":\"{\\\"ECP\\\":23300000,\\\"MGCP\\\":14300000,\\\"BLD\\\":17000000,\\\"CLRK\\\":20500000,\\\"OMTK\\\":10400000,\\\"FSIG\\\":7600000,\\\"KGI\\\":14400000,\\\"FLCM\\\":13500000,\\\"STM\\\":10000000,\\\"DCOMM\\\":17200000,\\\"HLS\\\":9900000,\\\"VITA\\\":20400000,\\\"ICRS\\\":12500000,\\\"UNV\\\":11200000,\\\"AERO\\\":7700000,\\\"OMN\\\":19100000,\\\"SLRS\\\":6700000,\\\"GPH\\\":7300000,\\\"NVMD\\\":4500000,\\\"WDS\\\":13200000,\\\"LXO\\\":10000000,\\\"RHOC\\\":11600000,\\\"APHE\\\":5900000,\\\"SYSC\\\":12300000,\\\"CTK\\\":7000000,\\\"NTLK\\\":5400000,\\\"OMGA\\\":5700000,\\\"FNS\\\":2700000,\\\"JGN\\\":11500000,\\\"SGC\\\":3200000,\\\"CTYS\\\":70700000,\\\"MDYN\\\":4500000,\\\"TITN\\\":6200000}\"}}],[\"Temp/stock-has4SDataTIXAPI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-has4SDataTIXAPI.txt\",\"text\":\"true\"}}],[\"Temp/stock-getAskPrice.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getAskPrice.txt\",\"text\":\"{\\\"ECP\\\":22599.21055116492,\\\"MGCP\\\":31602.019915646677,\\\"BLD\\\":17910.98098311313,\\\"CLRK\\\":14341.664562705591,\\\"OMTK\\\":62724.84974488741,\\\"FSIG\\\":105430.10370694782,\\\"KGI\\\":38296.988194394835,\\\"FLCM\\\":26045.583259299703,\\\"STM\\\":19769.72939224889,\\\"DCOMM\\\":8654.031236411029,\\\"HLS\\\":26838.874579321306,\\\"VITA\\\":7130.4625951186035,\\\"ICRS\\\":13657.467139908262,\\\"UNV\\\":22351.507249104096,\\\"AERO\\\":17144.719175736358,\\\"OMN\\\":6694.692798296126,\\\"SLRS\\\":9915.195923733516,\\\"GPH\\\":26832.119538877392,\\\"NVMD\\\":24919.443089131997,\\\"WDS\\\":28355.155697383314,\\\"LXO\\\":7163.427598852641,\\\"RHOC\\\":2775.20974820891,\\\"APHE\\\":22234.29473401149,\\\"SYSC\\\":2784.3107795689552,\\\"CTK\\\":5915.300239178029,\\\"NTLK\\\":2911.1850683687203,\\\"OMGA\\\":4247.821444023413,\\\"FNS\\\":4281.2769381771905,\\\"JGN\\\":258.28894588335885,\\\"SGC\\\":2410.2804699688204,\\\"CTYS\\\":207.35736778636203,\\\"MDYN\\\":12051.168956840102,\\\"TITN\\\":7395.151477285218}\"}}],[\"Temp/stock-getBidPrice.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getBidPrice.txt\",\"text\":\"{\\\"ECP\\\":22374.342784486664,\\\"MGCP\\\":31538.87901671432,\\\"BLD\\\":17803.836530572076,\\\"CLRK\\\":14227.388351050566,\\\"OMTK\\\":61976.64080160843,\\\"FSIG\\\":103342.37888106765,\\\"KGI\\\":38144.10600599406,\\\"FLCM\\\":25889.777177987842,\\\"STM\\\":19533.907570472562,\\\"DCOMM\\\":8499.648122183677,\\\"HLS\\\":26412.860697109852,\\\"VITA\\\":7087.807783981305,\\\"ICRS\\\":13413.825506094241,\\\"UNV\\\":21908.90314516144,\\\"AERO\\\":16872.580776121493,\\\"OMN\\\":6588.427833243806,\\\"SLRS\\\":9738.314331436983,\\\"GPH\\\":26459.081134166092,\\\"NVMD\\\":24523.896373431486,\\\"WDS\\\":28016.923223855876,\\\"LXO\\\":7063.836748421721,\\\"RHOC\\\":2742.1058545921037,\\\"APHE\\\":21837.647256100485,\\\"SYSC\\\":2745.601394351512,\\\"CTK\\\":5786.57956137198,\\\"NTLK\\\":2797.020948040535,\\\"OMGA\\\":4180.395706816693,\\\"FNS\\\":4213.320161380727,\\\"JGN\\\":254.69803700315327,\\\"SGC\\\":2343.7244017645535,\\\"CTYS\\\":204.06598099610233,\\\"MDYN\\\":11883.625396367648,\\\"TITN\\\":7365.629914501645}\"}}],[\"Temp/stock-getPosition.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getPosition.txt\",\"text\":\"{\\\"ECP\\\":[0,0,0,0],\\\"MGCP\\\":[494102,31519.244525659902,0,0],\\\"BLD\\\":[0,0,0,0],\\\"CLRK\\\":[0,0,0,0],\\\"OMTK\\\":[0,0,0,0],\\\"FSIG\\\":[0,0,0,0],\\\"KGI\\\":[0,0,0,0],\\\"FLCM\\\":[611091,25782.007600926627,0,0],\\\"STM\\\":[0,0,0,0],\\\"DCOMM\\\":[0,0,0,0],\\\"HLS\\\":[0,0,0,0],\\\"VITA\\\":[0,0,0,0],\\\"ICRS\\\":[0,0,0,0],\\\"UNV\\\":[0,0,0,0],\\\"AERO\\\":[0,0,0,0],\\\"OMN\\\":[0,0,0,0],\\\"SLRS\\\":[0,0,0,0],\\\"GPH\\\":[0,0,0,0],\\\"NVMD\\\":[0,0,0,0],\\\"WDS\\\":[230589,25688.612568965014,0,0],\\\"LXO\\\":[0,0,0,0],\\\"RHOC\\\":[0,0,0,0],\\\"APHE\\\":[0,0,0,0],\\\"SYSC\\\":[0,0,0,0],\\\"CTK\\\":[0,0,0,0],\\\"NTLK\\\":[0,0,0,0],\\\"OMGA\\\":[0,0,0,0],\\\"FNS\\\":[0,0,0,0],\\\"JGN\\\":[0,0,0,0],\\\"SGC\\\":[3200000,2063.8504126881135,0,0],\\\"CTYS\\\":[0,0,0,0],\\\"MDYN\\\":[0,0,0,0],\\\"TITN\\\":[0,0,0,0]}\"}}],[\"Temp/stock-probabilities.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-probabilities.txt\",\"text\":\"{\\\"MGCP\\\":{\\\"prob\\\":0.6752352969093494,\\\"sharesLong\\\":494102,\\\"sharesShort\\\":0},\\\"FLCM\\\":{\\\"prob\\\":0.6233415324876617,\\\"sharesLong\\\":611091,\\\"sharesShort\\\":0},\\\"WDS\\\":{\\\"prob\\\":0.5892206122471643,\\\"sharesLong\\\":230589,\\\"sharesShort\\\":0},\\\"KGI\\\":{\\\"prob\\\":0.41316683662730197,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"BLD\\\":{\\\"prob\\\":0.37504646804347774,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"TITN\\\":{\\\"prob\\\":0.38403689919009276,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"JGN\\\":{\\\"prob\\\":0.44595679122778487,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CLRK\\\":{\\\"prob\\\":0.37198702316119886,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"VITA\\\":{\\\"prob\\\":0.4273580057144439,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FSIG\\\":{\\\"prob\\\":0.6562862585298984,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SGC\\\":{\\\"prob\\\":0.579772301598751,\\\"sharesLong\\\":3200000,\\\"sharesShort\\\":0},\\\"ECP\\\":{\\\"prob\\\":0.6816541921725451,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"APHE\\\":{\\\"prob\\\":0.5647515493385806,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMTK\\\":{\\\"prob\\\":0.6163952787599084,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"STM\\\":{\\\"prob\\\":0.4182598805641949,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"GPH\\\":{\\\"prob\\\":0.3951318259329815,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MDYN\\\":{\\\"prob\\\":0.5882677982241057,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"LXO\\\":{\\\"prob\\\":0.4634123803364201,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTYS\\\":{\\\"prob\\\":0.44601120892546753,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"DCOMM\\\":{\\\"prob\\\":0.39683690494936225,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SLRS\\\":{\\\"prob\\\":0.41710532156704533,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"HLS\\\":{\\\"prob\\\":0.585357541925364,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"UNV\\\":{\\\"prob\\\":0.6013198475425079,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NVMD\\\":{\\\"prob\\\":0.5595570048374859,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ICRS\\\":{\\\"prob\\\":0.5655494740785112,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTK\\\":{\\\"prob\\\":0.4452971440261043,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMN\\\":{\\\"prob\\\":0.4469131284718974,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"AERO\\\":{\\\"prob\\\":0.5541384236488639,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMGA\\\":{\\\"prob\\\":0.48711914388255884,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NTLK\\\":{\\\"prob\\\":0.5171571018018628,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SYSC\\\":{\\\"prob\\\":0.5267633109817067,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FNS\\\":{\\\"prob\\\":0.47935837598934866,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"RHOC\\\":{\\\"prob\\\":0.47791702716463896,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0}}\"}}],[\"Temp/stock-has4SData.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-has4SData.txt\",\"text\":\"true\"}}],[\"Temp/stock-buyStock.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-buyStock.txt\",\"text\":\"25688.612568965014\"}}],[\"Temp/stock-sellStock.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-sellStock.txt\",\"text\":\"27543.695753389075\"}}],[\"Temp/stock-purchase4SMarketDataTixApi.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-purchase4SMarketDataTixApi.txt\",\"text\":\"true\"}}],[\"Temp/stock-getVolatility.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getVolatility.txt\",\"text\":\"{\\\"ECP\\\":0.004,\\\"MGCP\\\":0.0045000000000000005,\\\"BLD\\\":0.0070999999999999995,\\\"CLRK\\\":0.0068000000000000005,\\\"OMTK\\\":0.0066,\\\"FSIG\\\":0.011000000000000001,\\\"KGI\\\":0.0083,\\\"FLCM\\\":0.0126,\\\"STM\\\":0.008,\\\"DCOMM\\\":0.0068000000000000005,\\\"HLS\\\":0.006,\\\"VITA\\\":0.0076,\\\"ICRS\\\":0.0067,\\\"UNV\\\":0.0052,\\\"AERO\\\":0.0059,\\\"OMN\\\":0.0069,\\\"SLRS\\\":0.0075,\\\"GPH\\\":0.006500000000000001,\\\"NVMD\\\":0.006999999999999999,\\\"WDS\\\":0.025099999999999997,\\\"LXO\\\":0.0131,\\\"RHOC\\\":0.0062,\\\"APHE\\\":0.0187,\\\"SYSC\\\":0.015,\\\"CTK\\\":0.0088,\\\"NTLK\\\":0.0258,\\\"OMGA\\\":0.009300000000000001,\\\"FNS\\\":0.008,\\\"JGN\\\":0.032,\\\"SGC\\\":0.0274,\\\"CTYS\\\":0.013000000000000001,\\\"MDYN\\\":0.0076,\\\"TITN\\\":0.0051}\"}}],[\"Temp/stock-getForecast.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getForecast.txt\",\"text\":\"{\\\"ECP\\\":0.6816541921725451,\\\"MGCP\\\":0.6752352969093494,\\\"BLD\\\":0.37504646804347774,\\\"CLRK\\\":0.37198702316119886,\\\"OMTK\\\":0.6163952787599084,\\\"FSIG\\\":0.6562862585298984,\\\"KGI\\\":0.41316683662730197,\\\"FLCM\\\":0.6233415324876617,\\\"STM\\\":0.4182598805641949,\\\"DCOMM\\\":0.39683690494936225,\\\"HLS\\\":0.585357541925364,\\\"VITA\\\":0.4273580057144439,\\\"ICRS\\\":0.5655494740785112,\\\"UNV\\\":0.6013198475425079,\\\"AERO\\\":0.5541384236488639,\\\"OMN\\\":0.4469131284718974,\\\"SLRS\\\":0.41710532156704533,\\\"GPH\\\":0.3951318259329815,\\\"NVMD\\\":0.5595570048374859,\\\"WDS\\\":0.5892206122471643,\\\"LXO\\\":0.4634123803364201,\\\"RHOC\\\":0.47791702716463896,\\\"APHE\\\":0.5647515493385806,\\\"SYSC\\\":0.5267633109817067,\\\"CTK\\\":0.4452971440261043,\\\"NTLK\\\":0.5171571018018628,\\\"OMGA\\\":0.48711914388255884,\\\"FNS\\\":0.47935837598934866,\\\"JGN\\\":0.44595679122778487,\\\"SGC\\\":0.579772301598751,\\\"CTYS\\\":0.44601120892546753,\\\"MDYN\\\":0.5882677982241057,\\\"TITN\\\":0.38403689919009276}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":9.478250000018493,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"13.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"ecorp\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"ecorp\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"ecorp\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46837004623,\"moneyMax\":1170925115575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1112,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"85.5.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"megacorp\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"megacorp\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"megacorp\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55591200104,\"moneyMax\":1389780002600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1166,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"89.2.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"b-and-a\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"b-and-a\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"b-and-a\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":16691417481,\"moneyMax\":417285437025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1026,\"serverGrowth\":67,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"37.7.4.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"blade\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"blade\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"blade\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":30529408398,\"moneyMax\":763235209950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1021,\"serverGrowth\":78,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"73.2.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"nwo\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"nwo\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"nwo\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38206966130,\"moneyMax\":955174153250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":85,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"17.1.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"clarkinc\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"clarkinc\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"clarkinc\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":21976058240,\"moneyMax\":549401456000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1142,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"65.3.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"omnitek\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"omnitek\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"omnitek\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":17162129105,\"moneyMax\":429053227625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1039,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-322643.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[143,77,102,67,17,68,18],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"62.3.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"4sigma\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"4sigma\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"4sigma\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":16527955429,\"moneyMax\":413198885725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1074,\"serverGrowth\":98,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"0.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"kuai-gong\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"kuai-gong\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"kuai-gong\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":27190758015,\"moneyMax\":679768950375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1233,\"serverGrowth\":90,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"36.7.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"fulcrumtech\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"fulcrumtech\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"fulcrumtech\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1588852874,\"moneyMax\":39721321850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1118,\"serverGrowth\":85,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"15.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"fulcrumassets\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"fulcrumassets\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"fulcrumassets\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1106,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"8.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"stormtech\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"stormtech\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"stormtech\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1142900602,\"moneyMax\":28572515050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":86,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"56.6.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"defcomm\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"defcomm\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"defcomm\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":875124162,\"moneyMax\":21878104050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":59,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"44.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"infocomm\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"infocomm\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"infocomm\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":858030550,\"moneyMax\":21450763750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":57,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"62.8.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"helios\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"helios\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"helios\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":721811534,\"moneyMax\":18045288350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":70,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"67.3.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"vitalife\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"vitalife\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"vitalife\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":753926699,\"moneyMax\":18848167475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"8.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"icarus\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"icarus\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"icarus\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":966849460,\"moneyMax\":24171236500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"58.6.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"univ-energy\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"univ-energy\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"univ-energy\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1139590267,\"moneyMax\":28489756675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"66.1.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"titan-labs\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"titan-labs\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"titan-labs\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":843343288,\"moneyMax\":21083582200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":77,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"9.8.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"microdyne\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"microdyne\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"microdyne\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":554654744,\"moneyMax\":13866368600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":86,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"61.4.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"taiyang-digital\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"taiyang-digital\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"taiyang-digital\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":831641720,\"moneyMax\":20791043000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":71,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343593.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,10,-2,-2,-1,0,-4,-3,5,-7,2,-10,-1,-2,-8,8,0,3,9,5,1,-3,-9,-10,-9,-1,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"13.1.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"galactic-cyber\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"galactic-cyber\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"galactic-cyber\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":760877870,\"moneyMax\":19021946750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":90,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523028.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[179,20,15,165,195,94,108,61,14,7,128,106,95,147,178],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"40.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"aerocorp\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"aerocorp\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"aerocorp\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1010368302,\"moneyMax\":25259207550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"59.8.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"omnia\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"omnia\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"omnia\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":969261054,\"moneyMax\":24231526350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":68,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"13.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"zb-def\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"zb-def\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"zb-def\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1094323496,\"moneyMax\":27358087400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":75,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"4.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"applied-energetics\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"applied-energetics\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"applied-energetics\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":942288237,\"moneyMax\":23557205925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"29.7.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"solaris\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"solaris\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"solaris\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":879143865,\"moneyMax\":21978596625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":74,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"80.9.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"deltaone\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"deltaone\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"deltaone\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1436477929,\"moneyMax\":35911948225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":52,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"15.5.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"global-pharm\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"global-pharm\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"global-pharm\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1560797046,\"moneyMax\":39019926150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":83,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"50.4.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"nova-med\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"nova-med\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"nova-med\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1146922226,\"moneyMax\":28673055650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":85,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"46.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"zeus-med\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"zeus-med\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"zeus-med\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1364630464,\"moneyMax\":34115761600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"3.9.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"unitalife\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"unitalife\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"unitalife\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1006544140,\"moneyMax\":25163603500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"21.3.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"lexo-corp\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"lexo-corp\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"lexo-corp\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":707007446,\"moneyMax\":17675186150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":725,\"serverGrowth\":61,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"79.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"rho-construction\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"rho-construction\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"rho-construction\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19.80800000000027,\"minDifficulty\":19,\"moneyAvailable\":964136294.3477705,\"moneyMax\":13842635550,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":496,\"serverGrowth\":58,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"53.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"alpha-ent\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"alpha-ent\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"alpha-ent\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":694753024,\"moneyMax\":17368825600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":580,\"serverGrowth\":53,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-69864.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"161114352\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"22.3.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"aevum-police\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"aevum-police\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"aevum-police\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23.72000000000024,\"minDifficulty\":23,\"moneyAvailable\":322592395.26349986,\"moneyMax\":6714796825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":424,\"serverGrowth\":36,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"44.9.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"rothman-uni\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"rothman-uni\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"rothman-uni\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":20.048000000001352,\"minDifficulty\":16,\"moneyAvailable\":758381949.3697883,\"moneyMax\":4884263775,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":43,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"79.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"zb-institute\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"zb-institute\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"zb-institute\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":989524601,\"moneyMax\":24738115025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":81,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"13.0.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"summit-uni\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"summit-uni\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"summit-uni\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":22.084000000000696,\"minDifficulty\":20,\"moneyAvailable\":514208425.70561427,\"moneyMax\":5817136425,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":463,\"serverGrowth\":47,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"92.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"syscore\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"syscore\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"syscore\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":486585062,\"moneyMax\":12164626550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":550,\"serverGrowth\":66,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"64.8.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"catalyst\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"catalyst\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"catalyst\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":364480735,\"moneyMax\":9112018375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":428,\"serverGrowth\":35,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593007.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,1,0,4,0,2,2,3,4,3,2,4,1,3,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"29.3.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"the-hub\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"the-hub\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"the-hub\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":15.271999999999938,\"minDifficulty\":13,\"moneyAvailable\":2557705394.2801,\"moneyMax\":3967399700,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":283,\"serverGrowth\":47,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"7.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"computek\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"computek\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"computek\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":24.876000000001294,\"minDifficulty\":21,\"moneyAvailable\":814872211.8380699,\"moneyMax\":5595779800,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":378,\"serverGrowth\":55,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"94.2.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"netlink\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"netlink\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"netlink\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":28.26000000000062,\"minDifficulty\":20,\"moneyAvailable\":6872893646.685249,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":378,\"serverGrowth\":70,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"17.3.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"johnson-ortho\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"johnson-ortho\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"johnson-ortho\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":16.98399999999997,\"minDifficulty\":12,\"moneyAvailable\":1295983815.6894472,\"moneyMax\":1867061375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":268,\"serverGrowth\":47,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"49.8.0.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"n00dles\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"n00dles\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"n00dles\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":10.457250000014291,\"minDifficulty\":1,\"moneyAvailable\":1713031.3381685237,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"91.3.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"foodnstuff\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"foodnstuff\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"foodnstuff\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":12.906499999980936,\"minDifficulty\":3,\"moneyAvailable\":35909729.89069329,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"31.7.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.967499999983577,\"minDifficulty\":3,\"moneyAvailable\":40643839.96061017,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532678.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000100010000100100100101010011100110011001111000111111000001111\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"24.2.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"joesguns\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"joesguns\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"joesguns\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":11.287999999985837,\"minDifficulty\":5,\"moneyAvailable\":43869666.8563197,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"88.8.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"zer0\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"zer0\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"zer0\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":13.905999999999779,\"minDifficulty\":8,\"moneyAvailable\":139216677.25578102,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"34.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"nectar-net\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"nectar-net\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"nectar-net\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLE1BQU0sQ0FBQztnQkFDWCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQTtnQkFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLFlBQVksY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQTtnQkFDL0QsRUFBRSxDQUFDLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFBO2dCQUVwRSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDckMsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDckI7cUJBQU0sSUFBSSxZQUFZLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRTtvQkFDakQsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7cUJBQU07b0JBQ0gsTUFBTSxHQUFHLE1BQU0sQ0FBQztpQkFDbkI7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7b0JBQzNFLFNBQVM7aUJBQ1o7cUJBQU07b0JBQ0gsWUFBWSxJQUFJLFNBQVMsQ0FBQztvQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxLQUFLLENBQUMsQ0FBQTtpQkFDOUM7Z0JBRUQsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLGlCQUFpQixFQUFFO29CQUNsQyxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLFlBQVksSUFBSSxtQkFBbUIsRUFBRTt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQ3ZCLFlBQVksSUFBSSxtQkFBbUIsQ0FBQztxQkFDdkM7b0JBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0o7QUFDTCxDQUFDO0FBRUQsK0RBQStEO0FBQy9ELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxXQUFXLEdBQUcsTUFBTTtJQUM1QyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":13.734000000000025,\"minDifficulty\":7,\"moneyAvailable\":46505393.49622116,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"85.6.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"neo-net\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"neo-net\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"neo-net\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":17.277999999999736,\"minDifficulty\":8,\"moneyAvailable\":86589480.63200897,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"30.6.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"silver-helix\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"silver-helix\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"silver-helix\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":19.1480000000004,\"minDifficulty\":10,\"moneyAvailable\":477226163.99497527,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"89.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"hong-fang-tea\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.209999999989682,\"minDifficulty\":5,\"moneyAvailable\":52277307.05680546,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"64.1.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"harakiri-sushi\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.525999999999508,\"minDifficulty\":5,\"moneyAvailable\":68351544.70660473,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"22.0.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"phantasy\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"phantasy\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"phantasy\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":15.63750000000012,\"minDifficulty\":7,\"moneyAvailable\":426708683.624635,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916096.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[4,11],[4,12],[3,7],[0,6],[0,3],[1,9],[0,5],[5,8],[5,9],[4,9],[4,7],[5,11],[7,10],[9,10],[2,6],[6,11],[10,12],[1,8],[2,10],[1,2],[1,12],[2,4],[1,11],[6,8],[10,12],[2,5],[8,10]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"2.7.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"max-hardware\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"max-hardware\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"max-hardware\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.783499999999126,\"minDifficulty\":5,\"moneyAvailable\":168757105.49431548,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"38.7.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"omega-net\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"omega-net\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"omega-net\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":20.48400000000076,\"minDifficulty\":12,\"moneyAvailable\":1322447668.5621233,\"moneyMax\":1641814750,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":206,\"serverGrowth\":30,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"92.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"crush-fitness\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"crush-fitness\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"crush-fitness\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":23.666500000004078,\"minDifficulty\":14,\"moneyAvailable\":851221898.1863129,\"moneyMax\":1441035950,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":244,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"29.1.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"iron-gym\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"iron-gym\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"iron-gym\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.339999999999852,\"minDifficulty\":10,\"moneyAvailable\":333521942.93530256,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"3.4.8.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"millenium-fitness\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"millenium-fitness\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"millenium-fitness\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":19.244000000000415,\"minDifficulty\":18,\"moneyAvailable\":466372536.3020707,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":494,\"serverGrowth\":44,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"55.7.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":965,\"serverGrowth\":50,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"39.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"snap-fitness\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"snap-fitness\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"snap-fitness\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":709,\"serverGrowth\":52,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"49.2.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"run4theh111z\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"run4theh111z\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"run4theh111z\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"73.4.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"I.I.I.I\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"I.I.I.I\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"I.I.I.I\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":3.2555000000002736,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":341,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"9.5.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"avmnite-02h\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"avmnite-02h\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":10.118000000000047,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"64.1.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\".\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\".\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\".\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"81.2.4.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"CSEC\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"CSEC\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"CSEC\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":8.865250000001453,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":52,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622104-TheBlackHand.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,34],[7,11],[20,26],[6,13],[6,7],[16,17],[18,19]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"48.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"The-Cave\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"The-Cave\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"The-Cave\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"97.9.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"98.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"wormy/advanced/scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for hack.\\\");\\n        return;\\n    }\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgaGFjay5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/hack.js\",\"server\":\"darkweb\"}}],[\"wormy/advanced/scripts/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for grow.\\\");\\n        return;\\n    }\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JteS9hZHZhbmNlZC9zY3JpcHRzL2dyb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBRXhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxPQUFPO0tBQ1Y7SUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7QUFFOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1hZGUgdG8gYmUgZGVwbG95ZWQgYnkgc3JjL3dvcm15L2FkdmFuY2VkL2phY2t4LmpzIHRvIGEgdGFyZ2V0IHNlcnZlclxyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICoqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuICAgIGNvbnN0IHRocmVhZHMgPSBucy5hcmdzWzFdIHx8IDE7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFUlJPUjogTm8gdGFyZ2V0IHNwZWNpZmllZCBmb3IgZ3Jvdy5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7dGhyZWFkczogdGhyZWFkc30pO1xyXG5cclxufVxyXG4iXX0=\",\"filename\":\"wormy/advanced/scripts/grow.js\",\"server\":\"darkweb\"}}],[\"wormy/advanced/scripts/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Made to be deployed by src/wormy/advanced/jackx.js to a target server\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1] || 1;\\n    if (!target) {\\n        ns.tprint(\\\"ERROR: No target specified for weaken.\\\");\\n        return;\\n    }\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUV4RSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNWO0lBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBRWhELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWRlIHRvIGJlIGRlcGxveWVkIGJ5IHNyYy93b3JteS9hZHZhbmNlZC9qYWNreC5qcyB0byBhIHRhcmdldCBzZXJ2ZXJcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcbiAgICBjb25zdCB0aHJlYWRzID0gbnMuYXJnc1sxXSB8fCAxO1xyXG5cclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRVJST1I6IE5vIHRhcmdldCBzcGVjaWZpZWQgZm9yIHdlYWtlbi5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHt0aHJlYWRzOiB0aHJlYWRzfSk7XHJcblxyXG59XHJcbiJdfQ==\",\"filename\":\"wormy/advanced/scripts/weaken.js\",\"server\":\"darkweb\"}}],[\"wormy/advanced/jackx.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const homeServer = 'home';\\n    const ramBuffer = 0.50; // Reserve 0.50GB of RAM\\n    const supportingScripts = ['wormy/advanced/scripts/hack.js', 'wormy/advanced/scripts/grow.js', 'wormy/advanced/scripts/weaken.js'];\\n    let targetServer = ns.args[0];\\n    if (!targetServer) {\\n        ns.tprint('ERROR: No target server provided');\\n        return;\\n    }\\n    ns.tprint(`SUCCESS: Starting advanced attack script on target server: ${targetServer}`);\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const rootServers = getRootServers(ns);\\n        rootServers.push('home');\\n        await ns.sleep(50);\\n        for (let source of rootServers) {\\n            // Try nuking the targetServer to gain root access\\n            let availableRam = ns.getServerMaxRam(source) - ns.getServerUsedRam(source) - ramBuffer;\\n            // Initialize scriptRam with some arbitrary large value.\\n            let scriptRam = 2;\\n            while (availableRam >= scriptRam) {\\n                await ns.sleep(50);\\n                let action;\\n                const currentSecurity = ns.getServerSecurityLevel(targetServer);\\n                const currentMoney = ns.getServerMoneyAvailable(targetServer);\\n                const maxMoney = ns.getServerMaxMoney(targetServer);\\n                const securityThreshold = ns.getServerMinSecurityLevel(targetServer) + 10;\\n                const moneyThreshold = 0.75;\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                ns.print(`INFO: ${targetServer} Current Security: `, currentSecurity);\\n                ns.print(`INFO: ${targetServer} Security Threshold: `, securityThreshold);\\n                ns.print(`INFO: ${targetServer} Max Money: `, maxMoney);\\n                ns.print(`INFO: ${targetServer} Current Money: `, currentMoney);\\n                ns.print('<<<<<<<<<<<<<<<<<<<<<<<<   ~~   >>>>>>>>>>>>>>>>>>>>>>>>');\\n                if (currentSecurity > securityThreshold) {\\n                    action = 'weaken';\\n                }\\n                else if (currentMoney < maxMoney * moneyThreshold) {\\n                    action = 'grow';\\n                }\\n                else {\\n                    action = 'hack';\\n                }\\n                const pid = ns.exec(`wormy/advanced/scripts/${action}.js`, source, 1, targetServer);\\n                if (pid === 0) {\\n                    ns.print(`ERROR: Unable to start script ${action}.js on server ${source}`);\\n                    continue;\\n                }\\n                else {\\n                    availableRam -= scriptRam;\\n                    ns.print(`SUCCESS: Deploying ${action}.js`);\\n                }\\n                // Manage the supporting scripts\\n                for (let script of supportingScripts) {\\n                    let supportingScriptRam = ns.getScriptRam(script, homeServer);\\n                    if (availableRam >= supportingScriptRam) {\\n                        ns.scp(script, source);\\n                        availableRam -= supportingScriptRam;\\n                    }\\n                    await ns.sleep(50);\\n                }\\n            }\\n            await ns.sleep(50);\\n        }\\n    }\\n}\\n// Function checks for all servers that you have root access to\\nfunction getRootServers(ns, startServer = 'home') {\\n    let visitedServers = [];\\n    let serversToVisit = [startServer];\\n    while (serversToVisit.length > 0) {\\n        let currentServer = serversToVisit.pop();\\n        if (!visitedServers.includes(currentServer)) {\\n            visitedServers.push(currentServer);\\n            let connectedServers = ns.scan(currentServer);\\n            for (let server of connectedServers) {\\n                if (ns.hasRootAccess(server)) {\\n                    serversToVisit.push(server);\\n                }\\n            }\\n        }\\n    }\\n    return visitedServers;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFja3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ybXkvYWR2YW5jZWQvamFja3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHdCQUF3QjtJQUNoRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUVuSSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4REFBOEQsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUV4RixpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDNUIsa0RBQWtEO1lBQ2xELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN4Rix3REFBd0Q7WUFDeEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sWUFBWSxJQUFJLFNBQVMsRUFB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QyxhQUFhLENBQUMsRUFBRTtZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRW5DLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuICAgIGNvbnN0IGhvbWVTZXJ2ZXIgPSAnaG9tZSc7XHJcbiAgICBjb25zdCByYW1CdWZmZXIgPSAwLjUwOyAvLyBSZXNlcnZlIDAuNTBHQiBvZiBSQU1cclxuICAgIGNvbnN0IHN1cHBvcnRpbmdTY3JpcHRzID0gWyd3b3JteS9hZHZhbmNlZC9zY3JpcHRzL2hhY2suanMnLCAnd29ybXkvYWR2YW5jZWQvc2NyaXB0cy9ncm93LmpzJywgJ3dvcm15L2FkdmFuY2VkL3NjcmlwdHMvd2Vha2VuLmpzJ107XHJcblxyXG4gICAgbGV0IHRhcmdldFNlcnZlciA9IG5zLmFyZ3NbMF07XHJcbiAgICBpZiAoIXRhcmdldFNlcnZlcikge1xyXG4gICAgICAgIG5zLnRwcmludCgnRVJST1I6IE5vIHRhcmdldCBzZXJ2ZXIgcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBTVUNDRVNTOiBTdGFydGluZyBhZHZhbmNlZCBhdHRhY2sgc2NyaXB0IG9uIHRhcmdldCBzZXJ2ZXI6ICR7dGFyZ2V0U2VydmVyfWApO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdFNlcnZlcnMgPSBnZXRSb290U2VydmVycyhucyk7XHJcbiAgICAgICAgcm9vdFNlcnZlcnMucHVzaCgnaG9tZScpO1xyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygcm9vdFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgLy8gVHJ5IG51a2luZyB0aGUgdGFyZ2V0U2VydmVyIHRvIGdhaW4gcm9vdCBhY2Nlc3NcclxuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZVJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzb3VyY2UpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzb3VyY2UpIC0gcmFtQnVmZmVyO1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHNjcmlwdFJhbSB3aXRoIHNvbWUgYXJiaXRyYXJ5IGxhcmdlIHZhbHVlLlxyXG4gICAgICAgICAgICBsZXQgc2NyaXB0UmFtID0gMjtcclxuICAgICAgICAgICAgd2hpbGUgKGF2YWlsYWJsZVJhbSA+PSBzY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VjdXJpdHkgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlUaHJlc2hvbGQgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldFNlcnZlcikgKyAxMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vbmV5VGhyZXNob2xkID0gMC43NTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KCc8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwgICB+fiAgID4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PicpXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgSU5GTzogJHt0YXJnZXRTZXJ2ZXJ9IEN1cnJlbnQgU2VjdXJpdHk6IGAsIGN1cnJlbnRTZWN1cml0eSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gU2VjdXJpdHkgVGhyZXNob2xkOiBgLCBzZWN1cml0eVRocmVzaG9sZClcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gTWF4IE1vbmV5OiBgLCBtYXhNb25leSlcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBJTkZPOiAke3RhcmdldFNlcnZlcn0gQ3VycmVudCBNb25leTogYCwgY3VycmVudE1vbmV5KVxyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoJzw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgIH5+ICAgPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+JylcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3VyaXR5ID4gc2VjdXJpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnd2Vha2VuJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudE1vbmV5IDwgbWF4TW9uZXkgKiBtb25leVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdncm93JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2hhY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoYHdvcm15L2FkdmFuY2VkL3NjcmlwdHMvJHthY3Rpb259LmpzYCwgc291cmNlLCAxLCB0YXJnZXRTZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBFUlJPUjogVW5hYmxlIHRvIHN0YXJ0IHNjcmlwdCAke2FjdGlvbn0uanMgb24gc2VydmVyICR7c291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVSYW0gLT0gc2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KGBTVUNDRVNTOiBEZXBsb3lpbmcgJHthY3Rpb259LmpzYClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYW5hZ2UgdGhlIHN1cHBvcnRpbmcgc2NyaXB0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NyaXB0IG9mIHN1cHBvcnRpbmdTY3JpcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRpbmdTY3JpcHRSYW0gPSBucy5nZXRTY3JpcHRSYW0oc2NyaXB0LCBob21lU2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUmFtID49IHN1cHBvcnRpbmdTY3JpcHRSYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2NwKHNjcmlwdCwgc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlUmFtIC09IHN1cHBvcnRpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDUwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCg1MClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGNoZWNrcyBmb3IgYWxsIHNlcnZlcnMgdGhhdCB5b3UgaGF2ZSByb290IGFjY2VzcyB0b1xyXG5mdW5jdGlvbiBnZXRSb290U2VydmVycyhucywgc3RhcnRTZXJ2ZXIgPSAnaG9tZScpIHtcclxuICAgIGxldCB2aXNpdGVkU2VydmVycyA9IFtdO1xyXG4gICAgbGV0IHNlcnZlcnNUb1Zpc2l0ID0gW3N0YXJ0U2VydmVyXTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyc1RvVmlzaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U2VydmVyID0gc2VydmVyc1RvVmlzaXQucG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlzaXRlZFNlcnZlcnMuaW5jbHVkZXMoY3VycmVudFNlcnZlcikpIHtcclxuICAgICAgICAgICAgdmlzaXRlZFNlcnZlcnMucHVzaChjdXJyZW50U2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2NhbihjdXJyZW50U2VydmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2VydmVyIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9WaXNpdC5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpc2l0ZWRTZXJ2ZXJzO1xyXG59Il19\",\"filename\":\"wormy/advanced/jackx.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":10.822500000007087,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":424.9003544461146}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":3.6847,\"discovery\":\"known\",\"playerReputation\":24162.352177214034}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":50.843,\"discovery\":\"known\",\"playerReputation\":70975.6597634656}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":4.342,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":458.28583812802776}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":22.5095,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":2.7401,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":37.5832,\"discovery\":\"known\",\"playerReputation\":2988.365717869439}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":76.9007,\"discovery\":\"known\",\"playerReputation\":21852.8570571212}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"wa\":\"home; cd wormy/advanced\",\"ws\":\"home; cd wormy/simple\",\"s10\":\"scan-analyze 10\",\"s5\":\"scan-analyze 5\",\"s3\":\"scan-analyze 3\",\"start\":\"wa; run wormx.js; run deploy-jack.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":22524.47230144507,\"lastPrice\":22486.776667825794,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":true,\"otlkMag\":18.195870757618394,\"otlkMagForecast\":69.6329721902337,\"cap\":441770448,\"spreadPerc\":0.5,\"shareTxForMovement\":70974,\"shareTxUntilMovement\":70974,\"totalShares\":116700000,\"maxShares\":23300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":31511.02314194635,\"lastPrice\":31570.4494661805,\"playerShares\":494102,\"playerAvgPx\":31519.244525659902,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":17.55657714078921,\"otlkMagForecast\":68.96861308064517,\"cap\":212329035,\"spreadPerc\":0.1,\"shareTxForMovement\":79693,\"shareTxUntilMovement\":33311,\"totalShares\":71700000,\"maxShares\":14300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":17804.431397503988,\"lastPrice\":17857.408756842604,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":12.458173080122014,\"otlkMagForecast\":36.178192844123004,\"cap\":303475715,\"spreadPerc\":0.3,\"shareTxForMovement\":89089,\"shareTxUntilMovement\":89089,\"totalShares\":85200000,\"maxShares\":17000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":14243.934244456395,\"lastPrice\":14284.526456878079,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":12.837778685964174,\"otlkMagForecast\":38.245913493407045,\"cap\":124525774,\"spreadPerc\":0.4,\"shareTxForMovement\":50925,\"shareTxUntilMovement\":50925,\"totalShares\":102500000,\"maxShares\":20500000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":62178.760560225506,\"lastPrice\":62350.74527324792,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":11.607333267358683,\"otlkMagForecast\":61.722530467014764,\"cap\":266830155,\"spreadPerc\":0.6,\"shareTxForMovement\":62702,\"shareTxUntilMovement\":26016,\"totalShares\":52000000,\"maxShares\":10400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":104867.45700150133,\"lastPrice\":104386.24129400773,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":15.556578616172327,\"otlkMagForecast\":63.73611960398609,\"cap\":429554100,\"spreadPerc\":1,\"shareTxForMovement\":62547,\"shareTxUntilMovement\":61457,\"totalShares\":37800000,\"maxShares\":7600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":38088.06085117481,\"lastPrice\":38220.547100194446,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":8.713520553101919,\"otlkMagForecast\":40.46325452605076,\"cap\":354832455,\"spreadPerc\":0.2,\"shareTxForMovement\":71184,\"shareTxUntilMovement\":5728,\"totalShares\":72100000,\"maxShares\":14400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":26104.802348145105,\"lastPrice\":25967.680218643774,\"playerShares\":611091,\"playerAvgPx\":25782.007600926627,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":12.269022850331412,\"otlkMagForecast\":64.58353977248507,\"cap\":625927579,\"spreadPerc\":0.3,\"shareTxForMovement\":71309,\"shareTxUntilMovement\":45992,\"totalShares\":67500000,\"maxShares\":13500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":19586.152118841143,\"lastPrice\":19651.818481360726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":8.201416899299717,\"otlkMagForecast\":42.54194178141112,\"cap\":362346075,\"spreadPerc\":0.6,\"shareTxForMovement\":48218,\"shareTxUntilMovement\":40106,\"totalShares\":50000000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8601.281865858573,\"lastPrice\":8576.839679297353,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":10.286910195880617,\"otlkMagForecast\":40.18287878388748,\"cap\":102153034,\"spreadPerc\":0.9,\"shareTxForMovement\":99359,\"shareTxUntilMovement\":99359,\"totalShares\":86200000,\"maxShares\":17200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":26692.818915811637,\"lastPrice\":26625.86763821558,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":8.514290867614886,\"otlkMagForecast\":57.74442886824244,\"cap\":396150549,\"spreadPerc\":0.8,\"shareTxForMovement\":95413,\"shareTxUntilMovement\":95413,\"totalShares\":49300000,\"maxShares\":9900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":7086.564066947407,\"lastPrice\":7109.135189549955,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":7.241062526897445,\"otlkMagForecast\":42.69019199314752,\"cap\":96802873,\"spreadPerc\":0.3,\"shareTxForMovement\":78926,\"shareTxUntilMovement\":78926,\"totalShares\":102200000,\"maxShares\":20400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":13573.65280313472,\"lastPrice\":13535.646323001252,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":6.57335291819673,\"otlkMagForecast\":56.75453187031095,\"cap\":95571616,\"spreadPerc\":0.9,\"shareTxForMovement\":91884,\"shareTxUntilMovement\":91884,\"totalShares\":62300000,\"maxShares\":12500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":22082.08280281472,\"lastPrice\":22130.205197132767,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":true,\"otlkMag\":10.154064889078755,\"otlkMagForecast\":60.393377256496244,\"cap\":185560862,\"spreadPerc\":1,\"shareTxForMovement\":71581,\"shareTxUntilMovement\":71581,\"totalShares\":56100000,\"maxShares\":11200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17050.705757190965,\"lastPrice\":17008.649975928925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":5.427228693055122,\"otlkMagForecast\":55.40087402796047,\"cap\":305434691,\"spreadPerc\":0.8,\"shareTxForMovement\":49263,\"shareTxUntilMovement\":49263,\"totalShares\":38400000,\"maxShares\":7700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6622.410304878054,\"lastPrice\":6641.560315769966,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.29333603258094,\"otlkMagForecast\":46.67443371586847,\"cap\":53315777,\"spreadPerc\":0.8,\"shareTxForMovement\":120290,\"shareTxUntilMovement\":120290,\"totalShares\":95500000,\"maxShares\":19100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":9795.964939969173,\"lastPrice\":9826.75512758525,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":8.263412802092624,\"otlkMagForecast\":44.43010043140835,\"cap\":284781439,\"spreadPerc\":0.9,\"shareTxForMovement\":93202,\"shareTxUntilMovement\":93202,\"totalShares\":33300000,\"maxShares\":6700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":26573.21321976525,\"lastPrice\":26645.600336521744,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.458250651535844,\"otlkMagForecast\":40.81375111322283,\"cap\":306963009,\"spreadPerc\":0.7,\"shareTxForMovement\":108343,\"shareTxUntilMovement\":98191,\"totalShares\":36300000,\"maxShares\":7300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24794.193387394083,\"lastPrice\":24721.66973128174,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":5.938228800869301,\"otlkMagForecast\":54.73337858532348,\"cap\":590705374,\"spreadPerc\":0.8,\"shareTxForMovement\":52852,\"shareTxUntilMovement\":52852,\"totalShares\":22600000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":27892.63473068764,\"lastPrice\":28186.039460619595,\"playerShares\":230589,\"playerAvgPx\":25688.612568965014,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.51,\"b\":true,\"otlkMag\":9.015913060132823,\"otlkMagForecast\":58.88962339065934,\"cap\":64199937,\"spreadPerc\":0.6,\"shareTxForMovement\":46500,\"shareTxUntilMovement\":40157,\"totalShares\":65900000,\"maxShares\":13200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7152.686266145183,\"lastPrice\":7113.632173637181,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":3.457894638934947,\"otlkMagForecast\":45.838047784405276,\"cap\":139468454,\"spreadPerc\":0.7,\"shareTxForMovement\":39255,\"shareTxUntilMovement\":39255,\"totalShares\":50000000,\"maxShares\":10000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2751.5084541647047,\"lastPrice\":2758.6578014005067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":2.1509182700136096,\"otlkMagForecast\":48.90100201630092,\"cap\":36636423,\"spreadPerc\":0.6,\"shareTxForMovement\":64202,\"shareTxUntilMovement\":64202,\"totalShares\":58200000,\"maxShares\":11600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":21864.619702729276,\"lastPrice\":22035.970995055988,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.87,\"b\":true,\"otlkMag\":6.424409657653069,\"otlkMagForecast\":58.59428109091324,\"cap\":54372877,\"spreadPerc\":0.9,\"shareTxForMovement\":44492,\"shareTxUntilMovement\":27328,\"totalShares\":29700000,\"maxShares\":5900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2747.6833250412137,\"lastPrice\":2764.9560869602337,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.5,\"b\":true,\"otlkMag\":2.50808889407869,\"otlkMagForecast\":55.96108815496177,\"cap\":52232564,\"spreadPerc\":0.7,\"shareTxForMovement\":59218,\"shareTxUntilMovement\":57448,\"totalShares\":61600000,\"maxShares\":12300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5829.441138698181,\"lastPrice\":5850.939900275005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":false,\"otlkMag\":5.450111388058472,\"otlkMagForecast\":46.695893857910306,\"cap\":97605723,\"spreadPerc\":1.1,\"shareTxForMovement\":66122,\"shareTxUntilMovement\":66122,\"totalShares\":35200000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2823.573302172084,\"lastPrice\":2854.1030082046277,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.58,\"b\":true,\"otlkMag\":1.5302001125077298,\"otlkMagForecast\":54.93926878028713,\"cap\":40095434,\"spreadPerc\":2,\"shareTxForMovement\":25269,\"shareTxUntilMovement\":12691,\"totalShares\":27100000,\"maxShares\":5400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4197.747827853984,\"lastPrice\":4214.108575420053,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":false,\"otlkMag\":1.338288826423654,\"otlkMagForecast\":50.61932816196201,\"cap\":25045115,\"spreadPerc\":0.8,\"shareTxForMovement\":50073,\"shareTxUntilMovement\":50073,\"totalShares\":28400000,\"maxShares\":5700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":4261.538439503413,\"lastPrice\":4247.298549778959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":1.9949573649226553,\"otlkMagForecast\":49.685733097112205,\"cap\":80122029,\"spreadPerc\":0.8,\"shareTxForMovement\":177763,\"shareTxUntilMovement\":177763,\"totalShares\":13600000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2404.29749498825,\"lastPrice\":2377.002435866687,\"playerShares\":3200000,\"playerAvgPx\":2063.8504126881135,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.74,\"b\":true,\"otlkMag\":8.068832492945793,\"otlkMagForecast\":55.59676547204013,\"cap\":19188487,\"spreadPerc\":1.4,\"shareTxForMovement\":43711,\"shareTxUntilMovement\":25761,\"totalShares\":15800000,\"maxShares\":3200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":253.09923492705914,\"lastPrice\":256.49349144325606,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.2,\"b\":false,\"otlkMag\":5.331844753939612,\"otlkMagForecast\":47.621226308873915,\"cap\":14517798,\"spreadPerc\":0.7,\"shareTxForMovement\":27562,\"shareTxUntilMovement\":26410,\"totalShares\":57300000,\"maxShares\":11500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":204.59700398288865,\"lastPrice\":205.71167439123218,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":5.428292885085133,\"otlkMagForecast\":34.33804931416928,\"cap\":6180023,\"spreadPerc\":0.8,\"shareTxForMovement\":66400,\"shareTxUntilMovement\":884,\"totalShares\":353400000,\"maxShares\":70700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":11929.401332987965,\"lastPrice\":11967.397176603876,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.85489363436164,\"otlkMagForecast\":58.833927446181946,\"cap\":30461118,\"spreadPerc\":0.7,\"shareTxForMovement\":210180,\"shareTxUntilMovement\":210180,\"totalShares\":22700000,\"maxShares\":4500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":7364.649920091759,\"lastPrice\":7380.390695893431,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":11.57152480007553,\"otlkMagForecast\":39.609150520285,\"cap\":74867970,\"spreadPerc\":0.2,\"shareTxForMovement\":172828,\"shareTxUntilMovement\":172828,\"totalShares\":31000000,\"maxShares\":6200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":2,\"lastUpdate\":1703977930449,\"ticksUntilCycle\":10}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"wormy/advanced/auto-exec.js\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"GoTraditionalStyle\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":0,\"MaxLogCapacity\":20,\"MaxPortCapacity\":75,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":true,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-76,\"y\":281,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1703906863397","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}